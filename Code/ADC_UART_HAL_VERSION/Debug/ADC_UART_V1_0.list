
ADC_UART_V1_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08006368  08006368  00016368  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006784  08006784  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006784  08006784  00016784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800678c  0800678c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800678c  0800678c  0001678c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006790  08006790  00016790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          000000f8  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002d4  200002d4  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000926f  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000173c  00000000  00000000  0002947b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d8  00000000  00000000  0002abb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000740  00000000  00000000  0002b390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000220c3  00000000  00000000  0002bad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b17d  00000000  00000000  0004db93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d04e5  00000000  00000000  00058d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001291f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003114  00000000  00000000  00129248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006350 	.word	0x08006350

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08006350 	.word	0x08006350

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <shift_digits>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Function to shift digits in an integer and return the result as a string
// Function to shift digits in an integer and return the result as a string
char* shift_digits(int input_integer) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08c      	sub	sp, #48	; 0x30
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
    // Convert the integer to a string
    char input_str[20];  // Assuming a reasonable maximum length for the string
    sprintf(input_str, "%d", input_integer);
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	4920      	ldr	r1, [pc, #128]	; (8000fdc <shift_digits+0x90>)
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f003 f875 	bl	800404c <siprintf>

    // Allocate memory for the result string
    char* result_str = malloc(3 * strlen(input_str));  // Each digit is shifted by 3 characters, and 2 extra characters for spaces and null terminator
 8000f62:	f107 030c 	add.w	r3, r7, #12
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff f932 	bl	80001d0 <strlen>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	4613      	mov	r3, r2
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	4413      	add	r3, r2
 8000f74:	4618      	mov	r0, r3
 8000f76:	f002 faff 	bl	8003578 <malloc>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24

    // Shift each digit by +48 and join them with spaces
    int index = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int i = 0; i < strlen(input_str); i++) {
 8000f82:	2300      	movs	r3, #0
 8000f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f86:	e014      	b.n	8000fb2 <shift_digits+0x66>
        int shifted_digit = input_str[i] ;
 8000f88:	f107 020c 	add.w	r2, r7, #12
 8000f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f8e:	4413      	add	r3, r2
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	623b      	str	r3, [r7, #32]
        index += sprintf(result_str + index, "%d ", shifted_digit);
 8000f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f98:	4413      	add	r3, r2
 8000f9a:	6a3a      	ldr	r2, [r7, #32]
 8000f9c:	4910      	ldr	r1, [pc, #64]	; (8000fe0 <shift_digits+0x94>)
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f003 f854 	bl	800404c <siprintf>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fa8:	4413      	add	r3, r2
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int i = 0; i < strlen(input_str); i++) {
 8000fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fae:	3301      	adds	r3, #1
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff f90a 	bl	80001d0 <strlen>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d8e1      	bhi.n	8000f88 <shift_digits+0x3c>
    }

    // Remove the trailing space and add the null terminator
    result_str[index - 1] = '\0';
 8000fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fca:	4413      	add	r3, r2
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]

    return result_str;
 8000fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3730      	adds	r7, #48	; 0x30
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	08006368 	.word	0x08006368
 8000fe0:	0800636c 	.word	0x0800636c
 8000fe4:	00000000 	.word	0x00000000

08000fe8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fee:	f000 fb5b 	bl	80016a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff2:	f000 f857 	bl	80010a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff6:	f000 f93b 	bl	8001270 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ffa:	f000 f8bd 	bl	8001178 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000ffe:	f000 f90d 	bl	800121c <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 HAL_ADC_Start(&hadc1);
 8001002:	4823      	ldr	r0, [pc, #140]	; (8001090 <main+0xa8>)
 8001004:	f000 fc2a 	bl	800185c <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&hadc1,300);
 8001008:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800100c:	4820      	ldr	r0, [pc, #128]	; (8001090 <main+0xa8>)
 800100e:	f000 fcf7 	bl	8001a00 <HAL_ADC_PollForConversion>
	 raw= HAL_ADC_GetValue(&hadc1);
 8001012:	481f      	ldr	r0, [pc, #124]	; (8001090 <main+0xa8>)
 8001014:	f000 fd7f 	bl	8001b16 <HAL_ADC_GetValue>
 8001018:	4603      	mov	r3, r0
 800101a:	b29a      	uxth	r2, r3
 800101c:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <main+0xac>)
 800101e:	801a      	strh	r2, [r3, #0]

	 float vin= raw*(3.3/4096);
 8001020:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <main+0xac>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fa7d 	bl	8000524 <__aeabi_i2d>
 800102a:	a317      	add	r3, pc, #92	; (adr r3, 8001088 <main+0xa0>)
 800102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001030:	f7ff fae2 	bl	80005f8 <__aeabi_dmul>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4610      	mov	r0, r2
 800103a:	4619      	mov	r1, r3
 800103c:	f7ff fdb4 	bl	8000ba8 <__aeabi_d2f>
 8001040:	4603      	mov	r3, r0
 8001042:	607b      	str	r3, [r7, #4]
	 char* msg2 = shift_digits(raw);
 8001044:	4b13      	ldr	r3, [pc, #76]	; (8001094 <main+0xac>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff7f 	bl	8000f4c <shift_digits>
 800104e:	6038      	str	r0, [r7, #0]
	// printf("le Code ASCII est = %s\n", msg2);
	// sprintf(msg1,"vol = %.2f\r\n",vin);

	 sprintf(msg, "ASCII Code: %s, Voltage: %.2f V\r\n", msg2, vin);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff fa79 	bl	8000548 <__aeabi_f2d>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	e9cd 2300 	strd	r2, r3, [sp]
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	490d      	ldr	r1, [pc, #52]	; (8001098 <main+0xb0>)
 8001062:	480e      	ldr	r0, [pc, #56]	; (800109c <main+0xb4>)
 8001064:	f002 fff2 	bl	800404c <siprintf>


	// HAL_UART_Transmit(&huart2,(uint8_t*)msg1,strlen(msg1),300);
	//HAL_UART_Transmit(&huart2,(uint8_t*)msg2,strlen(msg2),300);

	 HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 300);
 8001068:	480c      	ldr	r0, [pc, #48]	; (800109c <main+0xb4>)
 800106a:	f7ff f8b1 	bl	80001d0 <strlen>
 800106e:	4603      	mov	r3, r0
 8001070:	b29a      	uxth	r2, r3
 8001072:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001076:	4909      	ldr	r1, [pc, #36]	; (800109c <main+0xb4>)
 8001078:	4809      	ldr	r0, [pc, #36]	; (80010a0 <main+0xb8>)
 800107a:	f001 fede 	bl	8002e3a <HAL_UART_Transmit>
	 HAL_Delay(500);
 800107e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001082:	f000 fb83 	bl	800178c <HAL_Delay>
  {
 8001086:	e7bc      	b.n	8001002 <main+0x1a>
 8001088:	66666666 	.word	0x66666666
 800108c:	3f4a6666 	.word	0x3f4a6666
 8001090:	20000230 	.word	0x20000230
 8001094:	200001f8 	.word	0x200001f8
 8001098:	08006370 	.word	0x08006370
 800109c:	200001fc 	.word	0x200001fc
 80010a0:	20000278 	.word	0x20000278

080010a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b094      	sub	sp, #80	; 0x50
 80010a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010aa:	f107 0320 	add.w	r3, r7, #32
 80010ae:	2230      	movs	r2, #48	; 0x30
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 fa68 	bl	8003588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c8:	2300      	movs	r3, #0
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	4b28      	ldr	r3, [pc, #160]	; (8001170 <SystemClock_Config+0xcc>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	4a27      	ldr	r2, [pc, #156]	; (8001170 <SystemClock_Config+0xcc>)
 80010d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d6:	6413      	str	r3, [r2, #64]	; 0x40
 80010d8:	4b25      	ldr	r3, [pc, #148]	; (8001170 <SystemClock_Config+0xcc>)
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e4:	2300      	movs	r3, #0
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	4b22      	ldr	r3, [pc, #136]	; (8001174 <SystemClock_Config+0xd0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a21      	ldr	r2, [pc, #132]	; (8001174 <SystemClock_Config+0xd0>)
 80010ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <SystemClock_Config+0xd0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001100:	2301      	movs	r3, #1
 8001102:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001104:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110a:	2302      	movs	r3, #2
 800110c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800110e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001112:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001114:	2304      	movs	r3, #4
 8001116:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001118:	2348      	movs	r3, #72	; 0x48
 800111a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800111c:	2302      	movs	r3, #2
 800111e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001120:	2307      	movs	r3, #7
 8001122:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001124:	f107 0320 	add.w	r3, r7, #32
 8001128:	4618      	mov	r0, r3
 800112a:	f001 f9a1 	bl	8002470 <HAL_RCC_OscConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001134:	f000 f8d2 	bl	80012dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001138:	230f      	movs	r3, #15
 800113a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800113c:	2302      	movs	r3, #2
 800113e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001148:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800114a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	2102      	movs	r1, #2
 8001156:	4618      	mov	r0, r3
 8001158:	f001 fc02 	bl	8002960 <HAL_RCC_ClockConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001162:	f000 f8bb 	bl	80012dc <Error_Handler>
  }
}
 8001166:	bf00      	nop
 8001168:	3750      	adds	r7, #80	; 0x50
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800
 8001174:	40007000 	.word	0x40007000

08001178 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800117e:	463b      	mov	r3, r7
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800118a:	4b21      	ldr	r3, [pc, #132]	; (8001210 <MX_ADC1_Init+0x98>)
 800118c:	4a21      	ldr	r2, [pc, #132]	; (8001214 <MX_ADC1_Init+0x9c>)
 800118e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001190:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <MX_ADC1_Init+0x98>)
 8001192:	2200      	movs	r2, #0
 8001194:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001196:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <MX_ADC1_Init+0x98>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800119c:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <MX_ADC1_Init+0x98>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011a2:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <MX_ADC1_Init+0x98>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011a8:	4b19      	ldr	r3, [pc, #100]	; (8001210 <MX_ADC1_Init+0x98>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b0:	4b17      	ldr	r3, [pc, #92]	; (8001210 <MX_ADC1_Init+0x98>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b6:	4b16      	ldr	r3, [pc, #88]	; (8001210 <MX_ADC1_Init+0x98>)
 80011b8:	4a17      	ldr	r2, [pc, #92]	; (8001218 <MX_ADC1_Init+0xa0>)
 80011ba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011bc:	4b14      	ldr	r3, [pc, #80]	; (8001210 <MX_ADC1_Init+0x98>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011c2:	4b13      	ldr	r3, [pc, #76]	; (8001210 <MX_ADC1_Init+0x98>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_ADC1_Init+0x98>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <MX_ADC1_Init+0x98>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d6:	480e      	ldr	r0, [pc, #56]	; (8001210 <MX_ADC1_Init+0x98>)
 80011d8:	f000 fafc 	bl	80017d4 <HAL_ADC_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011e2:	f000 f87b 	bl	80012dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011ea:	2301      	movs	r3, #1
 80011ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f2:	463b      	mov	r3, r7
 80011f4:	4619      	mov	r1, r3
 80011f6:	4806      	ldr	r0, [pc, #24]	; (8001210 <MX_ADC1_Init+0x98>)
 80011f8:	f000 fc9a 	bl	8001b30 <HAL_ADC_ConfigChannel>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001202:	f000 f86b 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000230 	.word	0x20000230
 8001214:	40012000 	.word	0x40012000
 8001218:	0f000001 	.word	0x0f000001

0800121c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_USART2_UART_Init+0x4c>)
 8001222:	4a12      	ldr	r2, [pc, #72]	; (800126c <MX_USART2_UART_Init+0x50>)
 8001224:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <MX_USART2_UART_Init+0x4c>)
 8001228:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800122c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_USART2_UART_Init+0x4c>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <MX_USART2_UART_Init+0x4c>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <MX_USART2_UART_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_USART2_UART_Init+0x4c>)
 8001242:	220c      	movs	r2, #12
 8001244:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <MX_USART2_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_USART2_UART_Init+0x4c>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_USART2_UART_Init+0x4c>)
 8001254:	f001 fda4 	bl	8002da0 <HAL_UART_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800125e:	f000 f83d 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000278 	.word	0x20000278
 800126c:	40004400 	.word	0x40004400

08001270 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <MX_GPIO_Init+0x68>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a16      	ldr	r2, [pc, #88]	; (80012d8 <MX_GPIO_Init+0x68>)
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <MX_GPIO_Init+0x68>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <MX_GPIO_Init+0x68>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a0f      	ldr	r2, [pc, #60]	; (80012d8 <MX_GPIO_Init+0x68>)
 800129c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <MX_GPIO_Init+0x68>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <MX_GPIO_Init+0x68>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a08      	ldr	r2, [pc, #32]	; (80012d8 <MX_GPIO_Init+0x68>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <MX_GPIO_Init+0x68>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012ca:	bf00      	nop
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800

080012dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e0:	b672      	cpsid	i
}
 80012e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <Error_Handler+0x8>
	...

080012e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	4b10      	ldr	r3, [pc, #64]	; (8001334 <HAL_MspInit+0x4c>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	4a0f      	ldr	r2, [pc, #60]	; (8001334 <HAL_MspInit+0x4c>)
 80012f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012fc:	6453      	str	r3, [r2, #68]	; 0x44
 80012fe:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <HAL_MspInit+0x4c>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	603b      	str	r3, [r7, #0]
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <HAL_MspInit+0x4c>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	4a08      	ldr	r2, [pc, #32]	; (8001334 <HAL_MspInit+0x4c>)
 8001314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001318:	6413      	str	r3, [r2, #64]	; 0x40
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_MspInit+0x4c>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001326:	2007      	movs	r0, #7
 8001328:	f000 fed2 	bl	80020d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40023800 	.word	0x40023800

08001338 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	; 0x28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a17      	ldr	r2, [pc, #92]	; (80013b4 <HAL_ADC_MspInit+0x7c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d127      	bne.n	80013aa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <HAL_ADC_MspInit+0x80>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	4a15      	ldr	r2, [pc, #84]	; (80013b8 <HAL_ADC_MspInit+0x80>)
 8001364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001368:	6453      	str	r3, [r2, #68]	; 0x44
 800136a:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <HAL_ADC_MspInit+0x80>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <HAL_ADC_MspInit+0x80>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a0e      	ldr	r2, [pc, #56]	; (80013b8 <HAL_ADC_MspInit+0x80>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <HAL_ADC_MspInit+0x80>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001392:	2301      	movs	r3, #1
 8001394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001396:	2303      	movs	r3, #3
 8001398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	4805      	ldr	r0, [pc, #20]	; (80013bc <HAL_ADC_MspInit+0x84>)
 80013a6:	f000 fec7 	bl	8002138 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013aa:	bf00      	nop
 80013ac:	3728      	adds	r7, #40	; 0x28
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40012000 	.word	0x40012000
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020000 	.word	0x40020000

080013c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	; 0x28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a19      	ldr	r2, [pc, #100]	; (8001444 <HAL_UART_MspInit+0x84>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d12b      	bne.n	800143a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	4b18      	ldr	r3, [pc, #96]	; (8001448 <HAL_UART_MspInit+0x88>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	4a17      	ldr	r2, [pc, #92]	; (8001448 <HAL_UART_MspInit+0x88>)
 80013ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f0:	6413      	str	r3, [r2, #64]	; 0x40
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <HAL_UART_MspInit+0x88>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <HAL_UART_MspInit+0x88>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a10      	ldr	r2, [pc, #64]	; (8001448 <HAL_UART_MspInit+0x88>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <HAL_UART_MspInit+0x88>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800141a:	230c      	movs	r3, #12
 800141c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001426:	2303      	movs	r3, #3
 8001428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800142a:	2307      	movs	r3, #7
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	4619      	mov	r1, r3
 8001434:	4805      	ldr	r0, [pc, #20]	; (800144c <HAL_UART_MspInit+0x8c>)
 8001436:	f000 fe7f 	bl	8002138 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800143a:	bf00      	nop
 800143c:	3728      	adds	r7, #40	; 0x28
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40004400 	.word	0x40004400
 8001448:	40023800 	.word	0x40023800
 800144c:	40020000 	.word	0x40020000

08001450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <NMI_Handler+0x4>

08001456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <HardFault_Handler+0x4>

0800145c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <MemManage_Handler+0x4>

08001462 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001466:	e7fe      	b.n	8001466 <BusFault_Handler+0x4>

08001468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <UsageFault_Handler+0x4>

0800146e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800149c:	f000 f956 	bl	800174c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return 1;
 80014a8:	2301      	movs	r3, #1
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <_kill>:

int _kill(int pid, int sig)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014be:	f002 f831 	bl	8003524 <__errno>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2216      	movs	r2, #22
 80014c6:	601a      	str	r2, [r3, #0]
  return -1;
 80014c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <_exit>:

void _exit (int status)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014dc:	f04f 31ff 	mov.w	r1, #4294967295
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ffe7 	bl	80014b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014e6:	e7fe      	b.n	80014e6 <_exit+0x12>

080014e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	e00a      	b.n	8001510 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014fa:	f3af 8000 	nop.w
 80014fe:	4601      	mov	r1, r0
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	60ba      	str	r2, [r7, #8]
 8001506:	b2ca      	uxtb	r2, r1
 8001508:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	3301      	adds	r3, #1
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	429a      	cmp	r2, r3
 8001516:	dbf0      	blt.n	80014fa <_read+0x12>
  }

  return len;
 8001518:	687b      	ldr	r3, [r7, #4]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af00      	add	r7, sp, #0
 8001528:	60f8      	str	r0, [r7, #12]
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	e009      	b.n	8001548 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	1c5a      	adds	r2, r3, #1
 8001538:	60ba      	str	r2, [r7, #8]
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	3301      	adds	r3, #1
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	429a      	cmp	r2, r3
 800154e:	dbf1      	blt.n	8001534 <_write+0x12>
  }
  return len;
 8001550:	687b      	ldr	r3, [r7, #4]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <_close>:

int _close(int file)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001562:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001582:	605a      	str	r2, [r3, #4]
  return 0;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <_isatty>:

int _isatty(int file)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800159a:	2301      	movs	r3, #1
}
 800159c:	4618      	mov	r0, r3
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
	...

080015c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015cc:	4a14      	ldr	r2, [pc, #80]	; (8001620 <_sbrk+0x5c>)
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <_sbrk+0x60>)
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d8:	4b13      	ldr	r3, [pc, #76]	; (8001628 <_sbrk+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d102      	bne.n	80015e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <_sbrk+0x64>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	; (800162c <_sbrk+0x68>)
 80015e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <_sbrk+0x64>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d207      	bcs.n	8001604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f4:	f001 ff96 	bl	8003524 <__errno>
 80015f8:	4603      	mov	r3, r0
 80015fa:	220c      	movs	r2, #12
 80015fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001602:	e009      	b.n	8001618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001604:	4b08      	ldr	r3, [pc, #32]	; (8001628 <_sbrk+0x64>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800160a:	4b07      	ldr	r3, [pc, #28]	; (8001628 <_sbrk+0x64>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	4a05      	ldr	r2, [pc, #20]	; (8001628 <_sbrk+0x64>)
 8001614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001616:	68fb      	ldr	r3, [r7, #12]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20020000 	.word	0x20020000
 8001624:	00000400 	.word	0x00000400
 8001628:	200002bc 	.word	0x200002bc
 800162c:	200002d8 	.word	0x200002d8

08001630 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <SystemInit+0x20>)
 8001636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800163a:	4a05      	ldr	r2, [pc, #20]	; (8001650 <SystemInit+0x20>)
 800163c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001640:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800168c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001658:	480d      	ldr	r0, [pc, #52]	; (8001690 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800165a:	490e      	ldr	r1, [pc, #56]	; (8001694 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800165c:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166e:	4a0b      	ldr	r2, [pc, #44]	; (800169c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001670:	4c0b      	ldr	r4, [pc, #44]	; (80016a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800167e:	f7ff ffd7 	bl	8001630 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001682:	f001 ff55 	bl	8003530 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001686:	f7ff fcaf 	bl	8000fe8 <main>
  bx  lr    
 800168a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800168c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001694:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001698:	08006794 	.word	0x08006794
  ldr r2, =_sbss
 800169c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80016a0:	200002d4 	.word	0x200002d4

080016a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a4:	e7fe      	b.n	80016a4 <ADC_IRQHandler>
	...

080016a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016ac:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0d      	ldr	r2, [pc, #52]	; (80016e8 <HAL_Init+0x40>)
 80016b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <HAL_Init+0x40>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <HAL_Init+0x40>)
 80016be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <HAL_Init+0x40>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a07      	ldr	r2, [pc, #28]	; (80016e8 <HAL_Init+0x40>)
 80016ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d0:	2003      	movs	r0, #3
 80016d2:	f000 fcfd 	bl	80020d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d6:	2000      	movs	r0, #0
 80016d8:	f000 f808 	bl	80016ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016dc:	f7ff fe04 	bl	80012e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023c00 	.word	0x40023c00

080016ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_InitTick+0x54>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_InitTick+0x58>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001702:	fbb3 f3f1 	udiv	r3, r3, r1
 8001706:	fbb2 f3f3 	udiv	r3, r2, r3
 800170a:	4618      	mov	r0, r3
 800170c:	f000 fd07 	bl	800211e <HAL_SYSTICK_Config>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e00e      	b.n	8001738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b0f      	cmp	r3, #15
 800171e:	d80a      	bhi.n	8001736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001720:	2200      	movs	r2, #0
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	f04f 30ff 	mov.w	r0, #4294967295
 8001728:	f000 fcdd 	bl	80020e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800172c:	4a06      	ldr	r2, [pc, #24]	; (8001748 <HAL_InitTick+0x5c>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	e000      	b.n	8001738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000000 	.word	0x20000000
 8001744:	20000008 	.word	0x20000008
 8001748:	20000004 	.word	0x20000004

0800174c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_IncTick+0x20>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_IncTick+0x24>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4413      	add	r3, r2
 800175c:	4a04      	ldr	r2, [pc, #16]	; (8001770 <HAL_IncTick+0x24>)
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000008 	.word	0x20000008
 8001770:	200002c0 	.word	0x200002c0

08001774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return uwTick;
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <HAL_GetTick+0x14>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	200002c0 	.word	0x200002c0

0800178c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001794:	f7ff ffee 	bl	8001774 <HAL_GetTick>
 8001798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a4:	d005      	beq.n	80017b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_Delay+0x44>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4413      	add	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017b2:	bf00      	nop
 80017b4:	f7ff ffde 	bl	8001774 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d8f7      	bhi.n	80017b4 <HAL_Delay+0x28>
  {
  }
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000008 	.word	0x20000008

080017d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e033      	b.n	8001852 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d109      	bne.n	8001806 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff fda0 	bl	8001338 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f003 0310 	and.w	r3, r3, #16
 800180e:	2b00      	cmp	r3, #0
 8001810:	d118      	bne.n	8001844 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800181a:	f023 0302 	bic.w	r3, r3, #2
 800181e:	f043 0202 	orr.w	r2, r3, #2
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 faa4 	bl	8001d74 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f023 0303 	bic.w	r3, r3, #3
 800183a:	f043 0201 	orr.w	r2, r3, #1
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	641a      	str	r2, [r3, #64]	; 0x40
 8001842:	e001      	b.n	8001848 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001850:	7bfb      	ldrb	r3, [r7, #15]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800186e:	2b01      	cmp	r3, #1
 8001870:	d101      	bne.n	8001876 <HAL_ADC_Start+0x1a>
 8001872:	2302      	movs	r3, #2
 8001874:	e0b2      	b.n	80019dc <HAL_ADC_Start+0x180>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b01      	cmp	r3, #1
 800188a:	d018      	beq.n	80018be <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 0201 	orr.w	r2, r2, #1
 800189a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800189c:	4b52      	ldr	r3, [pc, #328]	; (80019e8 <HAL_ADC_Start+0x18c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a52      	ldr	r2, [pc, #328]	; (80019ec <HAL_ADC_Start+0x190>)
 80018a2:	fba2 2303 	umull	r2, r3, r2, r3
 80018a6:	0c9a      	lsrs	r2, r3, #18
 80018a8:	4613      	mov	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018b0:	e002      	b.n	80018b8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f9      	bne.n	80018b2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d17a      	bne.n	80019c2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018d4:	f023 0301 	bic.w	r3, r3, #1
 80018d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d007      	beq.n	80018fe <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800190a:	d106      	bne.n	800191a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001910:	f023 0206 	bic.w	r2, r3, #6
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	645a      	str	r2, [r3, #68]	; 0x44
 8001918:	e002      	b.n	8001920 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001928:	4b31      	ldr	r3, [pc, #196]	; (80019f0 <HAL_ADC_Start+0x194>)
 800192a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001934:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 031f 	and.w	r3, r3, #31
 800193e:	2b00      	cmp	r3, #0
 8001940:	d12a      	bne.n	8001998 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a2b      	ldr	r2, [pc, #172]	; (80019f4 <HAL_ADC_Start+0x198>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d015      	beq.n	8001978 <HAL_ADC_Start+0x11c>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a29      	ldr	r2, [pc, #164]	; (80019f8 <HAL_ADC_Start+0x19c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d105      	bne.n	8001962 <HAL_ADC_Start+0x106>
 8001956:	4b26      	ldr	r3, [pc, #152]	; (80019f0 <HAL_ADC_Start+0x194>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 031f 	and.w	r3, r3, #31
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00a      	beq.n	8001978 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a25      	ldr	r2, [pc, #148]	; (80019fc <HAL_ADC_Start+0x1a0>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d136      	bne.n	80019da <HAL_ADC_Start+0x17e>
 800196c:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <HAL_ADC_Start+0x194>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 0310 	and.w	r3, r3, #16
 8001974:	2b00      	cmp	r3, #0
 8001976:	d130      	bne.n	80019da <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d129      	bne.n	80019da <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	e020      	b.n	80019da <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a15      	ldr	r2, [pc, #84]	; (80019f4 <HAL_ADC_Start+0x198>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d11b      	bne.n	80019da <HAL_ADC_Start+0x17e>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d114      	bne.n	80019da <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	e00b      	b.n	80019da <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	f043 0210 	orr.w	r2, r3, #16
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	f043 0201 	orr.w	r2, r3, #1
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	20000000 	.word	0x20000000
 80019ec:	431bde83 	.word	0x431bde83
 80019f0:	40012300 	.word	0x40012300
 80019f4:	40012000 	.word	0x40012000
 80019f8:	40012100 	.word	0x40012100
 80019fc:	40012200 	.word	0x40012200

08001a00 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a1c:	d113      	bne.n	8001a46 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a2c:	d10b      	bne.n	8001a46 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f043 0220 	orr.w	r2, r3, #32
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e063      	b.n	8001b0e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001a46:	f7ff fe95 	bl	8001774 <HAL_GetTick>
 8001a4a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a4c:	e021      	b.n	8001a92 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a54:	d01d      	beq.n	8001a92 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d007      	beq.n	8001a6c <HAL_ADC_PollForConversion+0x6c>
 8001a5c:	f7ff fe8a 	bl	8001774 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d212      	bcs.n	8001a92 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d00b      	beq.n	8001a92 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f043 0204 	orr.w	r2, r3, #4
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e03d      	b.n	8001b0e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d1d6      	bne.n	8001a4e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f06f 0212 	mvn.w	r2, #18
 8001aa8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d123      	bne.n	8001b0c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d11f      	bne.n	8001b0c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d006      	beq.n	8001ae8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d111      	bne.n	8001b0c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d105      	bne.n	8001b0c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	f043 0201 	orr.w	r2, r3, #1
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d101      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x1c>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e105      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x228>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b09      	cmp	r3, #9
 8001b5a:	d925      	bls.n	8001ba8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68d9      	ldr	r1, [r3, #12]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	4413      	add	r3, r2
 8001b70:	3b1e      	subs	r3, #30
 8001b72:	2207      	movs	r2, #7
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43da      	mvns	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	400a      	ands	r2, r1
 8001b80:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68d9      	ldr	r1, [r3, #12]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	4618      	mov	r0, r3
 8001b94:	4603      	mov	r3, r0
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4403      	add	r3, r0
 8001b9a:	3b1e      	subs	r3, #30
 8001b9c:	409a      	lsls	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	e022      	b.n	8001bee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6919      	ldr	r1, [r3, #16]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	2207      	movs	r2, #7
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43da      	mvns	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	400a      	ands	r2, r1
 8001bca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6919      	ldr	r1, [r3, #16]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	4618      	mov	r0, r3
 8001bde:	4603      	mov	r3, r0
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4403      	add	r3, r0
 8001be4:	409a      	lsls	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b06      	cmp	r3, #6
 8001bf4:	d824      	bhi.n	8001c40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	3b05      	subs	r3, #5
 8001c08:	221f      	movs	r2, #31
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43da      	mvns	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	400a      	ands	r2, r1
 8001c16:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	4618      	mov	r0, r3
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	3b05      	subs	r3, #5
 8001c32:	fa00 f203 	lsl.w	r2, r0, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c3e:	e04c      	b.n	8001cda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b0c      	cmp	r3, #12
 8001c46:	d824      	bhi.n	8001c92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	3b23      	subs	r3, #35	; 0x23
 8001c5a:	221f      	movs	r2, #31
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43da      	mvns	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	400a      	ands	r2, r1
 8001c68:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	4618      	mov	r0, r3
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	3b23      	subs	r3, #35	; 0x23
 8001c84:	fa00 f203 	lsl.w	r2, r0, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c90:	e023      	b.n	8001cda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3b41      	subs	r3, #65	; 0x41
 8001ca4:	221f      	movs	r2, #31
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43da      	mvns	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	400a      	ands	r2, r1
 8001cb2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	3b41      	subs	r3, #65	; 0x41
 8001cce:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cda:	4b22      	ldr	r3, [pc, #136]	; (8001d64 <HAL_ADC_ConfigChannel+0x234>)
 8001cdc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a21      	ldr	r2, [pc, #132]	; (8001d68 <HAL_ADC_ConfigChannel+0x238>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d109      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x1cc>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b12      	cmp	r3, #18
 8001cee:	d105      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a19      	ldr	r2, [pc, #100]	; (8001d68 <HAL_ADC_ConfigChannel+0x238>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d123      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x21e>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b10      	cmp	r3, #16
 8001d0c:	d003      	beq.n	8001d16 <HAL_ADC_ConfigChannel+0x1e6>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b11      	cmp	r3, #17
 8001d14:	d11b      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b10      	cmp	r3, #16
 8001d28:	d111      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <HAL_ADC_ConfigChannel+0x23c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a10      	ldr	r2, [pc, #64]	; (8001d70 <HAL_ADC_ConfigChannel+0x240>)
 8001d30:	fba2 2303 	umull	r2, r3, r2, r3
 8001d34:	0c9a      	lsrs	r2, r3, #18
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d40:	e002      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	3b01      	subs	r3, #1
 8001d46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f9      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	40012300 	.word	0x40012300
 8001d68:	40012000 	.word	0x40012000
 8001d6c:	20000000 	.word	0x20000000
 8001d70:	431bde83 	.word	0x431bde83

08001d74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d7c:	4b79      	ldr	r3, [pc, #484]	; (8001f64 <ADC_Init+0x1f0>)
 8001d7e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	431a      	orrs	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001da8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6859      	ldr	r1, [r3, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	021a      	lsls	r2, r3, #8
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001dcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6859      	ldr	r1, [r3, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6899      	ldr	r1, [r3, #8]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e06:	4a58      	ldr	r2, [pc, #352]	; (8001f68 <ADC_Init+0x1f4>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d022      	beq.n	8001e52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6899      	ldr	r1, [r3, #8]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6899      	ldr	r1, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	e00f      	b.n	8001e72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e70:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0202 	bic.w	r2, r2, #2
 8001e80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6899      	ldr	r1, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	7e1b      	ldrb	r3, [r3, #24]
 8001e8c:	005a      	lsls	r2, r3, #1
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d01b      	beq.n	8001ed8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ebe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6859      	ldr	r1, [r3, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	035a      	lsls	r2, r3, #13
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	e007      	b.n	8001ee8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ee6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ef6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	051a      	lsls	r2, r3, #20
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6899      	ldr	r1, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f2a:	025a      	lsls	r2, r3, #9
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6899      	ldr	r1, [r3, #8]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	029a      	lsls	r2, r3, #10
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	609a      	str	r2, [r3, #8]
}
 8001f58:	bf00      	nop
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	40012300 	.word	0x40012300
 8001f68:	0f000001 	.word	0x0f000001

08001f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f9e:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	60d3      	str	r3, [r2, #12]
}
 8001fa4:	bf00      	nop
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb8:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <__NVIC_GetPriorityGrouping+0x18>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	0a1b      	lsrs	r3, r3, #8
 8001fbe:	f003 0307 	and.w	r3, r3, #7
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	6039      	str	r1, [r7, #0]
 8001fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	db0a      	blt.n	8001ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	490c      	ldr	r1, [pc, #48]	; (800201c <__NVIC_SetPriority+0x4c>)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	0112      	lsls	r2, r2, #4
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff8:	e00a      	b.n	8002010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4908      	ldr	r1, [pc, #32]	; (8002020 <__NVIC_SetPriority+0x50>)
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	3b04      	subs	r3, #4
 8002008:	0112      	lsls	r2, r2, #4
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	440b      	add	r3, r1
 800200e:	761a      	strb	r2, [r3, #24]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000e100 	.word	0xe000e100
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002024:	b480      	push	{r7}
 8002026:	b089      	sub	sp, #36	; 0x24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f1c3 0307 	rsb	r3, r3, #7
 800203e:	2b04      	cmp	r3, #4
 8002040:	bf28      	it	cs
 8002042:	2304      	movcs	r3, #4
 8002044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3304      	adds	r3, #4
 800204a:	2b06      	cmp	r3, #6
 800204c:	d902      	bls.n	8002054 <NVIC_EncodePriority+0x30>
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3b03      	subs	r3, #3
 8002052:	e000      	b.n	8002056 <NVIC_EncodePriority+0x32>
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	f04f 32ff 	mov.w	r2, #4294967295
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43da      	mvns	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	401a      	ands	r2, r3
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800206c:	f04f 31ff 	mov.w	r1, #4294967295
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	fa01 f303 	lsl.w	r3, r1, r3
 8002076:	43d9      	mvns	r1, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207c:	4313      	orrs	r3, r2
         );
}
 800207e:	4618      	mov	r0, r3
 8002080:	3724      	adds	r7, #36	; 0x24
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3b01      	subs	r3, #1
 8002098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800209c:	d301      	bcc.n	80020a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800209e:	2301      	movs	r3, #1
 80020a0:	e00f      	b.n	80020c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a2:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <SysTick_Config+0x40>)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020aa:	210f      	movs	r1, #15
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295
 80020b0:	f7ff ff8e 	bl	8001fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <SysTick_Config+0x40>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ba:	4b04      	ldr	r3, [pc, #16]	; (80020cc <SysTick_Config+0x40>)
 80020bc:	2207      	movs	r2, #7
 80020be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	e000e010 	.word	0xe000e010

080020d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff ff47 	bl	8001f6c <__NVIC_SetPriorityGrouping>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b086      	sub	sp, #24
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4603      	mov	r3, r0
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
 80020f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020f8:	f7ff ff5c 	bl	8001fb4 <__NVIC_GetPriorityGrouping>
 80020fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	6978      	ldr	r0, [r7, #20]
 8002104:	f7ff ff8e 	bl	8002024 <NVIC_EncodePriority>
 8002108:	4602      	mov	r2, r0
 800210a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210e:	4611      	mov	r1, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff5d 	bl	8001fd0 <__NVIC_SetPriority>
}
 8002116:	bf00      	nop
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ffb0 	bl	800208c <SysTick_Config>
 800212c:	4603      	mov	r3, r0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002138:	b480      	push	{r7}
 800213a:	b089      	sub	sp, #36	; 0x24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800214a:	2300      	movs	r3, #0
 800214c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
 8002152:	e16b      	b.n	800242c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002154:	2201      	movs	r2, #1
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	4013      	ands	r3, r2
 8002166:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	429a      	cmp	r2, r3
 800216e:	f040 815a 	bne.w	8002426 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	2b01      	cmp	r3, #1
 800217c:	d005      	beq.n	800218a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002186:	2b02      	cmp	r3, #2
 8002188:	d130      	bne.n	80021ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	2203      	movs	r2, #3
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4013      	ands	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021c0:	2201      	movs	r2, #1
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	091b      	lsrs	r3, r3, #4
 80021d6:	f003 0201 	and.w	r2, r3, #1
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	2b03      	cmp	r3, #3
 80021f6:	d017      	beq.n	8002228 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	2203      	movs	r2, #3
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d123      	bne.n	800227c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	08da      	lsrs	r2, r3, #3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3208      	adds	r2, #8
 800223c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002240:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	220f      	movs	r2, #15
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	08da      	lsrs	r2, r3, #3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3208      	adds	r2, #8
 8002276:	69b9      	ldr	r1, [r7, #24]
 8002278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	2203      	movs	r2, #3
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 0203 	and.w	r2, r3, #3
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 80b4 	beq.w	8002426 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	4b60      	ldr	r3, [pc, #384]	; (8002444 <HAL_GPIO_Init+0x30c>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	4a5f      	ldr	r2, [pc, #380]	; (8002444 <HAL_GPIO_Init+0x30c>)
 80022c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022cc:	6453      	str	r3, [r2, #68]	; 0x44
 80022ce:	4b5d      	ldr	r3, [pc, #372]	; (8002444 <HAL_GPIO_Init+0x30c>)
 80022d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022da:	4a5b      	ldr	r2, [pc, #364]	; (8002448 <HAL_GPIO_Init+0x310>)
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	089b      	lsrs	r3, r3, #2
 80022e0:	3302      	adds	r3, #2
 80022e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	220f      	movs	r2, #15
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a52      	ldr	r2, [pc, #328]	; (800244c <HAL_GPIO_Init+0x314>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d02b      	beq.n	800235e <HAL_GPIO_Init+0x226>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a51      	ldr	r2, [pc, #324]	; (8002450 <HAL_GPIO_Init+0x318>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d025      	beq.n	800235a <HAL_GPIO_Init+0x222>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a50      	ldr	r2, [pc, #320]	; (8002454 <HAL_GPIO_Init+0x31c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d01f      	beq.n	8002356 <HAL_GPIO_Init+0x21e>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a4f      	ldr	r2, [pc, #316]	; (8002458 <HAL_GPIO_Init+0x320>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d019      	beq.n	8002352 <HAL_GPIO_Init+0x21a>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a4e      	ldr	r2, [pc, #312]	; (800245c <HAL_GPIO_Init+0x324>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d013      	beq.n	800234e <HAL_GPIO_Init+0x216>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a4d      	ldr	r2, [pc, #308]	; (8002460 <HAL_GPIO_Init+0x328>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d00d      	beq.n	800234a <HAL_GPIO_Init+0x212>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a4c      	ldr	r2, [pc, #304]	; (8002464 <HAL_GPIO_Init+0x32c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d007      	beq.n	8002346 <HAL_GPIO_Init+0x20e>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a4b      	ldr	r2, [pc, #300]	; (8002468 <HAL_GPIO_Init+0x330>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d101      	bne.n	8002342 <HAL_GPIO_Init+0x20a>
 800233e:	2307      	movs	r3, #7
 8002340:	e00e      	b.n	8002360 <HAL_GPIO_Init+0x228>
 8002342:	2308      	movs	r3, #8
 8002344:	e00c      	b.n	8002360 <HAL_GPIO_Init+0x228>
 8002346:	2306      	movs	r3, #6
 8002348:	e00a      	b.n	8002360 <HAL_GPIO_Init+0x228>
 800234a:	2305      	movs	r3, #5
 800234c:	e008      	b.n	8002360 <HAL_GPIO_Init+0x228>
 800234e:	2304      	movs	r3, #4
 8002350:	e006      	b.n	8002360 <HAL_GPIO_Init+0x228>
 8002352:	2303      	movs	r3, #3
 8002354:	e004      	b.n	8002360 <HAL_GPIO_Init+0x228>
 8002356:	2302      	movs	r3, #2
 8002358:	e002      	b.n	8002360 <HAL_GPIO_Init+0x228>
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <HAL_GPIO_Init+0x228>
 800235e:	2300      	movs	r3, #0
 8002360:	69fa      	ldr	r2, [r7, #28]
 8002362:	f002 0203 	and.w	r2, r2, #3
 8002366:	0092      	lsls	r2, r2, #2
 8002368:	4093      	lsls	r3, r2
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4313      	orrs	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002370:	4935      	ldr	r1, [pc, #212]	; (8002448 <HAL_GPIO_Init+0x310>)
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	089b      	lsrs	r3, r3, #2
 8002376:	3302      	adds	r3, #2
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800237e:	4b3b      	ldr	r3, [pc, #236]	; (800246c <HAL_GPIO_Init+0x334>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023a2:	4a32      	ldr	r2, [pc, #200]	; (800246c <HAL_GPIO_Init+0x334>)
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023a8:	4b30      	ldr	r3, [pc, #192]	; (800246c <HAL_GPIO_Init+0x334>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023cc:	4a27      	ldr	r2, [pc, #156]	; (800246c <HAL_GPIO_Init+0x334>)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023d2:	4b26      	ldr	r3, [pc, #152]	; (800246c <HAL_GPIO_Init+0x334>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	43db      	mvns	r3, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4013      	ands	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023f6:	4a1d      	ldr	r2, [pc, #116]	; (800246c <HAL_GPIO_Init+0x334>)
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023fc:	4b1b      	ldr	r3, [pc, #108]	; (800246c <HAL_GPIO_Init+0x334>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002420:	4a12      	ldr	r2, [pc, #72]	; (800246c <HAL_GPIO_Init+0x334>)
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3301      	adds	r3, #1
 800242a:	61fb      	str	r3, [r7, #28]
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	2b0f      	cmp	r3, #15
 8002430:	f67f ae90 	bls.w	8002154 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002434:	bf00      	nop
 8002436:	bf00      	nop
 8002438:	3724      	adds	r7, #36	; 0x24
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40023800 	.word	0x40023800
 8002448:	40013800 	.word	0x40013800
 800244c:	40020000 	.word	0x40020000
 8002450:	40020400 	.word	0x40020400
 8002454:	40020800 	.word	0x40020800
 8002458:	40020c00 	.word	0x40020c00
 800245c:	40021000 	.word	0x40021000
 8002460:	40021400 	.word	0x40021400
 8002464:	40021800 	.word	0x40021800
 8002468:	40021c00 	.word	0x40021c00
 800246c:	40013c00 	.word	0x40013c00

08002470 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e267      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d075      	beq.n	800257a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800248e:	4b88      	ldr	r3, [pc, #544]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b04      	cmp	r3, #4
 8002498:	d00c      	beq.n	80024b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800249a:	4b85      	ldr	r3, [pc, #532]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d112      	bne.n	80024cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024a6:	4b82      	ldr	r3, [pc, #520]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024b2:	d10b      	bne.n	80024cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b4:	4b7e      	ldr	r3, [pc, #504]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d05b      	beq.n	8002578 <HAL_RCC_OscConfig+0x108>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d157      	bne.n	8002578 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e242      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d4:	d106      	bne.n	80024e4 <HAL_RCC_OscConfig+0x74>
 80024d6:	4b76      	ldr	r3, [pc, #472]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a75      	ldr	r2, [pc, #468]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 80024dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	e01d      	b.n	8002520 <HAL_RCC_OscConfig+0xb0>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024ec:	d10c      	bne.n	8002508 <HAL_RCC_OscConfig+0x98>
 80024ee:	4b70      	ldr	r3, [pc, #448]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a6f      	ldr	r2, [pc, #444]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 80024f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	4b6d      	ldr	r3, [pc, #436]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a6c      	ldr	r2, [pc, #432]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	e00b      	b.n	8002520 <HAL_RCC_OscConfig+0xb0>
 8002508:	4b69      	ldr	r3, [pc, #420]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a68      	ldr	r2, [pc, #416]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 800250e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	4b66      	ldr	r3, [pc, #408]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a65      	ldr	r2, [pc, #404]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 800251a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800251e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d013      	beq.n	8002550 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002528:	f7ff f924 	bl	8001774 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002530:	f7ff f920 	bl	8001774 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b64      	cmp	r3, #100	; 0x64
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e207      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002542:	4b5b      	ldr	r3, [pc, #364]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f0      	beq.n	8002530 <HAL_RCC_OscConfig+0xc0>
 800254e:	e014      	b.n	800257a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7ff f910 	bl	8001774 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002558:	f7ff f90c 	bl	8001774 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b64      	cmp	r3, #100	; 0x64
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e1f3      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256a:	4b51      	ldr	r3, [pc, #324]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0xe8>
 8002576:	e000      	b.n	800257a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d063      	beq.n	800264e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002586:	4b4a      	ldr	r3, [pc, #296]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00b      	beq.n	80025aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002592:	4b47      	ldr	r3, [pc, #284]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800259a:	2b08      	cmp	r3, #8
 800259c:	d11c      	bne.n	80025d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800259e:	4b44      	ldr	r3, [pc, #272]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d116      	bne.n	80025d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025aa:	4b41      	ldr	r3, [pc, #260]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d005      	beq.n	80025c2 <HAL_RCC_OscConfig+0x152>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d001      	beq.n	80025c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e1c7      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c2:	4b3b      	ldr	r3, [pc, #236]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	4937      	ldr	r1, [pc, #220]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d6:	e03a      	b.n	800264e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d020      	beq.n	8002622 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025e0:	4b34      	ldr	r3, [pc, #208]	; (80026b4 <HAL_RCC_OscConfig+0x244>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e6:	f7ff f8c5 	bl	8001774 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ee:	f7ff f8c1 	bl	8001774 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e1a8      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002600:	4b2b      	ldr	r3, [pc, #172]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260c:	4b28      	ldr	r3, [pc, #160]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4925      	ldr	r1, [pc, #148]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 800261c:	4313      	orrs	r3, r2
 800261e:	600b      	str	r3, [r1, #0]
 8002620:	e015      	b.n	800264e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002622:	4b24      	ldr	r3, [pc, #144]	; (80026b4 <HAL_RCC_OscConfig+0x244>)
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002628:	f7ff f8a4 	bl	8001774 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002630:	f7ff f8a0 	bl	8001774 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e187      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002642:	4b1b      	ldr	r3, [pc, #108]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f0      	bne.n	8002630 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d036      	beq.n	80026c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d016      	beq.n	8002690 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002662:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <HAL_RCC_OscConfig+0x248>)
 8002664:	2201      	movs	r2, #1
 8002666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002668:	f7ff f884 	bl	8001774 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002670:	f7ff f880 	bl	8001774 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e167      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002682:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0x200>
 800268e:	e01b      	b.n	80026c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002690:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <HAL_RCC_OscConfig+0x248>)
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7ff f86d 	bl	8001774 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800269c:	e00e      	b.n	80026bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800269e:	f7ff f869 	bl	8001774 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d907      	bls.n	80026bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e150      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
 80026b0:	40023800 	.word	0x40023800
 80026b4:	42470000 	.word	0x42470000
 80026b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026bc:	4b88      	ldr	r3, [pc, #544]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 80026be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1ea      	bne.n	800269e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 8097 	beq.w	8002804 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026d6:	2300      	movs	r3, #0
 80026d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026da:	4b81      	ldr	r3, [pc, #516]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10f      	bne.n	8002706 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	4b7d      	ldr	r3, [pc, #500]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	4a7c      	ldr	r2, [pc, #496]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 80026f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f4:	6413      	str	r3, [r2, #64]	; 0x40
 80026f6:	4b7a      	ldr	r3, [pc, #488]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002702:	2301      	movs	r3, #1
 8002704:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002706:	4b77      	ldr	r3, [pc, #476]	; (80028e4 <HAL_RCC_OscConfig+0x474>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270e:	2b00      	cmp	r3, #0
 8002710:	d118      	bne.n	8002744 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002712:	4b74      	ldr	r3, [pc, #464]	; (80028e4 <HAL_RCC_OscConfig+0x474>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a73      	ldr	r2, [pc, #460]	; (80028e4 <HAL_RCC_OscConfig+0x474>)
 8002718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800271c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800271e:	f7ff f829 	bl	8001774 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002726:	f7ff f825 	bl	8001774 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e10c      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002738:	4b6a      	ldr	r3, [pc, #424]	; (80028e4 <HAL_RCC_OscConfig+0x474>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0f0      	beq.n	8002726 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d106      	bne.n	800275a <HAL_RCC_OscConfig+0x2ea>
 800274c:	4b64      	ldr	r3, [pc, #400]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 800274e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002750:	4a63      	ldr	r2, [pc, #396]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002752:	f043 0301 	orr.w	r3, r3, #1
 8002756:	6713      	str	r3, [r2, #112]	; 0x70
 8002758:	e01c      	b.n	8002794 <HAL_RCC_OscConfig+0x324>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2b05      	cmp	r3, #5
 8002760:	d10c      	bne.n	800277c <HAL_RCC_OscConfig+0x30c>
 8002762:	4b5f      	ldr	r3, [pc, #380]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002766:	4a5e      	ldr	r2, [pc, #376]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002768:	f043 0304 	orr.w	r3, r3, #4
 800276c:	6713      	str	r3, [r2, #112]	; 0x70
 800276e:	4b5c      	ldr	r3, [pc, #368]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002772:	4a5b      	ldr	r2, [pc, #364]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	6713      	str	r3, [r2, #112]	; 0x70
 800277a:	e00b      	b.n	8002794 <HAL_RCC_OscConfig+0x324>
 800277c:	4b58      	ldr	r3, [pc, #352]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 800277e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002780:	4a57      	ldr	r2, [pc, #348]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002782:	f023 0301 	bic.w	r3, r3, #1
 8002786:	6713      	str	r3, [r2, #112]	; 0x70
 8002788:	4b55      	ldr	r3, [pc, #340]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278c:	4a54      	ldr	r2, [pc, #336]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 800278e:	f023 0304 	bic.w	r3, r3, #4
 8002792:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d015      	beq.n	80027c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279c:	f7fe ffea 	bl	8001774 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a2:	e00a      	b.n	80027ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a4:	f7fe ffe6 	bl	8001774 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e0cb      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ba:	4b49      	ldr	r3, [pc, #292]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 80027bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0ee      	beq.n	80027a4 <HAL_RCC_OscConfig+0x334>
 80027c6:	e014      	b.n	80027f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c8:	f7fe ffd4 	bl	8001774 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ce:	e00a      	b.n	80027e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d0:	f7fe ffd0 	bl	8001774 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	f241 3288 	movw	r2, #5000	; 0x1388
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e0b5      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e6:	4b3e      	ldr	r3, [pc, #248]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1ee      	bne.n	80027d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027f2:	7dfb      	ldrb	r3, [r7, #23]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d105      	bne.n	8002804 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f8:	4b39      	ldr	r3, [pc, #228]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	4a38      	ldr	r2, [pc, #224]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 80027fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002802:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 80a1 	beq.w	8002950 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800280e:	4b34      	ldr	r3, [pc, #208]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b08      	cmp	r3, #8
 8002818:	d05c      	beq.n	80028d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d141      	bne.n	80028a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002822:	4b31      	ldr	r3, [pc, #196]	; (80028e8 <HAL_RCC_OscConfig+0x478>)
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002828:	f7fe ffa4 	bl	8001774 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002830:	f7fe ffa0 	bl	8001774 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e087      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002842:	4b27      	ldr	r3, [pc, #156]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69da      	ldr	r2, [r3, #28]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	019b      	lsls	r3, r3, #6
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	085b      	lsrs	r3, r3, #1
 8002866:	3b01      	subs	r3, #1
 8002868:	041b      	lsls	r3, r3, #16
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002870:	061b      	lsls	r3, r3, #24
 8002872:	491b      	ldr	r1, [pc, #108]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002874:	4313      	orrs	r3, r2
 8002876:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002878:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <HAL_RCC_OscConfig+0x478>)
 800287a:	2201      	movs	r2, #1
 800287c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287e:	f7fe ff79 	bl	8001774 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002886:	f7fe ff75 	bl	8001774 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e05c      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002898:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x416>
 80028a4:	e054      	b.n	8002950 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a6:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <HAL_RCC_OscConfig+0x478>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ac:	f7fe ff62 	bl	8001774 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b4:	f7fe ff5e 	bl	8001774 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e045      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c6:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f0      	bne.n	80028b4 <HAL_RCC_OscConfig+0x444>
 80028d2:	e03d      	b.n	8002950 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d107      	bne.n	80028ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e038      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40007000 	.word	0x40007000
 80028e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028ec:	4b1b      	ldr	r3, [pc, #108]	; (800295c <HAL_RCC_OscConfig+0x4ec>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d028      	beq.n	800294c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002904:	429a      	cmp	r2, r3
 8002906:	d121      	bne.n	800294c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002912:	429a      	cmp	r2, r3
 8002914:	d11a      	bne.n	800294c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800291c:	4013      	ands	r3, r2
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002922:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002924:	4293      	cmp	r3, r2
 8002926:	d111      	bne.n	800294c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002932:	085b      	lsrs	r3, r3, #1
 8002934:	3b01      	subs	r3, #1
 8002936:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002938:	429a      	cmp	r2, r3
 800293a:	d107      	bne.n	800294c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002946:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002948:	429a      	cmp	r2, r3
 800294a:	d001      	beq.n	8002950 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e000      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40023800 	.word	0x40023800

08002960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0cc      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002974:	4b68      	ldr	r3, [pc, #416]	; (8002b18 <HAL_RCC_ClockConfig+0x1b8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d90c      	bls.n	800299c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002982:	4b65      	ldr	r3, [pc, #404]	; (8002b18 <HAL_RCC_ClockConfig+0x1b8>)
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800298a:	4b63      	ldr	r3, [pc, #396]	; (8002b18 <HAL_RCC_ClockConfig+0x1b8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d001      	beq.n	800299c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e0b8      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d020      	beq.n	80029ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029b4:	4b59      	ldr	r3, [pc, #356]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	4a58      	ldr	r2, [pc, #352]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d005      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029cc:	4b53      	ldr	r3, [pc, #332]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	4a52      	ldr	r2, [pc, #328]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d8:	4b50      	ldr	r3, [pc, #320]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	494d      	ldr	r1, [pc, #308]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d044      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d107      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fe:	4b47      	ldr	r3, [pc, #284]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d119      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e07f      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d003      	beq.n	8002a1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d107      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1e:	4b3f      	ldr	r3, [pc, #252]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d109      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e06f      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2e:	4b3b      	ldr	r3, [pc, #236]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e067      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a3e:	4b37      	ldr	r3, [pc, #220]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f023 0203 	bic.w	r2, r3, #3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	4934      	ldr	r1, [pc, #208]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a50:	f7fe fe90 	bl	8001774 <HAL_GetTick>
 8002a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a56:	e00a      	b.n	8002a6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a58:	f7fe fe8c 	bl	8001774 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e04f      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6e:	4b2b      	ldr	r3, [pc, #172]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 020c 	and.w	r2, r3, #12
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d1eb      	bne.n	8002a58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a80:	4b25      	ldr	r3, [pc, #148]	; (8002b18 <HAL_RCC_ClockConfig+0x1b8>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d20c      	bcs.n	8002aa8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8e:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <HAL_RCC_ClockConfig+0x1b8>)
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a96:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <HAL_RCC_ClockConfig+0x1b8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e032      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d008      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab4:	4b19      	ldr	r3, [pc, #100]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	4916      	ldr	r1, [pc, #88]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d009      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ad2:	4b12      	ldr	r3, [pc, #72]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	490e      	ldr	r1, [pc, #56]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ae6:	f000 f821 	bl	8002b2c <HAL_RCC_GetSysClockFreq>
 8002aea:	4602      	mov	r2, r0
 8002aec:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	091b      	lsrs	r3, r3, #4
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	490a      	ldr	r1, [pc, #40]	; (8002b20 <HAL_RCC_ClockConfig+0x1c0>)
 8002af8:	5ccb      	ldrb	r3, [r1, r3]
 8002afa:	fa22 f303 	lsr.w	r3, r2, r3
 8002afe:	4a09      	ldr	r2, [pc, #36]	; (8002b24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b02:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <HAL_RCC_ClockConfig+0x1c8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fe fdf0 	bl	80016ec <HAL_InitTick>

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40023c00 	.word	0x40023c00
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	08006394 	.word	0x08006394
 8002b24:	20000000 	.word	0x20000000
 8002b28:	20000004 	.word	0x20000004

08002b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b30:	b094      	sub	sp, #80	; 0x50
 8002b32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	647b      	str	r3, [r7, #68]	; 0x44
 8002b38:	2300      	movs	r3, #0
 8002b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b44:	4b79      	ldr	r3, [pc, #484]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 030c 	and.w	r3, r3, #12
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d00d      	beq.n	8002b6c <HAL_RCC_GetSysClockFreq+0x40>
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	f200 80e1 	bhi.w	8002d18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d002      	beq.n	8002b60 <HAL_RCC_GetSysClockFreq+0x34>
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d003      	beq.n	8002b66 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b5e:	e0db      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b60:	4b73      	ldr	r3, [pc, #460]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b62:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b64:	e0db      	b.n	8002d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b66:	4b73      	ldr	r3, [pc, #460]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b6a:	e0d8      	b.n	8002d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b6c:	4b6f      	ldr	r3, [pc, #444]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b74:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b76:	4b6d      	ldr	r3, [pc, #436]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d063      	beq.n	8002c4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b82:	4b6a      	ldr	r3, [pc, #424]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	099b      	lsrs	r3, r3, #6
 8002b88:	2200      	movs	r2, #0
 8002b8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b94:	633b      	str	r3, [r7, #48]	; 0x30
 8002b96:	2300      	movs	r3, #0
 8002b98:	637b      	str	r3, [r7, #52]	; 0x34
 8002b9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b9e:	4622      	mov	r2, r4
 8002ba0:	462b      	mov	r3, r5
 8002ba2:	f04f 0000 	mov.w	r0, #0
 8002ba6:	f04f 0100 	mov.w	r1, #0
 8002baa:	0159      	lsls	r1, r3, #5
 8002bac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bb0:	0150      	lsls	r0, r2, #5
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	4621      	mov	r1, r4
 8002bb8:	1a51      	subs	r1, r2, r1
 8002bba:	6139      	str	r1, [r7, #16]
 8002bbc:	4629      	mov	r1, r5
 8002bbe:	eb63 0301 	sbc.w	r3, r3, r1
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bd0:	4659      	mov	r1, fp
 8002bd2:	018b      	lsls	r3, r1, #6
 8002bd4:	4651      	mov	r1, sl
 8002bd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bda:	4651      	mov	r1, sl
 8002bdc:	018a      	lsls	r2, r1, #6
 8002bde:	4651      	mov	r1, sl
 8002be0:	ebb2 0801 	subs.w	r8, r2, r1
 8002be4:	4659      	mov	r1, fp
 8002be6:	eb63 0901 	sbc.w	r9, r3, r1
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	f04f 0300 	mov.w	r3, #0
 8002bf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bfe:	4690      	mov	r8, r2
 8002c00:	4699      	mov	r9, r3
 8002c02:	4623      	mov	r3, r4
 8002c04:	eb18 0303 	adds.w	r3, r8, r3
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	462b      	mov	r3, r5
 8002c0c:	eb49 0303 	adc.w	r3, r9, r3
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	f04f 0300 	mov.w	r3, #0
 8002c1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c1e:	4629      	mov	r1, r5
 8002c20:	024b      	lsls	r3, r1, #9
 8002c22:	4621      	mov	r1, r4
 8002c24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c28:	4621      	mov	r1, r4
 8002c2a:	024a      	lsls	r2, r1, #9
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	4619      	mov	r1, r3
 8002c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c32:	2200      	movs	r2, #0
 8002c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c3c:	f7fe f804 	bl	8000c48 <__aeabi_uldivmod>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4613      	mov	r3, r2
 8002c46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c48:	e058      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c4a:	4b38      	ldr	r3, [pc, #224]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	099b      	lsrs	r3, r3, #6
 8002c50:	2200      	movs	r2, #0
 8002c52:	4618      	mov	r0, r3
 8002c54:	4611      	mov	r1, r2
 8002c56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c5a:	623b      	str	r3, [r7, #32]
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c64:	4642      	mov	r2, r8
 8002c66:	464b      	mov	r3, r9
 8002c68:	f04f 0000 	mov.w	r0, #0
 8002c6c:	f04f 0100 	mov.w	r1, #0
 8002c70:	0159      	lsls	r1, r3, #5
 8002c72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c76:	0150      	lsls	r0, r2, #5
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4641      	mov	r1, r8
 8002c7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c82:	4649      	mov	r1, r9
 8002c84:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c88:	f04f 0200 	mov.w	r2, #0
 8002c8c:	f04f 0300 	mov.w	r3, #0
 8002c90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c9c:	ebb2 040a 	subs.w	r4, r2, sl
 8002ca0:	eb63 050b 	sbc.w	r5, r3, fp
 8002ca4:	f04f 0200 	mov.w	r2, #0
 8002ca8:	f04f 0300 	mov.w	r3, #0
 8002cac:	00eb      	lsls	r3, r5, #3
 8002cae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cb2:	00e2      	lsls	r2, r4, #3
 8002cb4:	4614      	mov	r4, r2
 8002cb6:	461d      	mov	r5, r3
 8002cb8:	4643      	mov	r3, r8
 8002cba:	18e3      	adds	r3, r4, r3
 8002cbc:	603b      	str	r3, [r7, #0]
 8002cbe:	464b      	mov	r3, r9
 8002cc0:	eb45 0303 	adc.w	r3, r5, r3
 8002cc4:	607b      	str	r3, [r7, #4]
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cd2:	4629      	mov	r1, r5
 8002cd4:	028b      	lsls	r3, r1, #10
 8002cd6:	4621      	mov	r1, r4
 8002cd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cdc:	4621      	mov	r1, r4
 8002cde:	028a      	lsls	r2, r1, #10
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	61bb      	str	r3, [r7, #24]
 8002cea:	61fa      	str	r2, [r7, #28]
 8002cec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cf0:	f7fd ffaa 	bl	8000c48 <__aeabi_uldivmod>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	0c1b      	lsrs	r3, r3, #16
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	3301      	adds	r3, #1
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002d0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d16:	e002      	b.n	8002d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d18:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3750      	adds	r7, #80	; 0x50
 8002d24:	46bd      	mov	sp, r7
 8002d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	00f42400 	.word	0x00f42400
 8002d34:	007a1200 	.word	0x007a1200

08002d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d3c:	4b03      	ldr	r3, [pc, #12]	; (8002d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	20000000 	.word	0x20000000

08002d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d54:	f7ff fff0 	bl	8002d38 <HAL_RCC_GetHCLKFreq>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	0a9b      	lsrs	r3, r3, #10
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	4903      	ldr	r1, [pc, #12]	; (8002d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d66:	5ccb      	ldrb	r3, [r1, r3]
 8002d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40023800 	.word	0x40023800
 8002d74:	080063a4 	.word	0x080063a4

08002d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d7c:	f7ff ffdc 	bl	8002d38 <HAL_RCC_GetHCLKFreq>
 8002d80:	4602      	mov	r2, r0
 8002d82:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	0b5b      	lsrs	r3, r3, #13
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	4903      	ldr	r1, [pc, #12]	; (8002d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d8e:	5ccb      	ldrb	r3, [r1, r3]
 8002d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	080063a4 	.word	0x080063a4

08002da0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e03f      	b.n	8002e32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d106      	bne.n	8002dcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7fe fafa 	bl	80013c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2224      	movs	r2, #36	; 0x24
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002de2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f929 	bl	800303c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002df8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695a      	ldr	r2, [r3, #20]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b08a      	sub	sp, #40	; 0x28
 8002e3e:	af02      	add	r7, sp, #8
 8002e40:	60f8      	str	r0, [r7, #12]
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	603b      	str	r3, [r7, #0]
 8002e46:	4613      	mov	r3, r2
 8002e48:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b20      	cmp	r3, #32
 8002e58:	d17c      	bne.n	8002f54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <HAL_UART_Transmit+0x2c>
 8002e60:	88fb      	ldrh	r3, [r7, #6]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e075      	b.n	8002f56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_UART_Transmit+0x3e>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e06e      	b.n	8002f56 <HAL_UART_Transmit+0x11c>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2221      	movs	r2, #33	; 0x21
 8002e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e8e:	f7fe fc71 	bl	8001774 <HAL_GetTick>
 8002e92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	88fa      	ldrh	r2, [r7, #6]
 8002e98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	88fa      	ldrh	r2, [r7, #6]
 8002e9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea8:	d108      	bne.n	8002ebc <HAL_UART_Transmit+0x82>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d104      	bne.n	8002ebc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	61bb      	str	r3, [r7, #24]
 8002eba:	e003      	b.n	8002ec4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ecc:	e02a      	b.n	8002f24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	2180      	movs	r1, #128	; 0x80
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 f840 	bl	8002f5e <UART_WaitOnFlagUntilTimeout>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e036      	b.n	8002f56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10b      	bne.n	8002f06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002efc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	3302      	adds	r3, #2
 8002f02:	61bb      	str	r3, [r7, #24]
 8002f04:	e007      	b.n	8002f16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	781a      	ldrb	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	3301      	adds	r3, #1
 8002f14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1cf      	bne.n	8002ece <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2200      	movs	r2, #0
 8002f36:	2140      	movs	r1, #64	; 0x40
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 f810 	bl	8002f5e <UART_WaitOnFlagUntilTimeout>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e006      	b.n	8002f56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	e000      	b.n	8002f56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f54:	2302      	movs	r3, #2
  }
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3720      	adds	r7, #32
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b090      	sub	sp, #64	; 0x40
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	603b      	str	r3, [r7, #0]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f6e:	e050      	b.n	8003012 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f76:	d04c      	beq.n	8003012 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d007      	beq.n	8002f8e <UART_WaitOnFlagUntilTimeout+0x30>
 8002f7e:	f7fe fbf9 	bl	8001774 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d241      	bcs.n	8003012 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	330c      	adds	r3, #12
 8002f94:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f98:	e853 3f00 	ldrex	r3, [r3]
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	330c      	adds	r3, #12
 8002fac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fae:	637a      	str	r2, [r7, #52]	; 0x34
 8002fb0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fb6:	e841 2300 	strex	r3, r2, [r1]
 8002fba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1e5      	bne.n	8002f8e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	3314      	adds	r3, #20
 8002fc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	e853 3f00 	ldrex	r3, [r3]
 8002fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f023 0301 	bic.w	r3, r3, #1
 8002fd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3314      	adds	r3, #20
 8002fe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fe2:	623a      	str	r2, [r7, #32]
 8002fe4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe6:	69f9      	ldr	r1, [r7, #28]
 8002fe8:	6a3a      	ldr	r2, [r7, #32]
 8002fea:	e841 2300 	strex	r3, r2, [r1]
 8002fee:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1e5      	bne.n	8002fc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e00f      	b.n	8003032 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	4013      	ands	r3, r2
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	429a      	cmp	r2, r3
 8003020:	bf0c      	ite	eq
 8003022:	2301      	moveq	r3, #1
 8003024:	2300      	movne	r3, #0
 8003026:	b2db      	uxtb	r3, r3
 8003028:	461a      	mov	r2, r3
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	429a      	cmp	r2, r3
 800302e:	d09f      	beq.n	8002f70 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3740      	adds	r7, #64	; 0x40
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800303c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003040:	b0c0      	sub	sp, #256	; 0x100
 8003042:	af00      	add	r7, sp, #0
 8003044:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003058:	68d9      	ldr	r1, [r3, #12]
 800305a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	ea40 0301 	orr.w	r3, r0, r1
 8003064:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	431a      	orrs	r2, r3
 8003074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	431a      	orrs	r2, r3
 800307c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003094:	f021 010c 	bic.w	r1, r1, #12
 8003098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80030a2:	430b      	orrs	r3, r1
 80030a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80030b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b6:	6999      	ldr	r1, [r3, #24]
 80030b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	ea40 0301 	orr.w	r3, r0, r1
 80030c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	4b8f      	ldr	r3, [pc, #572]	; (8003308 <UART_SetConfig+0x2cc>)
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d005      	beq.n	80030dc <UART_SetConfig+0xa0>
 80030d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	4b8d      	ldr	r3, [pc, #564]	; (800330c <UART_SetConfig+0x2d0>)
 80030d8:	429a      	cmp	r2, r3
 80030da:	d104      	bne.n	80030e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030dc:	f7ff fe4c 	bl	8002d78 <HAL_RCC_GetPCLK2Freq>
 80030e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80030e4:	e003      	b.n	80030ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030e6:	f7ff fe33 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 80030ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030f8:	f040 810c 	bne.w	8003314 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003100:	2200      	movs	r2, #0
 8003102:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003106:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800310a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800310e:	4622      	mov	r2, r4
 8003110:	462b      	mov	r3, r5
 8003112:	1891      	adds	r1, r2, r2
 8003114:	65b9      	str	r1, [r7, #88]	; 0x58
 8003116:	415b      	adcs	r3, r3
 8003118:	65fb      	str	r3, [r7, #92]	; 0x5c
 800311a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800311e:	4621      	mov	r1, r4
 8003120:	eb12 0801 	adds.w	r8, r2, r1
 8003124:	4629      	mov	r1, r5
 8003126:	eb43 0901 	adc.w	r9, r3, r1
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003136:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800313a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800313e:	4690      	mov	r8, r2
 8003140:	4699      	mov	r9, r3
 8003142:	4623      	mov	r3, r4
 8003144:	eb18 0303 	adds.w	r3, r8, r3
 8003148:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800314c:	462b      	mov	r3, r5
 800314e:	eb49 0303 	adc.w	r3, r9, r3
 8003152:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003162:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003166:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800316a:	460b      	mov	r3, r1
 800316c:	18db      	adds	r3, r3, r3
 800316e:	653b      	str	r3, [r7, #80]	; 0x50
 8003170:	4613      	mov	r3, r2
 8003172:	eb42 0303 	adc.w	r3, r2, r3
 8003176:	657b      	str	r3, [r7, #84]	; 0x54
 8003178:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800317c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003180:	f7fd fd62 	bl	8000c48 <__aeabi_uldivmod>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4b61      	ldr	r3, [pc, #388]	; (8003310 <UART_SetConfig+0x2d4>)
 800318a:	fba3 2302 	umull	r2, r3, r3, r2
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	011c      	lsls	r4, r3, #4
 8003192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003196:	2200      	movs	r2, #0
 8003198:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800319c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80031a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80031a4:	4642      	mov	r2, r8
 80031a6:	464b      	mov	r3, r9
 80031a8:	1891      	adds	r1, r2, r2
 80031aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80031ac:	415b      	adcs	r3, r3
 80031ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80031b4:	4641      	mov	r1, r8
 80031b6:	eb12 0a01 	adds.w	sl, r2, r1
 80031ba:	4649      	mov	r1, r9
 80031bc:	eb43 0b01 	adc.w	fp, r3, r1
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031d4:	4692      	mov	sl, r2
 80031d6:	469b      	mov	fp, r3
 80031d8:	4643      	mov	r3, r8
 80031da:	eb1a 0303 	adds.w	r3, sl, r3
 80031de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031e2:	464b      	mov	r3, r9
 80031e4:	eb4b 0303 	adc.w	r3, fp, r3
 80031e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80031ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80031fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003200:	460b      	mov	r3, r1
 8003202:	18db      	adds	r3, r3, r3
 8003204:	643b      	str	r3, [r7, #64]	; 0x40
 8003206:	4613      	mov	r3, r2
 8003208:	eb42 0303 	adc.w	r3, r2, r3
 800320c:	647b      	str	r3, [r7, #68]	; 0x44
 800320e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003212:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003216:	f7fd fd17 	bl	8000c48 <__aeabi_uldivmod>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4611      	mov	r1, r2
 8003220:	4b3b      	ldr	r3, [pc, #236]	; (8003310 <UART_SetConfig+0x2d4>)
 8003222:	fba3 2301 	umull	r2, r3, r3, r1
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	2264      	movs	r2, #100	; 0x64
 800322a:	fb02 f303 	mul.w	r3, r2, r3
 800322e:	1acb      	subs	r3, r1, r3
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003236:	4b36      	ldr	r3, [pc, #216]	; (8003310 <UART_SetConfig+0x2d4>)
 8003238:	fba3 2302 	umull	r2, r3, r3, r2
 800323c:	095b      	lsrs	r3, r3, #5
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003244:	441c      	add	r4, r3
 8003246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800324a:	2200      	movs	r2, #0
 800324c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003250:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003254:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003258:	4642      	mov	r2, r8
 800325a:	464b      	mov	r3, r9
 800325c:	1891      	adds	r1, r2, r2
 800325e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003260:	415b      	adcs	r3, r3
 8003262:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003264:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003268:	4641      	mov	r1, r8
 800326a:	1851      	adds	r1, r2, r1
 800326c:	6339      	str	r1, [r7, #48]	; 0x30
 800326e:	4649      	mov	r1, r9
 8003270:	414b      	adcs	r3, r1
 8003272:	637b      	str	r3, [r7, #52]	; 0x34
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003280:	4659      	mov	r1, fp
 8003282:	00cb      	lsls	r3, r1, #3
 8003284:	4651      	mov	r1, sl
 8003286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800328a:	4651      	mov	r1, sl
 800328c:	00ca      	lsls	r2, r1, #3
 800328e:	4610      	mov	r0, r2
 8003290:	4619      	mov	r1, r3
 8003292:	4603      	mov	r3, r0
 8003294:	4642      	mov	r2, r8
 8003296:	189b      	adds	r3, r3, r2
 8003298:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800329c:	464b      	mov	r3, r9
 800329e:	460a      	mov	r2, r1
 80032a0:	eb42 0303 	adc.w	r3, r2, r3
 80032a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80032b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80032b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80032bc:	460b      	mov	r3, r1
 80032be:	18db      	adds	r3, r3, r3
 80032c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80032c2:	4613      	mov	r3, r2
 80032c4:	eb42 0303 	adc.w	r3, r2, r3
 80032c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80032d2:	f7fd fcb9 	bl	8000c48 <__aeabi_uldivmod>
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	4b0d      	ldr	r3, [pc, #52]	; (8003310 <UART_SetConfig+0x2d4>)
 80032dc:	fba3 1302 	umull	r1, r3, r3, r2
 80032e0:	095b      	lsrs	r3, r3, #5
 80032e2:	2164      	movs	r1, #100	; 0x64
 80032e4:	fb01 f303 	mul.w	r3, r1, r3
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	3332      	adds	r3, #50	; 0x32
 80032ee:	4a08      	ldr	r2, [pc, #32]	; (8003310 <UART_SetConfig+0x2d4>)
 80032f0:	fba2 2303 	umull	r2, r3, r2, r3
 80032f4:	095b      	lsrs	r3, r3, #5
 80032f6:	f003 0207 	and.w	r2, r3, #7
 80032fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4422      	add	r2, r4
 8003302:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003304:	e105      	b.n	8003512 <UART_SetConfig+0x4d6>
 8003306:	bf00      	nop
 8003308:	40011000 	.word	0x40011000
 800330c:	40011400 	.word	0x40011400
 8003310:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003314:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003318:	2200      	movs	r2, #0
 800331a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800331e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003322:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003326:	4642      	mov	r2, r8
 8003328:	464b      	mov	r3, r9
 800332a:	1891      	adds	r1, r2, r2
 800332c:	6239      	str	r1, [r7, #32]
 800332e:	415b      	adcs	r3, r3
 8003330:	627b      	str	r3, [r7, #36]	; 0x24
 8003332:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003336:	4641      	mov	r1, r8
 8003338:	1854      	adds	r4, r2, r1
 800333a:	4649      	mov	r1, r9
 800333c:	eb43 0501 	adc.w	r5, r3, r1
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	00eb      	lsls	r3, r5, #3
 800334a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800334e:	00e2      	lsls	r2, r4, #3
 8003350:	4614      	mov	r4, r2
 8003352:	461d      	mov	r5, r3
 8003354:	4643      	mov	r3, r8
 8003356:	18e3      	adds	r3, r4, r3
 8003358:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800335c:	464b      	mov	r3, r9
 800335e:	eb45 0303 	adc.w	r3, r5, r3
 8003362:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003372:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003382:	4629      	mov	r1, r5
 8003384:	008b      	lsls	r3, r1, #2
 8003386:	4621      	mov	r1, r4
 8003388:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800338c:	4621      	mov	r1, r4
 800338e:	008a      	lsls	r2, r1, #2
 8003390:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003394:	f7fd fc58 	bl	8000c48 <__aeabi_uldivmod>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4b60      	ldr	r3, [pc, #384]	; (8003520 <UART_SetConfig+0x4e4>)
 800339e:	fba3 2302 	umull	r2, r3, r3, r2
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	011c      	lsls	r4, r3, #4
 80033a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033aa:	2200      	movs	r2, #0
 80033ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80033b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80033b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80033b8:	4642      	mov	r2, r8
 80033ba:	464b      	mov	r3, r9
 80033bc:	1891      	adds	r1, r2, r2
 80033be:	61b9      	str	r1, [r7, #24]
 80033c0:	415b      	adcs	r3, r3
 80033c2:	61fb      	str	r3, [r7, #28]
 80033c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033c8:	4641      	mov	r1, r8
 80033ca:	1851      	adds	r1, r2, r1
 80033cc:	6139      	str	r1, [r7, #16]
 80033ce:	4649      	mov	r1, r9
 80033d0:	414b      	adcs	r3, r1
 80033d2:	617b      	str	r3, [r7, #20]
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033e0:	4659      	mov	r1, fp
 80033e2:	00cb      	lsls	r3, r1, #3
 80033e4:	4651      	mov	r1, sl
 80033e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033ea:	4651      	mov	r1, sl
 80033ec:	00ca      	lsls	r2, r1, #3
 80033ee:	4610      	mov	r0, r2
 80033f0:	4619      	mov	r1, r3
 80033f2:	4603      	mov	r3, r0
 80033f4:	4642      	mov	r2, r8
 80033f6:	189b      	adds	r3, r3, r2
 80033f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033fc:	464b      	mov	r3, r9
 80033fe:	460a      	mov	r2, r1
 8003400:	eb42 0303 	adc.w	r3, r2, r3
 8003404:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	67bb      	str	r3, [r7, #120]	; 0x78
 8003412:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003420:	4649      	mov	r1, r9
 8003422:	008b      	lsls	r3, r1, #2
 8003424:	4641      	mov	r1, r8
 8003426:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800342a:	4641      	mov	r1, r8
 800342c:	008a      	lsls	r2, r1, #2
 800342e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003432:	f7fd fc09 	bl	8000c48 <__aeabi_uldivmod>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4b39      	ldr	r3, [pc, #228]	; (8003520 <UART_SetConfig+0x4e4>)
 800343c:	fba3 1302 	umull	r1, r3, r3, r2
 8003440:	095b      	lsrs	r3, r3, #5
 8003442:	2164      	movs	r1, #100	; 0x64
 8003444:	fb01 f303 	mul.w	r3, r1, r3
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	3332      	adds	r3, #50	; 0x32
 800344e:	4a34      	ldr	r2, [pc, #208]	; (8003520 <UART_SetConfig+0x4e4>)
 8003450:	fba2 2303 	umull	r2, r3, r2, r3
 8003454:	095b      	lsrs	r3, r3, #5
 8003456:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800345a:	441c      	add	r4, r3
 800345c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003460:	2200      	movs	r2, #0
 8003462:	673b      	str	r3, [r7, #112]	; 0x70
 8003464:	677a      	str	r2, [r7, #116]	; 0x74
 8003466:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800346a:	4642      	mov	r2, r8
 800346c:	464b      	mov	r3, r9
 800346e:	1891      	adds	r1, r2, r2
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	415b      	adcs	r3, r3
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800347a:	4641      	mov	r1, r8
 800347c:	1851      	adds	r1, r2, r1
 800347e:	6039      	str	r1, [r7, #0]
 8003480:	4649      	mov	r1, r9
 8003482:	414b      	adcs	r3, r1
 8003484:	607b      	str	r3, [r7, #4]
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	f04f 0300 	mov.w	r3, #0
 800348e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003492:	4659      	mov	r1, fp
 8003494:	00cb      	lsls	r3, r1, #3
 8003496:	4651      	mov	r1, sl
 8003498:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800349c:	4651      	mov	r1, sl
 800349e:	00ca      	lsls	r2, r1, #3
 80034a0:	4610      	mov	r0, r2
 80034a2:	4619      	mov	r1, r3
 80034a4:	4603      	mov	r3, r0
 80034a6:	4642      	mov	r2, r8
 80034a8:	189b      	adds	r3, r3, r2
 80034aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80034ac:	464b      	mov	r3, r9
 80034ae:	460a      	mov	r2, r1
 80034b0:	eb42 0303 	adc.w	r3, r2, r3
 80034b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	663b      	str	r3, [r7, #96]	; 0x60
 80034c0:	667a      	str	r2, [r7, #100]	; 0x64
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	f04f 0300 	mov.w	r3, #0
 80034ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80034ce:	4649      	mov	r1, r9
 80034d0:	008b      	lsls	r3, r1, #2
 80034d2:	4641      	mov	r1, r8
 80034d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034d8:	4641      	mov	r1, r8
 80034da:	008a      	lsls	r2, r1, #2
 80034dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80034e0:	f7fd fbb2 	bl	8000c48 <__aeabi_uldivmod>
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	4b0d      	ldr	r3, [pc, #52]	; (8003520 <UART_SetConfig+0x4e4>)
 80034ea:	fba3 1302 	umull	r1, r3, r3, r2
 80034ee:	095b      	lsrs	r3, r3, #5
 80034f0:	2164      	movs	r1, #100	; 0x64
 80034f2:	fb01 f303 	mul.w	r3, r1, r3
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	3332      	adds	r3, #50	; 0x32
 80034fc:	4a08      	ldr	r2, [pc, #32]	; (8003520 <UART_SetConfig+0x4e4>)
 80034fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	f003 020f 	and.w	r2, r3, #15
 8003508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4422      	add	r2, r4
 8003510:	609a      	str	r2, [r3, #8]
}
 8003512:	bf00      	nop
 8003514:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003518:	46bd      	mov	sp, r7
 800351a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800351e:	bf00      	nop
 8003520:	51eb851f 	.word	0x51eb851f

08003524 <__errno>:
 8003524:	4b01      	ldr	r3, [pc, #4]	; (800352c <__errno+0x8>)
 8003526:	6818      	ldr	r0, [r3, #0]
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	2000000c 	.word	0x2000000c

08003530 <__libc_init_array>:
 8003530:	b570      	push	{r4, r5, r6, lr}
 8003532:	4d0d      	ldr	r5, [pc, #52]	; (8003568 <__libc_init_array+0x38>)
 8003534:	4c0d      	ldr	r4, [pc, #52]	; (800356c <__libc_init_array+0x3c>)
 8003536:	1b64      	subs	r4, r4, r5
 8003538:	10a4      	asrs	r4, r4, #2
 800353a:	2600      	movs	r6, #0
 800353c:	42a6      	cmp	r6, r4
 800353e:	d109      	bne.n	8003554 <__libc_init_array+0x24>
 8003540:	4d0b      	ldr	r5, [pc, #44]	; (8003570 <__libc_init_array+0x40>)
 8003542:	4c0c      	ldr	r4, [pc, #48]	; (8003574 <__libc_init_array+0x44>)
 8003544:	f002 ff04 	bl	8006350 <_init>
 8003548:	1b64      	subs	r4, r4, r5
 800354a:	10a4      	asrs	r4, r4, #2
 800354c:	2600      	movs	r6, #0
 800354e:	42a6      	cmp	r6, r4
 8003550:	d105      	bne.n	800355e <__libc_init_array+0x2e>
 8003552:	bd70      	pop	{r4, r5, r6, pc}
 8003554:	f855 3b04 	ldr.w	r3, [r5], #4
 8003558:	4798      	blx	r3
 800355a:	3601      	adds	r6, #1
 800355c:	e7ee      	b.n	800353c <__libc_init_array+0xc>
 800355e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003562:	4798      	blx	r3
 8003564:	3601      	adds	r6, #1
 8003566:	e7f2      	b.n	800354e <__libc_init_array+0x1e>
 8003568:	0800678c 	.word	0x0800678c
 800356c:	0800678c 	.word	0x0800678c
 8003570:	0800678c 	.word	0x0800678c
 8003574:	08006790 	.word	0x08006790

08003578 <malloc>:
 8003578:	4b02      	ldr	r3, [pc, #8]	; (8003584 <malloc+0xc>)
 800357a:	4601      	mov	r1, r0
 800357c:	6818      	ldr	r0, [r3, #0]
 800357e:	f000 b877 	b.w	8003670 <_malloc_r>
 8003582:	bf00      	nop
 8003584:	2000000c 	.word	0x2000000c

08003588 <memset>:
 8003588:	4402      	add	r2, r0
 800358a:	4603      	mov	r3, r0
 800358c:	4293      	cmp	r3, r2
 800358e:	d100      	bne.n	8003592 <memset+0xa>
 8003590:	4770      	bx	lr
 8003592:	f803 1b01 	strb.w	r1, [r3], #1
 8003596:	e7f9      	b.n	800358c <memset+0x4>

08003598 <_free_r>:
 8003598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800359a:	2900      	cmp	r1, #0
 800359c:	d044      	beq.n	8003628 <_free_r+0x90>
 800359e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035a2:	9001      	str	r0, [sp, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f1a1 0404 	sub.w	r4, r1, #4
 80035aa:	bfb8      	it	lt
 80035ac:	18e4      	addlt	r4, r4, r3
 80035ae:	f001 fbfb 	bl	8004da8 <__malloc_lock>
 80035b2:	4a1e      	ldr	r2, [pc, #120]	; (800362c <_free_r+0x94>)
 80035b4:	9801      	ldr	r0, [sp, #4]
 80035b6:	6813      	ldr	r3, [r2, #0]
 80035b8:	b933      	cbnz	r3, 80035c8 <_free_r+0x30>
 80035ba:	6063      	str	r3, [r4, #4]
 80035bc:	6014      	str	r4, [r2, #0]
 80035be:	b003      	add	sp, #12
 80035c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80035c4:	f001 bbf6 	b.w	8004db4 <__malloc_unlock>
 80035c8:	42a3      	cmp	r3, r4
 80035ca:	d908      	bls.n	80035de <_free_r+0x46>
 80035cc:	6825      	ldr	r5, [r4, #0]
 80035ce:	1961      	adds	r1, r4, r5
 80035d0:	428b      	cmp	r3, r1
 80035d2:	bf01      	itttt	eq
 80035d4:	6819      	ldreq	r1, [r3, #0]
 80035d6:	685b      	ldreq	r3, [r3, #4]
 80035d8:	1949      	addeq	r1, r1, r5
 80035da:	6021      	streq	r1, [r4, #0]
 80035dc:	e7ed      	b.n	80035ba <_free_r+0x22>
 80035de:	461a      	mov	r2, r3
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	b10b      	cbz	r3, 80035e8 <_free_r+0x50>
 80035e4:	42a3      	cmp	r3, r4
 80035e6:	d9fa      	bls.n	80035de <_free_r+0x46>
 80035e8:	6811      	ldr	r1, [r2, #0]
 80035ea:	1855      	adds	r5, r2, r1
 80035ec:	42a5      	cmp	r5, r4
 80035ee:	d10b      	bne.n	8003608 <_free_r+0x70>
 80035f0:	6824      	ldr	r4, [r4, #0]
 80035f2:	4421      	add	r1, r4
 80035f4:	1854      	adds	r4, r2, r1
 80035f6:	42a3      	cmp	r3, r4
 80035f8:	6011      	str	r1, [r2, #0]
 80035fa:	d1e0      	bne.n	80035be <_free_r+0x26>
 80035fc:	681c      	ldr	r4, [r3, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	6053      	str	r3, [r2, #4]
 8003602:	4421      	add	r1, r4
 8003604:	6011      	str	r1, [r2, #0]
 8003606:	e7da      	b.n	80035be <_free_r+0x26>
 8003608:	d902      	bls.n	8003610 <_free_r+0x78>
 800360a:	230c      	movs	r3, #12
 800360c:	6003      	str	r3, [r0, #0]
 800360e:	e7d6      	b.n	80035be <_free_r+0x26>
 8003610:	6825      	ldr	r5, [r4, #0]
 8003612:	1961      	adds	r1, r4, r5
 8003614:	428b      	cmp	r3, r1
 8003616:	bf04      	itt	eq
 8003618:	6819      	ldreq	r1, [r3, #0]
 800361a:	685b      	ldreq	r3, [r3, #4]
 800361c:	6063      	str	r3, [r4, #4]
 800361e:	bf04      	itt	eq
 8003620:	1949      	addeq	r1, r1, r5
 8003622:	6021      	streq	r1, [r4, #0]
 8003624:	6054      	str	r4, [r2, #4]
 8003626:	e7ca      	b.n	80035be <_free_r+0x26>
 8003628:	b003      	add	sp, #12
 800362a:	bd30      	pop	{r4, r5, pc}
 800362c:	200002c4 	.word	0x200002c4

08003630 <sbrk_aligned>:
 8003630:	b570      	push	{r4, r5, r6, lr}
 8003632:	4e0e      	ldr	r6, [pc, #56]	; (800366c <sbrk_aligned+0x3c>)
 8003634:	460c      	mov	r4, r1
 8003636:	6831      	ldr	r1, [r6, #0]
 8003638:	4605      	mov	r5, r0
 800363a:	b911      	cbnz	r1, 8003642 <sbrk_aligned+0x12>
 800363c:	f000 fcf6 	bl	800402c <_sbrk_r>
 8003640:	6030      	str	r0, [r6, #0]
 8003642:	4621      	mov	r1, r4
 8003644:	4628      	mov	r0, r5
 8003646:	f000 fcf1 	bl	800402c <_sbrk_r>
 800364a:	1c43      	adds	r3, r0, #1
 800364c:	d00a      	beq.n	8003664 <sbrk_aligned+0x34>
 800364e:	1cc4      	adds	r4, r0, #3
 8003650:	f024 0403 	bic.w	r4, r4, #3
 8003654:	42a0      	cmp	r0, r4
 8003656:	d007      	beq.n	8003668 <sbrk_aligned+0x38>
 8003658:	1a21      	subs	r1, r4, r0
 800365a:	4628      	mov	r0, r5
 800365c:	f000 fce6 	bl	800402c <_sbrk_r>
 8003660:	3001      	adds	r0, #1
 8003662:	d101      	bne.n	8003668 <sbrk_aligned+0x38>
 8003664:	f04f 34ff 	mov.w	r4, #4294967295
 8003668:	4620      	mov	r0, r4
 800366a:	bd70      	pop	{r4, r5, r6, pc}
 800366c:	200002c8 	.word	0x200002c8

08003670 <_malloc_r>:
 8003670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003674:	1ccd      	adds	r5, r1, #3
 8003676:	f025 0503 	bic.w	r5, r5, #3
 800367a:	3508      	adds	r5, #8
 800367c:	2d0c      	cmp	r5, #12
 800367e:	bf38      	it	cc
 8003680:	250c      	movcc	r5, #12
 8003682:	2d00      	cmp	r5, #0
 8003684:	4607      	mov	r7, r0
 8003686:	db01      	blt.n	800368c <_malloc_r+0x1c>
 8003688:	42a9      	cmp	r1, r5
 800368a:	d905      	bls.n	8003698 <_malloc_r+0x28>
 800368c:	230c      	movs	r3, #12
 800368e:	603b      	str	r3, [r7, #0]
 8003690:	2600      	movs	r6, #0
 8003692:	4630      	mov	r0, r6
 8003694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003698:	4e2e      	ldr	r6, [pc, #184]	; (8003754 <_malloc_r+0xe4>)
 800369a:	f001 fb85 	bl	8004da8 <__malloc_lock>
 800369e:	6833      	ldr	r3, [r6, #0]
 80036a0:	461c      	mov	r4, r3
 80036a2:	bb34      	cbnz	r4, 80036f2 <_malloc_r+0x82>
 80036a4:	4629      	mov	r1, r5
 80036a6:	4638      	mov	r0, r7
 80036a8:	f7ff ffc2 	bl	8003630 <sbrk_aligned>
 80036ac:	1c43      	adds	r3, r0, #1
 80036ae:	4604      	mov	r4, r0
 80036b0:	d14d      	bne.n	800374e <_malloc_r+0xde>
 80036b2:	6834      	ldr	r4, [r6, #0]
 80036b4:	4626      	mov	r6, r4
 80036b6:	2e00      	cmp	r6, #0
 80036b8:	d140      	bne.n	800373c <_malloc_r+0xcc>
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	4631      	mov	r1, r6
 80036be:	4638      	mov	r0, r7
 80036c0:	eb04 0803 	add.w	r8, r4, r3
 80036c4:	f000 fcb2 	bl	800402c <_sbrk_r>
 80036c8:	4580      	cmp	r8, r0
 80036ca:	d13a      	bne.n	8003742 <_malloc_r+0xd2>
 80036cc:	6821      	ldr	r1, [r4, #0]
 80036ce:	3503      	adds	r5, #3
 80036d0:	1a6d      	subs	r5, r5, r1
 80036d2:	f025 0503 	bic.w	r5, r5, #3
 80036d6:	3508      	adds	r5, #8
 80036d8:	2d0c      	cmp	r5, #12
 80036da:	bf38      	it	cc
 80036dc:	250c      	movcc	r5, #12
 80036de:	4629      	mov	r1, r5
 80036e0:	4638      	mov	r0, r7
 80036e2:	f7ff ffa5 	bl	8003630 <sbrk_aligned>
 80036e6:	3001      	adds	r0, #1
 80036e8:	d02b      	beq.n	8003742 <_malloc_r+0xd2>
 80036ea:	6823      	ldr	r3, [r4, #0]
 80036ec:	442b      	add	r3, r5
 80036ee:	6023      	str	r3, [r4, #0]
 80036f0:	e00e      	b.n	8003710 <_malloc_r+0xa0>
 80036f2:	6822      	ldr	r2, [r4, #0]
 80036f4:	1b52      	subs	r2, r2, r5
 80036f6:	d41e      	bmi.n	8003736 <_malloc_r+0xc6>
 80036f8:	2a0b      	cmp	r2, #11
 80036fa:	d916      	bls.n	800372a <_malloc_r+0xba>
 80036fc:	1961      	adds	r1, r4, r5
 80036fe:	42a3      	cmp	r3, r4
 8003700:	6025      	str	r5, [r4, #0]
 8003702:	bf18      	it	ne
 8003704:	6059      	strne	r1, [r3, #4]
 8003706:	6863      	ldr	r3, [r4, #4]
 8003708:	bf08      	it	eq
 800370a:	6031      	streq	r1, [r6, #0]
 800370c:	5162      	str	r2, [r4, r5]
 800370e:	604b      	str	r3, [r1, #4]
 8003710:	4638      	mov	r0, r7
 8003712:	f104 060b 	add.w	r6, r4, #11
 8003716:	f001 fb4d 	bl	8004db4 <__malloc_unlock>
 800371a:	f026 0607 	bic.w	r6, r6, #7
 800371e:	1d23      	adds	r3, r4, #4
 8003720:	1af2      	subs	r2, r6, r3
 8003722:	d0b6      	beq.n	8003692 <_malloc_r+0x22>
 8003724:	1b9b      	subs	r3, r3, r6
 8003726:	50a3      	str	r3, [r4, r2]
 8003728:	e7b3      	b.n	8003692 <_malloc_r+0x22>
 800372a:	6862      	ldr	r2, [r4, #4]
 800372c:	42a3      	cmp	r3, r4
 800372e:	bf0c      	ite	eq
 8003730:	6032      	streq	r2, [r6, #0]
 8003732:	605a      	strne	r2, [r3, #4]
 8003734:	e7ec      	b.n	8003710 <_malloc_r+0xa0>
 8003736:	4623      	mov	r3, r4
 8003738:	6864      	ldr	r4, [r4, #4]
 800373a:	e7b2      	b.n	80036a2 <_malloc_r+0x32>
 800373c:	4634      	mov	r4, r6
 800373e:	6876      	ldr	r6, [r6, #4]
 8003740:	e7b9      	b.n	80036b6 <_malloc_r+0x46>
 8003742:	230c      	movs	r3, #12
 8003744:	603b      	str	r3, [r7, #0]
 8003746:	4638      	mov	r0, r7
 8003748:	f001 fb34 	bl	8004db4 <__malloc_unlock>
 800374c:	e7a1      	b.n	8003692 <_malloc_r+0x22>
 800374e:	6025      	str	r5, [r4, #0]
 8003750:	e7de      	b.n	8003710 <_malloc_r+0xa0>
 8003752:	bf00      	nop
 8003754:	200002c4 	.word	0x200002c4

08003758 <__cvt>:
 8003758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800375c:	ec55 4b10 	vmov	r4, r5, d0
 8003760:	2d00      	cmp	r5, #0
 8003762:	460e      	mov	r6, r1
 8003764:	4619      	mov	r1, r3
 8003766:	462b      	mov	r3, r5
 8003768:	bfbb      	ittet	lt
 800376a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800376e:	461d      	movlt	r5, r3
 8003770:	2300      	movge	r3, #0
 8003772:	232d      	movlt	r3, #45	; 0x2d
 8003774:	700b      	strb	r3, [r1, #0]
 8003776:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003778:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800377c:	4691      	mov	r9, r2
 800377e:	f023 0820 	bic.w	r8, r3, #32
 8003782:	bfbc      	itt	lt
 8003784:	4622      	movlt	r2, r4
 8003786:	4614      	movlt	r4, r2
 8003788:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800378c:	d005      	beq.n	800379a <__cvt+0x42>
 800378e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003792:	d100      	bne.n	8003796 <__cvt+0x3e>
 8003794:	3601      	adds	r6, #1
 8003796:	2102      	movs	r1, #2
 8003798:	e000      	b.n	800379c <__cvt+0x44>
 800379a:	2103      	movs	r1, #3
 800379c:	ab03      	add	r3, sp, #12
 800379e:	9301      	str	r3, [sp, #4]
 80037a0:	ab02      	add	r3, sp, #8
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	ec45 4b10 	vmov	d0, r4, r5
 80037a8:	4653      	mov	r3, sl
 80037aa:	4632      	mov	r2, r6
 80037ac:	f000 fcfc 	bl	80041a8 <_dtoa_r>
 80037b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80037b4:	4607      	mov	r7, r0
 80037b6:	d102      	bne.n	80037be <__cvt+0x66>
 80037b8:	f019 0f01 	tst.w	r9, #1
 80037bc:	d022      	beq.n	8003804 <__cvt+0xac>
 80037be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80037c2:	eb07 0906 	add.w	r9, r7, r6
 80037c6:	d110      	bne.n	80037ea <__cvt+0x92>
 80037c8:	783b      	ldrb	r3, [r7, #0]
 80037ca:	2b30      	cmp	r3, #48	; 0x30
 80037cc:	d10a      	bne.n	80037e4 <__cvt+0x8c>
 80037ce:	2200      	movs	r2, #0
 80037d0:	2300      	movs	r3, #0
 80037d2:	4620      	mov	r0, r4
 80037d4:	4629      	mov	r1, r5
 80037d6:	f7fd f977 	bl	8000ac8 <__aeabi_dcmpeq>
 80037da:	b918      	cbnz	r0, 80037e4 <__cvt+0x8c>
 80037dc:	f1c6 0601 	rsb	r6, r6, #1
 80037e0:	f8ca 6000 	str.w	r6, [sl]
 80037e4:	f8da 3000 	ldr.w	r3, [sl]
 80037e8:	4499      	add	r9, r3
 80037ea:	2200      	movs	r2, #0
 80037ec:	2300      	movs	r3, #0
 80037ee:	4620      	mov	r0, r4
 80037f0:	4629      	mov	r1, r5
 80037f2:	f7fd f969 	bl	8000ac8 <__aeabi_dcmpeq>
 80037f6:	b108      	cbz	r0, 80037fc <__cvt+0xa4>
 80037f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80037fc:	2230      	movs	r2, #48	; 0x30
 80037fe:	9b03      	ldr	r3, [sp, #12]
 8003800:	454b      	cmp	r3, r9
 8003802:	d307      	bcc.n	8003814 <__cvt+0xbc>
 8003804:	9b03      	ldr	r3, [sp, #12]
 8003806:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003808:	1bdb      	subs	r3, r3, r7
 800380a:	4638      	mov	r0, r7
 800380c:	6013      	str	r3, [r2, #0]
 800380e:	b004      	add	sp, #16
 8003810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003814:	1c59      	adds	r1, r3, #1
 8003816:	9103      	str	r1, [sp, #12]
 8003818:	701a      	strb	r2, [r3, #0]
 800381a:	e7f0      	b.n	80037fe <__cvt+0xa6>

0800381c <__exponent>:
 800381c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800381e:	4603      	mov	r3, r0
 8003820:	2900      	cmp	r1, #0
 8003822:	bfb8      	it	lt
 8003824:	4249      	neglt	r1, r1
 8003826:	f803 2b02 	strb.w	r2, [r3], #2
 800382a:	bfb4      	ite	lt
 800382c:	222d      	movlt	r2, #45	; 0x2d
 800382e:	222b      	movge	r2, #43	; 0x2b
 8003830:	2909      	cmp	r1, #9
 8003832:	7042      	strb	r2, [r0, #1]
 8003834:	dd2a      	ble.n	800388c <__exponent+0x70>
 8003836:	f10d 0407 	add.w	r4, sp, #7
 800383a:	46a4      	mov	ip, r4
 800383c:	270a      	movs	r7, #10
 800383e:	46a6      	mov	lr, r4
 8003840:	460a      	mov	r2, r1
 8003842:	fb91 f6f7 	sdiv	r6, r1, r7
 8003846:	fb07 1516 	mls	r5, r7, r6, r1
 800384a:	3530      	adds	r5, #48	; 0x30
 800384c:	2a63      	cmp	r2, #99	; 0x63
 800384e:	f104 34ff 	add.w	r4, r4, #4294967295
 8003852:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003856:	4631      	mov	r1, r6
 8003858:	dcf1      	bgt.n	800383e <__exponent+0x22>
 800385a:	3130      	adds	r1, #48	; 0x30
 800385c:	f1ae 0502 	sub.w	r5, lr, #2
 8003860:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003864:	1c44      	adds	r4, r0, #1
 8003866:	4629      	mov	r1, r5
 8003868:	4561      	cmp	r1, ip
 800386a:	d30a      	bcc.n	8003882 <__exponent+0x66>
 800386c:	f10d 0209 	add.w	r2, sp, #9
 8003870:	eba2 020e 	sub.w	r2, r2, lr
 8003874:	4565      	cmp	r5, ip
 8003876:	bf88      	it	hi
 8003878:	2200      	movhi	r2, #0
 800387a:	4413      	add	r3, r2
 800387c:	1a18      	subs	r0, r3, r0
 800387e:	b003      	add	sp, #12
 8003880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003882:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003886:	f804 2f01 	strb.w	r2, [r4, #1]!
 800388a:	e7ed      	b.n	8003868 <__exponent+0x4c>
 800388c:	2330      	movs	r3, #48	; 0x30
 800388e:	3130      	adds	r1, #48	; 0x30
 8003890:	7083      	strb	r3, [r0, #2]
 8003892:	70c1      	strb	r1, [r0, #3]
 8003894:	1d03      	adds	r3, r0, #4
 8003896:	e7f1      	b.n	800387c <__exponent+0x60>

08003898 <_printf_float>:
 8003898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800389c:	ed2d 8b02 	vpush	{d8}
 80038a0:	b08d      	sub	sp, #52	; 0x34
 80038a2:	460c      	mov	r4, r1
 80038a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80038a8:	4616      	mov	r6, r2
 80038aa:	461f      	mov	r7, r3
 80038ac:	4605      	mov	r5, r0
 80038ae:	f001 fa69 	bl	8004d84 <_localeconv_r>
 80038b2:	f8d0 a000 	ldr.w	sl, [r0]
 80038b6:	4650      	mov	r0, sl
 80038b8:	f7fc fc8a 	bl	80001d0 <strlen>
 80038bc:	2300      	movs	r3, #0
 80038be:	930a      	str	r3, [sp, #40]	; 0x28
 80038c0:	6823      	ldr	r3, [r4, #0]
 80038c2:	9305      	str	r3, [sp, #20]
 80038c4:	f8d8 3000 	ldr.w	r3, [r8]
 80038c8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80038cc:	3307      	adds	r3, #7
 80038ce:	f023 0307 	bic.w	r3, r3, #7
 80038d2:	f103 0208 	add.w	r2, r3, #8
 80038d6:	f8c8 2000 	str.w	r2, [r8]
 80038da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038de:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80038e2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80038e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80038ea:	9307      	str	r3, [sp, #28]
 80038ec:	f8cd 8018 	str.w	r8, [sp, #24]
 80038f0:	ee08 0a10 	vmov	s16, r0
 80038f4:	4b9f      	ldr	r3, [pc, #636]	; (8003b74 <_printf_float+0x2dc>)
 80038f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80038fa:	f04f 32ff 	mov.w	r2, #4294967295
 80038fe:	f7fd f915 	bl	8000b2c <__aeabi_dcmpun>
 8003902:	bb88      	cbnz	r0, 8003968 <_printf_float+0xd0>
 8003904:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003908:	4b9a      	ldr	r3, [pc, #616]	; (8003b74 <_printf_float+0x2dc>)
 800390a:	f04f 32ff 	mov.w	r2, #4294967295
 800390e:	f7fd f8ef 	bl	8000af0 <__aeabi_dcmple>
 8003912:	bb48      	cbnz	r0, 8003968 <_printf_float+0xd0>
 8003914:	2200      	movs	r2, #0
 8003916:	2300      	movs	r3, #0
 8003918:	4640      	mov	r0, r8
 800391a:	4649      	mov	r1, r9
 800391c:	f7fd f8de 	bl	8000adc <__aeabi_dcmplt>
 8003920:	b110      	cbz	r0, 8003928 <_printf_float+0x90>
 8003922:	232d      	movs	r3, #45	; 0x2d
 8003924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003928:	4b93      	ldr	r3, [pc, #588]	; (8003b78 <_printf_float+0x2e0>)
 800392a:	4894      	ldr	r0, [pc, #592]	; (8003b7c <_printf_float+0x2e4>)
 800392c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003930:	bf94      	ite	ls
 8003932:	4698      	movls	r8, r3
 8003934:	4680      	movhi	r8, r0
 8003936:	2303      	movs	r3, #3
 8003938:	6123      	str	r3, [r4, #16]
 800393a:	9b05      	ldr	r3, [sp, #20]
 800393c:	f023 0204 	bic.w	r2, r3, #4
 8003940:	6022      	str	r2, [r4, #0]
 8003942:	f04f 0900 	mov.w	r9, #0
 8003946:	9700      	str	r7, [sp, #0]
 8003948:	4633      	mov	r3, r6
 800394a:	aa0b      	add	r2, sp, #44	; 0x2c
 800394c:	4621      	mov	r1, r4
 800394e:	4628      	mov	r0, r5
 8003950:	f000 f9d8 	bl	8003d04 <_printf_common>
 8003954:	3001      	adds	r0, #1
 8003956:	f040 8090 	bne.w	8003a7a <_printf_float+0x1e2>
 800395a:	f04f 30ff 	mov.w	r0, #4294967295
 800395e:	b00d      	add	sp, #52	; 0x34
 8003960:	ecbd 8b02 	vpop	{d8}
 8003964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003968:	4642      	mov	r2, r8
 800396a:	464b      	mov	r3, r9
 800396c:	4640      	mov	r0, r8
 800396e:	4649      	mov	r1, r9
 8003970:	f7fd f8dc 	bl	8000b2c <__aeabi_dcmpun>
 8003974:	b140      	cbz	r0, 8003988 <_printf_float+0xf0>
 8003976:	464b      	mov	r3, r9
 8003978:	2b00      	cmp	r3, #0
 800397a:	bfbc      	itt	lt
 800397c:	232d      	movlt	r3, #45	; 0x2d
 800397e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003982:	487f      	ldr	r0, [pc, #508]	; (8003b80 <_printf_float+0x2e8>)
 8003984:	4b7f      	ldr	r3, [pc, #508]	; (8003b84 <_printf_float+0x2ec>)
 8003986:	e7d1      	b.n	800392c <_printf_float+0x94>
 8003988:	6863      	ldr	r3, [r4, #4]
 800398a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800398e:	9206      	str	r2, [sp, #24]
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	d13f      	bne.n	8003a14 <_printf_float+0x17c>
 8003994:	2306      	movs	r3, #6
 8003996:	6063      	str	r3, [r4, #4]
 8003998:	9b05      	ldr	r3, [sp, #20]
 800399a:	6861      	ldr	r1, [r4, #4]
 800399c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80039a0:	2300      	movs	r3, #0
 80039a2:	9303      	str	r3, [sp, #12]
 80039a4:	ab0a      	add	r3, sp, #40	; 0x28
 80039a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80039aa:	ab09      	add	r3, sp, #36	; 0x24
 80039ac:	ec49 8b10 	vmov	d0, r8, r9
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	6022      	str	r2, [r4, #0]
 80039b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80039b8:	4628      	mov	r0, r5
 80039ba:	f7ff fecd 	bl	8003758 <__cvt>
 80039be:	9b06      	ldr	r3, [sp, #24]
 80039c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80039c2:	2b47      	cmp	r3, #71	; 0x47
 80039c4:	4680      	mov	r8, r0
 80039c6:	d108      	bne.n	80039da <_printf_float+0x142>
 80039c8:	1cc8      	adds	r0, r1, #3
 80039ca:	db02      	blt.n	80039d2 <_printf_float+0x13a>
 80039cc:	6863      	ldr	r3, [r4, #4]
 80039ce:	4299      	cmp	r1, r3
 80039d0:	dd41      	ble.n	8003a56 <_printf_float+0x1be>
 80039d2:	f1ab 0b02 	sub.w	fp, fp, #2
 80039d6:	fa5f fb8b 	uxtb.w	fp, fp
 80039da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80039de:	d820      	bhi.n	8003a22 <_printf_float+0x18a>
 80039e0:	3901      	subs	r1, #1
 80039e2:	465a      	mov	r2, fp
 80039e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80039e8:	9109      	str	r1, [sp, #36]	; 0x24
 80039ea:	f7ff ff17 	bl	800381c <__exponent>
 80039ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80039f0:	1813      	adds	r3, r2, r0
 80039f2:	2a01      	cmp	r2, #1
 80039f4:	4681      	mov	r9, r0
 80039f6:	6123      	str	r3, [r4, #16]
 80039f8:	dc02      	bgt.n	8003a00 <_printf_float+0x168>
 80039fa:	6822      	ldr	r2, [r4, #0]
 80039fc:	07d2      	lsls	r2, r2, #31
 80039fe:	d501      	bpl.n	8003a04 <_printf_float+0x16c>
 8003a00:	3301      	adds	r3, #1
 8003a02:	6123      	str	r3, [r4, #16]
 8003a04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d09c      	beq.n	8003946 <_printf_float+0xae>
 8003a0c:	232d      	movs	r3, #45	; 0x2d
 8003a0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a12:	e798      	b.n	8003946 <_printf_float+0xae>
 8003a14:	9a06      	ldr	r2, [sp, #24]
 8003a16:	2a47      	cmp	r2, #71	; 0x47
 8003a18:	d1be      	bne.n	8003998 <_printf_float+0x100>
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1bc      	bne.n	8003998 <_printf_float+0x100>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e7b9      	b.n	8003996 <_printf_float+0xfe>
 8003a22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003a26:	d118      	bne.n	8003a5a <_printf_float+0x1c2>
 8003a28:	2900      	cmp	r1, #0
 8003a2a:	6863      	ldr	r3, [r4, #4]
 8003a2c:	dd0b      	ble.n	8003a46 <_printf_float+0x1ae>
 8003a2e:	6121      	str	r1, [r4, #16]
 8003a30:	b913      	cbnz	r3, 8003a38 <_printf_float+0x1a0>
 8003a32:	6822      	ldr	r2, [r4, #0]
 8003a34:	07d0      	lsls	r0, r2, #31
 8003a36:	d502      	bpl.n	8003a3e <_printf_float+0x1a6>
 8003a38:	3301      	adds	r3, #1
 8003a3a:	440b      	add	r3, r1
 8003a3c:	6123      	str	r3, [r4, #16]
 8003a3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8003a40:	f04f 0900 	mov.w	r9, #0
 8003a44:	e7de      	b.n	8003a04 <_printf_float+0x16c>
 8003a46:	b913      	cbnz	r3, 8003a4e <_printf_float+0x1b6>
 8003a48:	6822      	ldr	r2, [r4, #0]
 8003a4a:	07d2      	lsls	r2, r2, #31
 8003a4c:	d501      	bpl.n	8003a52 <_printf_float+0x1ba>
 8003a4e:	3302      	adds	r3, #2
 8003a50:	e7f4      	b.n	8003a3c <_printf_float+0x1a4>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e7f2      	b.n	8003a3c <_printf_float+0x1a4>
 8003a56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003a5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a5c:	4299      	cmp	r1, r3
 8003a5e:	db05      	blt.n	8003a6c <_printf_float+0x1d4>
 8003a60:	6823      	ldr	r3, [r4, #0]
 8003a62:	6121      	str	r1, [r4, #16]
 8003a64:	07d8      	lsls	r0, r3, #31
 8003a66:	d5ea      	bpl.n	8003a3e <_printf_float+0x1a6>
 8003a68:	1c4b      	adds	r3, r1, #1
 8003a6a:	e7e7      	b.n	8003a3c <_printf_float+0x1a4>
 8003a6c:	2900      	cmp	r1, #0
 8003a6e:	bfd4      	ite	le
 8003a70:	f1c1 0202 	rsble	r2, r1, #2
 8003a74:	2201      	movgt	r2, #1
 8003a76:	4413      	add	r3, r2
 8003a78:	e7e0      	b.n	8003a3c <_printf_float+0x1a4>
 8003a7a:	6823      	ldr	r3, [r4, #0]
 8003a7c:	055a      	lsls	r2, r3, #21
 8003a7e:	d407      	bmi.n	8003a90 <_printf_float+0x1f8>
 8003a80:	6923      	ldr	r3, [r4, #16]
 8003a82:	4642      	mov	r2, r8
 8003a84:	4631      	mov	r1, r6
 8003a86:	4628      	mov	r0, r5
 8003a88:	47b8      	blx	r7
 8003a8a:	3001      	adds	r0, #1
 8003a8c:	d12c      	bne.n	8003ae8 <_printf_float+0x250>
 8003a8e:	e764      	b.n	800395a <_printf_float+0xc2>
 8003a90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003a94:	f240 80e0 	bls.w	8003c58 <_printf_float+0x3c0>
 8003a98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	f7fd f812 	bl	8000ac8 <__aeabi_dcmpeq>
 8003aa4:	2800      	cmp	r0, #0
 8003aa6:	d034      	beq.n	8003b12 <_printf_float+0x27a>
 8003aa8:	4a37      	ldr	r2, [pc, #220]	; (8003b88 <_printf_float+0x2f0>)
 8003aaa:	2301      	movs	r3, #1
 8003aac:	4631      	mov	r1, r6
 8003aae:	4628      	mov	r0, r5
 8003ab0:	47b8      	blx	r7
 8003ab2:	3001      	adds	r0, #1
 8003ab4:	f43f af51 	beq.w	800395a <_printf_float+0xc2>
 8003ab8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003abc:	429a      	cmp	r2, r3
 8003abe:	db02      	blt.n	8003ac6 <_printf_float+0x22e>
 8003ac0:	6823      	ldr	r3, [r4, #0]
 8003ac2:	07d8      	lsls	r0, r3, #31
 8003ac4:	d510      	bpl.n	8003ae8 <_printf_float+0x250>
 8003ac6:	ee18 3a10 	vmov	r3, s16
 8003aca:	4652      	mov	r2, sl
 8003acc:	4631      	mov	r1, r6
 8003ace:	4628      	mov	r0, r5
 8003ad0:	47b8      	blx	r7
 8003ad2:	3001      	adds	r0, #1
 8003ad4:	f43f af41 	beq.w	800395a <_printf_float+0xc2>
 8003ad8:	f04f 0800 	mov.w	r8, #0
 8003adc:	f104 091a 	add.w	r9, r4, #26
 8003ae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	4543      	cmp	r3, r8
 8003ae6:	dc09      	bgt.n	8003afc <_printf_float+0x264>
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	079b      	lsls	r3, r3, #30
 8003aec:	f100 8105 	bmi.w	8003cfa <_printf_float+0x462>
 8003af0:	68e0      	ldr	r0, [r4, #12]
 8003af2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003af4:	4298      	cmp	r0, r3
 8003af6:	bfb8      	it	lt
 8003af8:	4618      	movlt	r0, r3
 8003afa:	e730      	b.n	800395e <_printf_float+0xc6>
 8003afc:	2301      	movs	r3, #1
 8003afe:	464a      	mov	r2, r9
 8003b00:	4631      	mov	r1, r6
 8003b02:	4628      	mov	r0, r5
 8003b04:	47b8      	blx	r7
 8003b06:	3001      	adds	r0, #1
 8003b08:	f43f af27 	beq.w	800395a <_printf_float+0xc2>
 8003b0c:	f108 0801 	add.w	r8, r8, #1
 8003b10:	e7e6      	b.n	8003ae0 <_printf_float+0x248>
 8003b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	dc39      	bgt.n	8003b8c <_printf_float+0x2f4>
 8003b18:	4a1b      	ldr	r2, [pc, #108]	; (8003b88 <_printf_float+0x2f0>)
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	4631      	mov	r1, r6
 8003b1e:	4628      	mov	r0, r5
 8003b20:	47b8      	blx	r7
 8003b22:	3001      	adds	r0, #1
 8003b24:	f43f af19 	beq.w	800395a <_printf_float+0xc2>
 8003b28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	d102      	bne.n	8003b36 <_printf_float+0x29e>
 8003b30:	6823      	ldr	r3, [r4, #0]
 8003b32:	07d9      	lsls	r1, r3, #31
 8003b34:	d5d8      	bpl.n	8003ae8 <_printf_float+0x250>
 8003b36:	ee18 3a10 	vmov	r3, s16
 8003b3a:	4652      	mov	r2, sl
 8003b3c:	4631      	mov	r1, r6
 8003b3e:	4628      	mov	r0, r5
 8003b40:	47b8      	blx	r7
 8003b42:	3001      	adds	r0, #1
 8003b44:	f43f af09 	beq.w	800395a <_printf_float+0xc2>
 8003b48:	f04f 0900 	mov.w	r9, #0
 8003b4c:	f104 0a1a 	add.w	sl, r4, #26
 8003b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b52:	425b      	negs	r3, r3
 8003b54:	454b      	cmp	r3, r9
 8003b56:	dc01      	bgt.n	8003b5c <_printf_float+0x2c4>
 8003b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b5a:	e792      	b.n	8003a82 <_printf_float+0x1ea>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	4652      	mov	r2, sl
 8003b60:	4631      	mov	r1, r6
 8003b62:	4628      	mov	r0, r5
 8003b64:	47b8      	blx	r7
 8003b66:	3001      	adds	r0, #1
 8003b68:	f43f aef7 	beq.w	800395a <_printf_float+0xc2>
 8003b6c:	f109 0901 	add.w	r9, r9, #1
 8003b70:	e7ee      	b.n	8003b50 <_printf_float+0x2b8>
 8003b72:	bf00      	nop
 8003b74:	7fefffff 	.word	0x7fefffff
 8003b78:	080063b0 	.word	0x080063b0
 8003b7c:	080063b4 	.word	0x080063b4
 8003b80:	080063bc 	.word	0x080063bc
 8003b84:	080063b8 	.word	0x080063b8
 8003b88:	080063c0 	.word	0x080063c0
 8003b8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b90:	429a      	cmp	r2, r3
 8003b92:	bfa8      	it	ge
 8003b94:	461a      	movge	r2, r3
 8003b96:	2a00      	cmp	r2, #0
 8003b98:	4691      	mov	r9, r2
 8003b9a:	dc37      	bgt.n	8003c0c <_printf_float+0x374>
 8003b9c:	f04f 0b00 	mov.w	fp, #0
 8003ba0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ba4:	f104 021a 	add.w	r2, r4, #26
 8003ba8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003baa:	9305      	str	r3, [sp, #20]
 8003bac:	eba3 0309 	sub.w	r3, r3, r9
 8003bb0:	455b      	cmp	r3, fp
 8003bb2:	dc33      	bgt.n	8003c1c <_printf_float+0x384>
 8003bb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	db3b      	blt.n	8003c34 <_printf_float+0x39c>
 8003bbc:	6823      	ldr	r3, [r4, #0]
 8003bbe:	07da      	lsls	r2, r3, #31
 8003bc0:	d438      	bmi.n	8003c34 <_printf_float+0x39c>
 8003bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bc4:	9a05      	ldr	r2, [sp, #20]
 8003bc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003bc8:	1a9a      	subs	r2, r3, r2
 8003bca:	eba3 0901 	sub.w	r9, r3, r1
 8003bce:	4591      	cmp	r9, r2
 8003bd0:	bfa8      	it	ge
 8003bd2:	4691      	movge	r9, r2
 8003bd4:	f1b9 0f00 	cmp.w	r9, #0
 8003bd8:	dc35      	bgt.n	8003c46 <_printf_float+0x3ae>
 8003bda:	f04f 0800 	mov.w	r8, #0
 8003bde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003be2:	f104 0a1a 	add.w	sl, r4, #26
 8003be6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003bea:	1a9b      	subs	r3, r3, r2
 8003bec:	eba3 0309 	sub.w	r3, r3, r9
 8003bf0:	4543      	cmp	r3, r8
 8003bf2:	f77f af79 	ble.w	8003ae8 <_printf_float+0x250>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	4652      	mov	r2, sl
 8003bfa:	4631      	mov	r1, r6
 8003bfc:	4628      	mov	r0, r5
 8003bfe:	47b8      	blx	r7
 8003c00:	3001      	adds	r0, #1
 8003c02:	f43f aeaa 	beq.w	800395a <_printf_float+0xc2>
 8003c06:	f108 0801 	add.w	r8, r8, #1
 8003c0a:	e7ec      	b.n	8003be6 <_printf_float+0x34e>
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	4631      	mov	r1, r6
 8003c10:	4642      	mov	r2, r8
 8003c12:	4628      	mov	r0, r5
 8003c14:	47b8      	blx	r7
 8003c16:	3001      	adds	r0, #1
 8003c18:	d1c0      	bne.n	8003b9c <_printf_float+0x304>
 8003c1a:	e69e      	b.n	800395a <_printf_float+0xc2>
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	4631      	mov	r1, r6
 8003c20:	4628      	mov	r0, r5
 8003c22:	9205      	str	r2, [sp, #20]
 8003c24:	47b8      	blx	r7
 8003c26:	3001      	adds	r0, #1
 8003c28:	f43f ae97 	beq.w	800395a <_printf_float+0xc2>
 8003c2c:	9a05      	ldr	r2, [sp, #20]
 8003c2e:	f10b 0b01 	add.w	fp, fp, #1
 8003c32:	e7b9      	b.n	8003ba8 <_printf_float+0x310>
 8003c34:	ee18 3a10 	vmov	r3, s16
 8003c38:	4652      	mov	r2, sl
 8003c3a:	4631      	mov	r1, r6
 8003c3c:	4628      	mov	r0, r5
 8003c3e:	47b8      	blx	r7
 8003c40:	3001      	adds	r0, #1
 8003c42:	d1be      	bne.n	8003bc2 <_printf_float+0x32a>
 8003c44:	e689      	b.n	800395a <_printf_float+0xc2>
 8003c46:	9a05      	ldr	r2, [sp, #20]
 8003c48:	464b      	mov	r3, r9
 8003c4a:	4442      	add	r2, r8
 8003c4c:	4631      	mov	r1, r6
 8003c4e:	4628      	mov	r0, r5
 8003c50:	47b8      	blx	r7
 8003c52:	3001      	adds	r0, #1
 8003c54:	d1c1      	bne.n	8003bda <_printf_float+0x342>
 8003c56:	e680      	b.n	800395a <_printf_float+0xc2>
 8003c58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c5a:	2a01      	cmp	r2, #1
 8003c5c:	dc01      	bgt.n	8003c62 <_printf_float+0x3ca>
 8003c5e:	07db      	lsls	r3, r3, #31
 8003c60:	d538      	bpl.n	8003cd4 <_printf_float+0x43c>
 8003c62:	2301      	movs	r3, #1
 8003c64:	4642      	mov	r2, r8
 8003c66:	4631      	mov	r1, r6
 8003c68:	4628      	mov	r0, r5
 8003c6a:	47b8      	blx	r7
 8003c6c:	3001      	adds	r0, #1
 8003c6e:	f43f ae74 	beq.w	800395a <_printf_float+0xc2>
 8003c72:	ee18 3a10 	vmov	r3, s16
 8003c76:	4652      	mov	r2, sl
 8003c78:	4631      	mov	r1, r6
 8003c7a:	4628      	mov	r0, r5
 8003c7c:	47b8      	blx	r7
 8003c7e:	3001      	adds	r0, #1
 8003c80:	f43f ae6b 	beq.w	800395a <_printf_float+0xc2>
 8003c84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	f7fc ff1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c90:	b9d8      	cbnz	r0, 8003cca <_printf_float+0x432>
 8003c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c94:	f108 0201 	add.w	r2, r8, #1
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	4631      	mov	r1, r6
 8003c9c:	4628      	mov	r0, r5
 8003c9e:	47b8      	blx	r7
 8003ca0:	3001      	adds	r0, #1
 8003ca2:	d10e      	bne.n	8003cc2 <_printf_float+0x42a>
 8003ca4:	e659      	b.n	800395a <_printf_float+0xc2>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	4652      	mov	r2, sl
 8003caa:	4631      	mov	r1, r6
 8003cac:	4628      	mov	r0, r5
 8003cae:	47b8      	blx	r7
 8003cb0:	3001      	adds	r0, #1
 8003cb2:	f43f ae52 	beq.w	800395a <_printf_float+0xc2>
 8003cb6:	f108 0801 	add.w	r8, r8, #1
 8003cba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	4543      	cmp	r3, r8
 8003cc0:	dcf1      	bgt.n	8003ca6 <_printf_float+0x40e>
 8003cc2:	464b      	mov	r3, r9
 8003cc4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003cc8:	e6dc      	b.n	8003a84 <_printf_float+0x1ec>
 8003cca:	f04f 0800 	mov.w	r8, #0
 8003cce:	f104 0a1a 	add.w	sl, r4, #26
 8003cd2:	e7f2      	b.n	8003cba <_printf_float+0x422>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	4642      	mov	r2, r8
 8003cd8:	e7df      	b.n	8003c9a <_printf_float+0x402>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	464a      	mov	r2, r9
 8003cde:	4631      	mov	r1, r6
 8003ce0:	4628      	mov	r0, r5
 8003ce2:	47b8      	blx	r7
 8003ce4:	3001      	adds	r0, #1
 8003ce6:	f43f ae38 	beq.w	800395a <_printf_float+0xc2>
 8003cea:	f108 0801 	add.w	r8, r8, #1
 8003cee:	68e3      	ldr	r3, [r4, #12]
 8003cf0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003cf2:	1a5b      	subs	r3, r3, r1
 8003cf4:	4543      	cmp	r3, r8
 8003cf6:	dcf0      	bgt.n	8003cda <_printf_float+0x442>
 8003cf8:	e6fa      	b.n	8003af0 <_printf_float+0x258>
 8003cfa:	f04f 0800 	mov.w	r8, #0
 8003cfe:	f104 0919 	add.w	r9, r4, #25
 8003d02:	e7f4      	b.n	8003cee <_printf_float+0x456>

08003d04 <_printf_common>:
 8003d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d08:	4616      	mov	r6, r2
 8003d0a:	4699      	mov	r9, r3
 8003d0c:	688a      	ldr	r2, [r1, #8]
 8003d0e:	690b      	ldr	r3, [r1, #16]
 8003d10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d14:	4293      	cmp	r3, r2
 8003d16:	bfb8      	it	lt
 8003d18:	4613      	movlt	r3, r2
 8003d1a:	6033      	str	r3, [r6, #0]
 8003d1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d20:	4607      	mov	r7, r0
 8003d22:	460c      	mov	r4, r1
 8003d24:	b10a      	cbz	r2, 8003d2a <_printf_common+0x26>
 8003d26:	3301      	adds	r3, #1
 8003d28:	6033      	str	r3, [r6, #0]
 8003d2a:	6823      	ldr	r3, [r4, #0]
 8003d2c:	0699      	lsls	r1, r3, #26
 8003d2e:	bf42      	ittt	mi
 8003d30:	6833      	ldrmi	r3, [r6, #0]
 8003d32:	3302      	addmi	r3, #2
 8003d34:	6033      	strmi	r3, [r6, #0]
 8003d36:	6825      	ldr	r5, [r4, #0]
 8003d38:	f015 0506 	ands.w	r5, r5, #6
 8003d3c:	d106      	bne.n	8003d4c <_printf_common+0x48>
 8003d3e:	f104 0a19 	add.w	sl, r4, #25
 8003d42:	68e3      	ldr	r3, [r4, #12]
 8003d44:	6832      	ldr	r2, [r6, #0]
 8003d46:	1a9b      	subs	r3, r3, r2
 8003d48:	42ab      	cmp	r3, r5
 8003d4a:	dc26      	bgt.n	8003d9a <_printf_common+0x96>
 8003d4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d50:	1e13      	subs	r3, r2, #0
 8003d52:	6822      	ldr	r2, [r4, #0]
 8003d54:	bf18      	it	ne
 8003d56:	2301      	movne	r3, #1
 8003d58:	0692      	lsls	r2, r2, #26
 8003d5a:	d42b      	bmi.n	8003db4 <_printf_common+0xb0>
 8003d5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d60:	4649      	mov	r1, r9
 8003d62:	4638      	mov	r0, r7
 8003d64:	47c0      	blx	r8
 8003d66:	3001      	adds	r0, #1
 8003d68:	d01e      	beq.n	8003da8 <_printf_common+0xa4>
 8003d6a:	6823      	ldr	r3, [r4, #0]
 8003d6c:	68e5      	ldr	r5, [r4, #12]
 8003d6e:	6832      	ldr	r2, [r6, #0]
 8003d70:	f003 0306 	and.w	r3, r3, #6
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	bf08      	it	eq
 8003d78:	1aad      	subeq	r5, r5, r2
 8003d7a:	68a3      	ldr	r3, [r4, #8]
 8003d7c:	6922      	ldr	r2, [r4, #16]
 8003d7e:	bf0c      	ite	eq
 8003d80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d84:	2500      	movne	r5, #0
 8003d86:	4293      	cmp	r3, r2
 8003d88:	bfc4      	itt	gt
 8003d8a:	1a9b      	subgt	r3, r3, r2
 8003d8c:	18ed      	addgt	r5, r5, r3
 8003d8e:	2600      	movs	r6, #0
 8003d90:	341a      	adds	r4, #26
 8003d92:	42b5      	cmp	r5, r6
 8003d94:	d11a      	bne.n	8003dcc <_printf_common+0xc8>
 8003d96:	2000      	movs	r0, #0
 8003d98:	e008      	b.n	8003dac <_printf_common+0xa8>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	4652      	mov	r2, sl
 8003d9e:	4649      	mov	r1, r9
 8003da0:	4638      	mov	r0, r7
 8003da2:	47c0      	blx	r8
 8003da4:	3001      	adds	r0, #1
 8003da6:	d103      	bne.n	8003db0 <_printf_common+0xac>
 8003da8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003db0:	3501      	adds	r5, #1
 8003db2:	e7c6      	b.n	8003d42 <_printf_common+0x3e>
 8003db4:	18e1      	adds	r1, r4, r3
 8003db6:	1c5a      	adds	r2, r3, #1
 8003db8:	2030      	movs	r0, #48	; 0x30
 8003dba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003dbe:	4422      	add	r2, r4
 8003dc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003dc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003dc8:	3302      	adds	r3, #2
 8003dca:	e7c7      	b.n	8003d5c <_printf_common+0x58>
 8003dcc:	2301      	movs	r3, #1
 8003dce:	4622      	mov	r2, r4
 8003dd0:	4649      	mov	r1, r9
 8003dd2:	4638      	mov	r0, r7
 8003dd4:	47c0      	blx	r8
 8003dd6:	3001      	adds	r0, #1
 8003dd8:	d0e6      	beq.n	8003da8 <_printf_common+0xa4>
 8003dda:	3601      	adds	r6, #1
 8003ddc:	e7d9      	b.n	8003d92 <_printf_common+0x8e>
	...

08003de0 <_printf_i>:
 8003de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003de4:	7e0f      	ldrb	r7, [r1, #24]
 8003de6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003de8:	2f78      	cmp	r7, #120	; 0x78
 8003dea:	4691      	mov	r9, r2
 8003dec:	4680      	mov	r8, r0
 8003dee:	460c      	mov	r4, r1
 8003df0:	469a      	mov	sl, r3
 8003df2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003df6:	d807      	bhi.n	8003e08 <_printf_i+0x28>
 8003df8:	2f62      	cmp	r7, #98	; 0x62
 8003dfa:	d80a      	bhi.n	8003e12 <_printf_i+0x32>
 8003dfc:	2f00      	cmp	r7, #0
 8003dfe:	f000 80d8 	beq.w	8003fb2 <_printf_i+0x1d2>
 8003e02:	2f58      	cmp	r7, #88	; 0x58
 8003e04:	f000 80a3 	beq.w	8003f4e <_printf_i+0x16e>
 8003e08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e10:	e03a      	b.n	8003e88 <_printf_i+0xa8>
 8003e12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e16:	2b15      	cmp	r3, #21
 8003e18:	d8f6      	bhi.n	8003e08 <_printf_i+0x28>
 8003e1a:	a101      	add	r1, pc, #4	; (adr r1, 8003e20 <_printf_i+0x40>)
 8003e1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e20:	08003e79 	.word	0x08003e79
 8003e24:	08003e8d 	.word	0x08003e8d
 8003e28:	08003e09 	.word	0x08003e09
 8003e2c:	08003e09 	.word	0x08003e09
 8003e30:	08003e09 	.word	0x08003e09
 8003e34:	08003e09 	.word	0x08003e09
 8003e38:	08003e8d 	.word	0x08003e8d
 8003e3c:	08003e09 	.word	0x08003e09
 8003e40:	08003e09 	.word	0x08003e09
 8003e44:	08003e09 	.word	0x08003e09
 8003e48:	08003e09 	.word	0x08003e09
 8003e4c:	08003f99 	.word	0x08003f99
 8003e50:	08003ebd 	.word	0x08003ebd
 8003e54:	08003f7b 	.word	0x08003f7b
 8003e58:	08003e09 	.word	0x08003e09
 8003e5c:	08003e09 	.word	0x08003e09
 8003e60:	08003fbb 	.word	0x08003fbb
 8003e64:	08003e09 	.word	0x08003e09
 8003e68:	08003ebd 	.word	0x08003ebd
 8003e6c:	08003e09 	.word	0x08003e09
 8003e70:	08003e09 	.word	0x08003e09
 8003e74:	08003f83 	.word	0x08003f83
 8003e78:	682b      	ldr	r3, [r5, #0]
 8003e7a:	1d1a      	adds	r2, r3, #4
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	602a      	str	r2, [r5, #0]
 8003e80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e0a3      	b.n	8003fd4 <_printf_i+0x1f4>
 8003e8c:	6820      	ldr	r0, [r4, #0]
 8003e8e:	6829      	ldr	r1, [r5, #0]
 8003e90:	0606      	lsls	r6, r0, #24
 8003e92:	f101 0304 	add.w	r3, r1, #4
 8003e96:	d50a      	bpl.n	8003eae <_printf_i+0xce>
 8003e98:	680e      	ldr	r6, [r1, #0]
 8003e9a:	602b      	str	r3, [r5, #0]
 8003e9c:	2e00      	cmp	r6, #0
 8003e9e:	da03      	bge.n	8003ea8 <_printf_i+0xc8>
 8003ea0:	232d      	movs	r3, #45	; 0x2d
 8003ea2:	4276      	negs	r6, r6
 8003ea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ea8:	485e      	ldr	r0, [pc, #376]	; (8004024 <_printf_i+0x244>)
 8003eaa:	230a      	movs	r3, #10
 8003eac:	e019      	b.n	8003ee2 <_printf_i+0x102>
 8003eae:	680e      	ldr	r6, [r1, #0]
 8003eb0:	602b      	str	r3, [r5, #0]
 8003eb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003eb6:	bf18      	it	ne
 8003eb8:	b236      	sxthne	r6, r6
 8003eba:	e7ef      	b.n	8003e9c <_printf_i+0xbc>
 8003ebc:	682b      	ldr	r3, [r5, #0]
 8003ebe:	6820      	ldr	r0, [r4, #0]
 8003ec0:	1d19      	adds	r1, r3, #4
 8003ec2:	6029      	str	r1, [r5, #0]
 8003ec4:	0601      	lsls	r1, r0, #24
 8003ec6:	d501      	bpl.n	8003ecc <_printf_i+0xec>
 8003ec8:	681e      	ldr	r6, [r3, #0]
 8003eca:	e002      	b.n	8003ed2 <_printf_i+0xf2>
 8003ecc:	0646      	lsls	r6, r0, #25
 8003ece:	d5fb      	bpl.n	8003ec8 <_printf_i+0xe8>
 8003ed0:	881e      	ldrh	r6, [r3, #0]
 8003ed2:	4854      	ldr	r0, [pc, #336]	; (8004024 <_printf_i+0x244>)
 8003ed4:	2f6f      	cmp	r7, #111	; 0x6f
 8003ed6:	bf0c      	ite	eq
 8003ed8:	2308      	moveq	r3, #8
 8003eda:	230a      	movne	r3, #10
 8003edc:	2100      	movs	r1, #0
 8003ede:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ee2:	6865      	ldr	r5, [r4, #4]
 8003ee4:	60a5      	str	r5, [r4, #8]
 8003ee6:	2d00      	cmp	r5, #0
 8003ee8:	bfa2      	ittt	ge
 8003eea:	6821      	ldrge	r1, [r4, #0]
 8003eec:	f021 0104 	bicge.w	r1, r1, #4
 8003ef0:	6021      	strge	r1, [r4, #0]
 8003ef2:	b90e      	cbnz	r6, 8003ef8 <_printf_i+0x118>
 8003ef4:	2d00      	cmp	r5, #0
 8003ef6:	d04d      	beq.n	8003f94 <_printf_i+0x1b4>
 8003ef8:	4615      	mov	r5, r2
 8003efa:	fbb6 f1f3 	udiv	r1, r6, r3
 8003efe:	fb03 6711 	mls	r7, r3, r1, r6
 8003f02:	5dc7      	ldrb	r7, [r0, r7]
 8003f04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f08:	4637      	mov	r7, r6
 8003f0a:	42bb      	cmp	r3, r7
 8003f0c:	460e      	mov	r6, r1
 8003f0e:	d9f4      	bls.n	8003efa <_printf_i+0x11a>
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d10b      	bne.n	8003f2c <_printf_i+0x14c>
 8003f14:	6823      	ldr	r3, [r4, #0]
 8003f16:	07de      	lsls	r6, r3, #31
 8003f18:	d508      	bpl.n	8003f2c <_printf_i+0x14c>
 8003f1a:	6923      	ldr	r3, [r4, #16]
 8003f1c:	6861      	ldr	r1, [r4, #4]
 8003f1e:	4299      	cmp	r1, r3
 8003f20:	bfde      	ittt	le
 8003f22:	2330      	movle	r3, #48	; 0x30
 8003f24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f2c:	1b52      	subs	r2, r2, r5
 8003f2e:	6122      	str	r2, [r4, #16]
 8003f30:	f8cd a000 	str.w	sl, [sp]
 8003f34:	464b      	mov	r3, r9
 8003f36:	aa03      	add	r2, sp, #12
 8003f38:	4621      	mov	r1, r4
 8003f3a:	4640      	mov	r0, r8
 8003f3c:	f7ff fee2 	bl	8003d04 <_printf_common>
 8003f40:	3001      	adds	r0, #1
 8003f42:	d14c      	bne.n	8003fde <_printf_i+0x1fe>
 8003f44:	f04f 30ff 	mov.w	r0, #4294967295
 8003f48:	b004      	add	sp, #16
 8003f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f4e:	4835      	ldr	r0, [pc, #212]	; (8004024 <_printf_i+0x244>)
 8003f50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003f54:	6829      	ldr	r1, [r5, #0]
 8003f56:	6823      	ldr	r3, [r4, #0]
 8003f58:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f5c:	6029      	str	r1, [r5, #0]
 8003f5e:	061d      	lsls	r5, r3, #24
 8003f60:	d514      	bpl.n	8003f8c <_printf_i+0x1ac>
 8003f62:	07df      	lsls	r7, r3, #31
 8003f64:	bf44      	itt	mi
 8003f66:	f043 0320 	orrmi.w	r3, r3, #32
 8003f6a:	6023      	strmi	r3, [r4, #0]
 8003f6c:	b91e      	cbnz	r6, 8003f76 <_printf_i+0x196>
 8003f6e:	6823      	ldr	r3, [r4, #0]
 8003f70:	f023 0320 	bic.w	r3, r3, #32
 8003f74:	6023      	str	r3, [r4, #0]
 8003f76:	2310      	movs	r3, #16
 8003f78:	e7b0      	b.n	8003edc <_printf_i+0xfc>
 8003f7a:	6823      	ldr	r3, [r4, #0]
 8003f7c:	f043 0320 	orr.w	r3, r3, #32
 8003f80:	6023      	str	r3, [r4, #0]
 8003f82:	2378      	movs	r3, #120	; 0x78
 8003f84:	4828      	ldr	r0, [pc, #160]	; (8004028 <_printf_i+0x248>)
 8003f86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f8a:	e7e3      	b.n	8003f54 <_printf_i+0x174>
 8003f8c:	0659      	lsls	r1, r3, #25
 8003f8e:	bf48      	it	mi
 8003f90:	b2b6      	uxthmi	r6, r6
 8003f92:	e7e6      	b.n	8003f62 <_printf_i+0x182>
 8003f94:	4615      	mov	r5, r2
 8003f96:	e7bb      	b.n	8003f10 <_printf_i+0x130>
 8003f98:	682b      	ldr	r3, [r5, #0]
 8003f9a:	6826      	ldr	r6, [r4, #0]
 8003f9c:	6961      	ldr	r1, [r4, #20]
 8003f9e:	1d18      	adds	r0, r3, #4
 8003fa0:	6028      	str	r0, [r5, #0]
 8003fa2:	0635      	lsls	r5, r6, #24
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	d501      	bpl.n	8003fac <_printf_i+0x1cc>
 8003fa8:	6019      	str	r1, [r3, #0]
 8003faa:	e002      	b.n	8003fb2 <_printf_i+0x1d2>
 8003fac:	0670      	lsls	r0, r6, #25
 8003fae:	d5fb      	bpl.n	8003fa8 <_printf_i+0x1c8>
 8003fb0:	8019      	strh	r1, [r3, #0]
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	6123      	str	r3, [r4, #16]
 8003fb6:	4615      	mov	r5, r2
 8003fb8:	e7ba      	b.n	8003f30 <_printf_i+0x150>
 8003fba:	682b      	ldr	r3, [r5, #0]
 8003fbc:	1d1a      	adds	r2, r3, #4
 8003fbe:	602a      	str	r2, [r5, #0]
 8003fc0:	681d      	ldr	r5, [r3, #0]
 8003fc2:	6862      	ldr	r2, [r4, #4]
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	4628      	mov	r0, r5
 8003fc8:	f7fc f90a 	bl	80001e0 <memchr>
 8003fcc:	b108      	cbz	r0, 8003fd2 <_printf_i+0x1f2>
 8003fce:	1b40      	subs	r0, r0, r5
 8003fd0:	6060      	str	r0, [r4, #4]
 8003fd2:	6863      	ldr	r3, [r4, #4]
 8003fd4:	6123      	str	r3, [r4, #16]
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fdc:	e7a8      	b.n	8003f30 <_printf_i+0x150>
 8003fde:	6923      	ldr	r3, [r4, #16]
 8003fe0:	462a      	mov	r2, r5
 8003fe2:	4649      	mov	r1, r9
 8003fe4:	4640      	mov	r0, r8
 8003fe6:	47d0      	blx	sl
 8003fe8:	3001      	adds	r0, #1
 8003fea:	d0ab      	beq.n	8003f44 <_printf_i+0x164>
 8003fec:	6823      	ldr	r3, [r4, #0]
 8003fee:	079b      	lsls	r3, r3, #30
 8003ff0:	d413      	bmi.n	800401a <_printf_i+0x23a>
 8003ff2:	68e0      	ldr	r0, [r4, #12]
 8003ff4:	9b03      	ldr	r3, [sp, #12]
 8003ff6:	4298      	cmp	r0, r3
 8003ff8:	bfb8      	it	lt
 8003ffa:	4618      	movlt	r0, r3
 8003ffc:	e7a4      	b.n	8003f48 <_printf_i+0x168>
 8003ffe:	2301      	movs	r3, #1
 8004000:	4632      	mov	r2, r6
 8004002:	4649      	mov	r1, r9
 8004004:	4640      	mov	r0, r8
 8004006:	47d0      	blx	sl
 8004008:	3001      	adds	r0, #1
 800400a:	d09b      	beq.n	8003f44 <_printf_i+0x164>
 800400c:	3501      	adds	r5, #1
 800400e:	68e3      	ldr	r3, [r4, #12]
 8004010:	9903      	ldr	r1, [sp, #12]
 8004012:	1a5b      	subs	r3, r3, r1
 8004014:	42ab      	cmp	r3, r5
 8004016:	dcf2      	bgt.n	8003ffe <_printf_i+0x21e>
 8004018:	e7eb      	b.n	8003ff2 <_printf_i+0x212>
 800401a:	2500      	movs	r5, #0
 800401c:	f104 0619 	add.w	r6, r4, #25
 8004020:	e7f5      	b.n	800400e <_printf_i+0x22e>
 8004022:	bf00      	nop
 8004024:	080063c2 	.word	0x080063c2
 8004028:	080063d3 	.word	0x080063d3

0800402c <_sbrk_r>:
 800402c:	b538      	push	{r3, r4, r5, lr}
 800402e:	4d06      	ldr	r5, [pc, #24]	; (8004048 <_sbrk_r+0x1c>)
 8004030:	2300      	movs	r3, #0
 8004032:	4604      	mov	r4, r0
 8004034:	4608      	mov	r0, r1
 8004036:	602b      	str	r3, [r5, #0]
 8004038:	f7fd fac4 	bl	80015c4 <_sbrk>
 800403c:	1c43      	adds	r3, r0, #1
 800403e:	d102      	bne.n	8004046 <_sbrk_r+0x1a>
 8004040:	682b      	ldr	r3, [r5, #0]
 8004042:	b103      	cbz	r3, 8004046 <_sbrk_r+0x1a>
 8004044:	6023      	str	r3, [r4, #0]
 8004046:	bd38      	pop	{r3, r4, r5, pc}
 8004048:	200002cc 	.word	0x200002cc

0800404c <siprintf>:
 800404c:	b40e      	push	{r1, r2, r3}
 800404e:	b500      	push	{lr}
 8004050:	b09c      	sub	sp, #112	; 0x70
 8004052:	ab1d      	add	r3, sp, #116	; 0x74
 8004054:	9002      	str	r0, [sp, #8]
 8004056:	9006      	str	r0, [sp, #24]
 8004058:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800405c:	4809      	ldr	r0, [pc, #36]	; (8004084 <siprintf+0x38>)
 800405e:	9107      	str	r1, [sp, #28]
 8004060:	9104      	str	r1, [sp, #16]
 8004062:	4909      	ldr	r1, [pc, #36]	; (8004088 <siprintf+0x3c>)
 8004064:	f853 2b04 	ldr.w	r2, [r3], #4
 8004068:	9105      	str	r1, [sp, #20]
 800406a:	6800      	ldr	r0, [r0, #0]
 800406c:	9301      	str	r3, [sp, #4]
 800406e:	a902      	add	r1, sp, #8
 8004070:	f001 fa9c 	bl	80055ac <_svfiprintf_r>
 8004074:	9b02      	ldr	r3, [sp, #8]
 8004076:	2200      	movs	r2, #0
 8004078:	701a      	strb	r2, [r3, #0]
 800407a:	b01c      	add	sp, #112	; 0x70
 800407c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004080:	b003      	add	sp, #12
 8004082:	4770      	bx	lr
 8004084:	2000000c 	.word	0x2000000c
 8004088:	ffff0208 	.word	0xffff0208

0800408c <quorem>:
 800408c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004090:	6903      	ldr	r3, [r0, #16]
 8004092:	690c      	ldr	r4, [r1, #16]
 8004094:	42a3      	cmp	r3, r4
 8004096:	4607      	mov	r7, r0
 8004098:	f2c0 8081 	blt.w	800419e <quorem+0x112>
 800409c:	3c01      	subs	r4, #1
 800409e:	f101 0814 	add.w	r8, r1, #20
 80040a2:	f100 0514 	add.w	r5, r0, #20
 80040a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80040aa:	9301      	str	r3, [sp, #4]
 80040ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80040b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80040b4:	3301      	adds	r3, #1
 80040b6:	429a      	cmp	r2, r3
 80040b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80040bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80040c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80040c4:	d331      	bcc.n	800412a <quorem+0x9e>
 80040c6:	f04f 0e00 	mov.w	lr, #0
 80040ca:	4640      	mov	r0, r8
 80040cc:	46ac      	mov	ip, r5
 80040ce:	46f2      	mov	sl, lr
 80040d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80040d4:	b293      	uxth	r3, r2
 80040d6:	fb06 e303 	mla	r3, r6, r3, lr
 80040da:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80040de:	b29b      	uxth	r3, r3
 80040e0:	ebaa 0303 	sub.w	r3, sl, r3
 80040e4:	f8dc a000 	ldr.w	sl, [ip]
 80040e8:	0c12      	lsrs	r2, r2, #16
 80040ea:	fa13 f38a 	uxtah	r3, r3, sl
 80040ee:	fb06 e202 	mla	r2, r6, r2, lr
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	9b00      	ldr	r3, [sp, #0]
 80040f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80040fa:	b292      	uxth	r2, r2
 80040fc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004100:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004104:	f8bd 3000 	ldrh.w	r3, [sp]
 8004108:	4581      	cmp	r9, r0
 800410a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800410e:	f84c 3b04 	str.w	r3, [ip], #4
 8004112:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004116:	d2db      	bcs.n	80040d0 <quorem+0x44>
 8004118:	f855 300b 	ldr.w	r3, [r5, fp]
 800411c:	b92b      	cbnz	r3, 800412a <quorem+0x9e>
 800411e:	9b01      	ldr	r3, [sp, #4]
 8004120:	3b04      	subs	r3, #4
 8004122:	429d      	cmp	r5, r3
 8004124:	461a      	mov	r2, r3
 8004126:	d32e      	bcc.n	8004186 <quorem+0xfa>
 8004128:	613c      	str	r4, [r7, #16]
 800412a:	4638      	mov	r0, r7
 800412c:	f001 f8ca 	bl	80052c4 <__mcmp>
 8004130:	2800      	cmp	r0, #0
 8004132:	db24      	blt.n	800417e <quorem+0xf2>
 8004134:	3601      	adds	r6, #1
 8004136:	4628      	mov	r0, r5
 8004138:	f04f 0c00 	mov.w	ip, #0
 800413c:	f858 2b04 	ldr.w	r2, [r8], #4
 8004140:	f8d0 e000 	ldr.w	lr, [r0]
 8004144:	b293      	uxth	r3, r2
 8004146:	ebac 0303 	sub.w	r3, ip, r3
 800414a:	0c12      	lsrs	r2, r2, #16
 800414c:	fa13 f38e 	uxtah	r3, r3, lr
 8004150:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004154:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004158:	b29b      	uxth	r3, r3
 800415a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800415e:	45c1      	cmp	r9, r8
 8004160:	f840 3b04 	str.w	r3, [r0], #4
 8004164:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004168:	d2e8      	bcs.n	800413c <quorem+0xb0>
 800416a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800416e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004172:	b922      	cbnz	r2, 800417e <quorem+0xf2>
 8004174:	3b04      	subs	r3, #4
 8004176:	429d      	cmp	r5, r3
 8004178:	461a      	mov	r2, r3
 800417a:	d30a      	bcc.n	8004192 <quorem+0x106>
 800417c:	613c      	str	r4, [r7, #16]
 800417e:	4630      	mov	r0, r6
 8004180:	b003      	add	sp, #12
 8004182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004186:	6812      	ldr	r2, [r2, #0]
 8004188:	3b04      	subs	r3, #4
 800418a:	2a00      	cmp	r2, #0
 800418c:	d1cc      	bne.n	8004128 <quorem+0x9c>
 800418e:	3c01      	subs	r4, #1
 8004190:	e7c7      	b.n	8004122 <quorem+0x96>
 8004192:	6812      	ldr	r2, [r2, #0]
 8004194:	3b04      	subs	r3, #4
 8004196:	2a00      	cmp	r2, #0
 8004198:	d1f0      	bne.n	800417c <quorem+0xf0>
 800419a:	3c01      	subs	r4, #1
 800419c:	e7eb      	b.n	8004176 <quorem+0xea>
 800419e:	2000      	movs	r0, #0
 80041a0:	e7ee      	b.n	8004180 <quorem+0xf4>
 80041a2:	0000      	movs	r0, r0
 80041a4:	0000      	movs	r0, r0
	...

080041a8 <_dtoa_r>:
 80041a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ac:	ed2d 8b04 	vpush	{d8-d9}
 80041b0:	ec57 6b10 	vmov	r6, r7, d0
 80041b4:	b093      	sub	sp, #76	; 0x4c
 80041b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80041b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80041bc:	9106      	str	r1, [sp, #24]
 80041be:	ee10 aa10 	vmov	sl, s0
 80041c2:	4604      	mov	r4, r0
 80041c4:	9209      	str	r2, [sp, #36]	; 0x24
 80041c6:	930c      	str	r3, [sp, #48]	; 0x30
 80041c8:	46bb      	mov	fp, r7
 80041ca:	b975      	cbnz	r5, 80041ea <_dtoa_r+0x42>
 80041cc:	2010      	movs	r0, #16
 80041ce:	f7ff f9d3 	bl	8003578 <malloc>
 80041d2:	4602      	mov	r2, r0
 80041d4:	6260      	str	r0, [r4, #36]	; 0x24
 80041d6:	b920      	cbnz	r0, 80041e2 <_dtoa_r+0x3a>
 80041d8:	4ba7      	ldr	r3, [pc, #668]	; (8004478 <_dtoa_r+0x2d0>)
 80041da:	21ea      	movs	r1, #234	; 0xea
 80041dc:	48a7      	ldr	r0, [pc, #668]	; (800447c <_dtoa_r+0x2d4>)
 80041de:	f001 fae5 	bl	80057ac <__assert_func>
 80041e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80041e6:	6005      	str	r5, [r0, #0]
 80041e8:	60c5      	str	r5, [r0, #12]
 80041ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041ec:	6819      	ldr	r1, [r3, #0]
 80041ee:	b151      	cbz	r1, 8004206 <_dtoa_r+0x5e>
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	604a      	str	r2, [r1, #4]
 80041f4:	2301      	movs	r3, #1
 80041f6:	4093      	lsls	r3, r2
 80041f8:	608b      	str	r3, [r1, #8]
 80041fa:	4620      	mov	r0, r4
 80041fc:	f000 fe20 	bl	8004e40 <_Bfree>
 8004200:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	1e3b      	subs	r3, r7, #0
 8004208:	bfaa      	itet	ge
 800420a:	2300      	movge	r3, #0
 800420c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004210:	f8c8 3000 	strge.w	r3, [r8]
 8004214:	4b9a      	ldr	r3, [pc, #616]	; (8004480 <_dtoa_r+0x2d8>)
 8004216:	bfbc      	itt	lt
 8004218:	2201      	movlt	r2, #1
 800421a:	f8c8 2000 	strlt.w	r2, [r8]
 800421e:	ea33 030b 	bics.w	r3, r3, fp
 8004222:	d11b      	bne.n	800425c <_dtoa_r+0xb4>
 8004224:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004226:	f242 730f 	movw	r3, #9999	; 0x270f
 800422a:	6013      	str	r3, [r2, #0]
 800422c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004230:	4333      	orrs	r3, r6
 8004232:	f000 8592 	beq.w	8004d5a <_dtoa_r+0xbb2>
 8004236:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004238:	b963      	cbnz	r3, 8004254 <_dtoa_r+0xac>
 800423a:	4b92      	ldr	r3, [pc, #584]	; (8004484 <_dtoa_r+0x2dc>)
 800423c:	e022      	b.n	8004284 <_dtoa_r+0xdc>
 800423e:	4b92      	ldr	r3, [pc, #584]	; (8004488 <_dtoa_r+0x2e0>)
 8004240:	9301      	str	r3, [sp, #4]
 8004242:	3308      	adds	r3, #8
 8004244:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004246:	6013      	str	r3, [r2, #0]
 8004248:	9801      	ldr	r0, [sp, #4]
 800424a:	b013      	add	sp, #76	; 0x4c
 800424c:	ecbd 8b04 	vpop	{d8-d9}
 8004250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004254:	4b8b      	ldr	r3, [pc, #556]	; (8004484 <_dtoa_r+0x2dc>)
 8004256:	9301      	str	r3, [sp, #4]
 8004258:	3303      	adds	r3, #3
 800425a:	e7f3      	b.n	8004244 <_dtoa_r+0x9c>
 800425c:	2200      	movs	r2, #0
 800425e:	2300      	movs	r3, #0
 8004260:	4650      	mov	r0, sl
 8004262:	4659      	mov	r1, fp
 8004264:	f7fc fc30 	bl	8000ac8 <__aeabi_dcmpeq>
 8004268:	ec4b ab19 	vmov	d9, sl, fp
 800426c:	4680      	mov	r8, r0
 800426e:	b158      	cbz	r0, 8004288 <_dtoa_r+0xe0>
 8004270:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004272:	2301      	movs	r3, #1
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 856b 	beq.w	8004d54 <_dtoa_r+0xbac>
 800427e:	4883      	ldr	r0, [pc, #524]	; (800448c <_dtoa_r+0x2e4>)
 8004280:	6018      	str	r0, [r3, #0]
 8004282:	1e43      	subs	r3, r0, #1
 8004284:	9301      	str	r3, [sp, #4]
 8004286:	e7df      	b.n	8004248 <_dtoa_r+0xa0>
 8004288:	ec4b ab10 	vmov	d0, sl, fp
 800428c:	aa10      	add	r2, sp, #64	; 0x40
 800428e:	a911      	add	r1, sp, #68	; 0x44
 8004290:	4620      	mov	r0, r4
 8004292:	f001 f8bd 	bl	8005410 <__d2b>
 8004296:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800429a:	ee08 0a10 	vmov	s16, r0
 800429e:	2d00      	cmp	r5, #0
 80042a0:	f000 8084 	beq.w	80043ac <_dtoa_r+0x204>
 80042a4:	ee19 3a90 	vmov	r3, s19
 80042a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80042b0:	4656      	mov	r6, sl
 80042b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80042b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80042ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80042be:	4b74      	ldr	r3, [pc, #464]	; (8004490 <_dtoa_r+0x2e8>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	4630      	mov	r0, r6
 80042c4:	4639      	mov	r1, r7
 80042c6:	f7fb ffdf 	bl	8000288 <__aeabi_dsub>
 80042ca:	a365      	add	r3, pc, #404	; (adr r3, 8004460 <_dtoa_r+0x2b8>)
 80042cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d0:	f7fc f992 	bl	80005f8 <__aeabi_dmul>
 80042d4:	a364      	add	r3, pc, #400	; (adr r3, 8004468 <_dtoa_r+0x2c0>)
 80042d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042da:	f7fb ffd7 	bl	800028c <__adddf3>
 80042de:	4606      	mov	r6, r0
 80042e0:	4628      	mov	r0, r5
 80042e2:	460f      	mov	r7, r1
 80042e4:	f7fc f91e 	bl	8000524 <__aeabi_i2d>
 80042e8:	a361      	add	r3, pc, #388	; (adr r3, 8004470 <_dtoa_r+0x2c8>)
 80042ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ee:	f7fc f983 	bl	80005f8 <__aeabi_dmul>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4630      	mov	r0, r6
 80042f8:	4639      	mov	r1, r7
 80042fa:	f7fb ffc7 	bl	800028c <__adddf3>
 80042fe:	4606      	mov	r6, r0
 8004300:	460f      	mov	r7, r1
 8004302:	f7fc fc29 	bl	8000b58 <__aeabi_d2iz>
 8004306:	2200      	movs	r2, #0
 8004308:	9000      	str	r0, [sp, #0]
 800430a:	2300      	movs	r3, #0
 800430c:	4630      	mov	r0, r6
 800430e:	4639      	mov	r1, r7
 8004310:	f7fc fbe4 	bl	8000adc <__aeabi_dcmplt>
 8004314:	b150      	cbz	r0, 800432c <_dtoa_r+0x184>
 8004316:	9800      	ldr	r0, [sp, #0]
 8004318:	f7fc f904 	bl	8000524 <__aeabi_i2d>
 800431c:	4632      	mov	r2, r6
 800431e:	463b      	mov	r3, r7
 8004320:	f7fc fbd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8004324:	b910      	cbnz	r0, 800432c <_dtoa_r+0x184>
 8004326:	9b00      	ldr	r3, [sp, #0]
 8004328:	3b01      	subs	r3, #1
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	9b00      	ldr	r3, [sp, #0]
 800432e:	2b16      	cmp	r3, #22
 8004330:	d85a      	bhi.n	80043e8 <_dtoa_r+0x240>
 8004332:	9a00      	ldr	r2, [sp, #0]
 8004334:	4b57      	ldr	r3, [pc, #348]	; (8004494 <_dtoa_r+0x2ec>)
 8004336:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800433a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433e:	ec51 0b19 	vmov	r0, r1, d9
 8004342:	f7fc fbcb 	bl	8000adc <__aeabi_dcmplt>
 8004346:	2800      	cmp	r0, #0
 8004348:	d050      	beq.n	80043ec <_dtoa_r+0x244>
 800434a:	9b00      	ldr	r3, [sp, #0]
 800434c:	3b01      	subs	r3, #1
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	2300      	movs	r3, #0
 8004352:	930b      	str	r3, [sp, #44]	; 0x2c
 8004354:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004356:	1b5d      	subs	r5, r3, r5
 8004358:	1e6b      	subs	r3, r5, #1
 800435a:	9305      	str	r3, [sp, #20]
 800435c:	bf45      	ittet	mi
 800435e:	f1c5 0301 	rsbmi	r3, r5, #1
 8004362:	9304      	strmi	r3, [sp, #16]
 8004364:	2300      	movpl	r3, #0
 8004366:	2300      	movmi	r3, #0
 8004368:	bf4c      	ite	mi
 800436a:	9305      	strmi	r3, [sp, #20]
 800436c:	9304      	strpl	r3, [sp, #16]
 800436e:	9b00      	ldr	r3, [sp, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	db3d      	blt.n	80043f0 <_dtoa_r+0x248>
 8004374:	9b05      	ldr	r3, [sp, #20]
 8004376:	9a00      	ldr	r2, [sp, #0]
 8004378:	920a      	str	r2, [sp, #40]	; 0x28
 800437a:	4413      	add	r3, r2
 800437c:	9305      	str	r3, [sp, #20]
 800437e:	2300      	movs	r3, #0
 8004380:	9307      	str	r3, [sp, #28]
 8004382:	9b06      	ldr	r3, [sp, #24]
 8004384:	2b09      	cmp	r3, #9
 8004386:	f200 8089 	bhi.w	800449c <_dtoa_r+0x2f4>
 800438a:	2b05      	cmp	r3, #5
 800438c:	bfc4      	itt	gt
 800438e:	3b04      	subgt	r3, #4
 8004390:	9306      	strgt	r3, [sp, #24]
 8004392:	9b06      	ldr	r3, [sp, #24]
 8004394:	f1a3 0302 	sub.w	r3, r3, #2
 8004398:	bfcc      	ite	gt
 800439a:	2500      	movgt	r5, #0
 800439c:	2501      	movle	r5, #1
 800439e:	2b03      	cmp	r3, #3
 80043a0:	f200 8087 	bhi.w	80044b2 <_dtoa_r+0x30a>
 80043a4:	e8df f003 	tbb	[pc, r3]
 80043a8:	59383a2d 	.word	0x59383a2d
 80043ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80043b0:	441d      	add	r5, r3
 80043b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80043b6:	2b20      	cmp	r3, #32
 80043b8:	bfc1      	itttt	gt
 80043ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80043be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80043c2:	fa0b f303 	lslgt.w	r3, fp, r3
 80043c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80043ca:	bfda      	itte	le
 80043cc:	f1c3 0320 	rsble	r3, r3, #32
 80043d0:	fa06 f003 	lslle.w	r0, r6, r3
 80043d4:	4318      	orrgt	r0, r3
 80043d6:	f7fc f895 	bl	8000504 <__aeabi_ui2d>
 80043da:	2301      	movs	r3, #1
 80043dc:	4606      	mov	r6, r0
 80043de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80043e2:	3d01      	subs	r5, #1
 80043e4:	930e      	str	r3, [sp, #56]	; 0x38
 80043e6:	e76a      	b.n	80042be <_dtoa_r+0x116>
 80043e8:	2301      	movs	r3, #1
 80043ea:	e7b2      	b.n	8004352 <_dtoa_r+0x1aa>
 80043ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80043ee:	e7b1      	b.n	8004354 <_dtoa_r+0x1ac>
 80043f0:	9b04      	ldr	r3, [sp, #16]
 80043f2:	9a00      	ldr	r2, [sp, #0]
 80043f4:	1a9b      	subs	r3, r3, r2
 80043f6:	9304      	str	r3, [sp, #16]
 80043f8:	4253      	negs	r3, r2
 80043fa:	9307      	str	r3, [sp, #28]
 80043fc:	2300      	movs	r3, #0
 80043fe:	930a      	str	r3, [sp, #40]	; 0x28
 8004400:	e7bf      	b.n	8004382 <_dtoa_r+0x1da>
 8004402:	2300      	movs	r3, #0
 8004404:	9308      	str	r3, [sp, #32]
 8004406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004408:	2b00      	cmp	r3, #0
 800440a:	dc55      	bgt.n	80044b8 <_dtoa_r+0x310>
 800440c:	2301      	movs	r3, #1
 800440e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004412:	461a      	mov	r2, r3
 8004414:	9209      	str	r2, [sp, #36]	; 0x24
 8004416:	e00c      	b.n	8004432 <_dtoa_r+0x28a>
 8004418:	2301      	movs	r3, #1
 800441a:	e7f3      	b.n	8004404 <_dtoa_r+0x25c>
 800441c:	2300      	movs	r3, #0
 800441e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004420:	9308      	str	r3, [sp, #32]
 8004422:	9b00      	ldr	r3, [sp, #0]
 8004424:	4413      	add	r3, r2
 8004426:	9302      	str	r3, [sp, #8]
 8004428:	3301      	adds	r3, #1
 800442a:	2b01      	cmp	r3, #1
 800442c:	9303      	str	r3, [sp, #12]
 800442e:	bfb8      	it	lt
 8004430:	2301      	movlt	r3, #1
 8004432:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004434:	2200      	movs	r2, #0
 8004436:	6042      	str	r2, [r0, #4]
 8004438:	2204      	movs	r2, #4
 800443a:	f102 0614 	add.w	r6, r2, #20
 800443e:	429e      	cmp	r6, r3
 8004440:	6841      	ldr	r1, [r0, #4]
 8004442:	d93d      	bls.n	80044c0 <_dtoa_r+0x318>
 8004444:	4620      	mov	r0, r4
 8004446:	f000 fcbb 	bl	8004dc0 <_Balloc>
 800444a:	9001      	str	r0, [sp, #4]
 800444c:	2800      	cmp	r0, #0
 800444e:	d13b      	bne.n	80044c8 <_dtoa_r+0x320>
 8004450:	4b11      	ldr	r3, [pc, #68]	; (8004498 <_dtoa_r+0x2f0>)
 8004452:	4602      	mov	r2, r0
 8004454:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004458:	e6c0      	b.n	80041dc <_dtoa_r+0x34>
 800445a:	2301      	movs	r3, #1
 800445c:	e7df      	b.n	800441e <_dtoa_r+0x276>
 800445e:	bf00      	nop
 8004460:	636f4361 	.word	0x636f4361
 8004464:	3fd287a7 	.word	0x3fd287a7
 8004468:	8b60c8b3 	.word	0x8b60c8b3
 800446c:	3fc68a28 	.word	0x3fc68a28
 8004470:	509f79fb 	.word	0x509f79fb
 8004474:	3fd34413 	.word	0x3fd34413
 8004478:	080063f1 	.word	0x080063f1
 800447c:	08006408 	.word	0x08006408
 8004480:	7ff00000 	.word	0x7ff00000
 8004484:	080063ed 	.word	0x080063ed
 8004488:	080063e4 	.word	0x080063e4
 800448c:	080063c1 	.word	0x080063c1
 8004490:	3ff80000 	.word	0x3ff80000
 8004494:	080064f8 	.word	0x080064f8
 8004498:	08006463 	.word	0x08006463
 800449c:	2501      	movs	r5, #1
 800449e:	2300      	movs	r3, #0
 80044a0:	9306      	str	r3, [sp, #24]
 80044a2:	9508      	str	r5, [sp, #32]
 80044a4:	f04f 33ff 	mov.w	r3, #4294967295
 80044a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80044ac:	2200      	movs	r2, #0
 80044ae:	2312      	movs	r3, #18
 80044b0:	e7b0      	b.n	8004414 <_dtoa_r+0x26c>
 80044b2:	2301      	movs	r3, #1
 80044b4:	9308      	str	r3, [sp, #32]
 80044b6:	e7f5      	b.n	80044a4 <_dtoa_r+0x2fc>
 80044b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80044be:	e7b8      	b.n	8004432 <_dtoa_r+0x28a>
 80044c0:	3101      	adds	r1, #1
 80044c2:	6041      	str	r1, [r0, #4]
 80044c4:	0052      	lsls	r2, r2, #1
 80044c6:	e7b8      	b.n	800443a <_dtoa_r+0x292>
 80044c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044ca:	9a01      	ldr	r2, [sp, #4]
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	9b03      	ldr	r3, [sp, #12]
 80044d0:	2b0e      	cmp	r3, #14
 80044d2:	f200 809d 	bhi.w	8004610 <_dtoa_r+0x468>
 80044d6:	2d00      	cmp	r5, #0
 80044d8:	f000 809a 	beq.w	8004610 <_dtoa_r+0x468>
 80044dc:	9b00      	ldr	r3, [sp, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	dd32      	ble.n	8004548 <_dtoa_r+0x3a0>
 80044e2:	4ab7      	ldr	r2, [pc, #732]	; (80047c0 <_dtoa_r+0x618>)
 80044e4:	f003 030f 	and.w	r3, r3, #15
 80044e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80044ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80044f0:	9b00      	ldr	r3, [sp, #0]
 80044f2:	05d8      	lsls	r0, r3, #23
 80044f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80044f8:	d516      	bpl.n	8004528 <_dtoa_r+0x380>
 80044fa:	4bb2      	ldr	r3, [pc, #712]	; (80047c4 <_dtoa_r+0x61c>)
 80044fc:	ec51 0b19 	vmov	r0, r1, d9
 8004500:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004504:	f7fc f9a2 	bl	800084c <__aeabi_ddiv>
 8004508:	f007 070f 	and.w	r7, r7, #15
 800450c:	4682      	mov	sl, r0
 800450e:	468b      	mov	fp, r1
 8004510:	2503      	movs	r5, #3
 8004512:	4eac      	ldr	r6, [pc, #688]	; (80047c4 <_dtoa_r+0x61c>)
 8004514:	b957      	cbnz	r7, 800452c <_dtoa_r+0x384>
 8004516:	4642      	mov	r2, r8
 8004518:	464b      	mov	r3, r9
 800451a:	4650      	mov	r0, sl
 800451c:	4659      	mov	r1, fp
 800451e:	f7fc f995 	bl	800084c <__aeabi_ddiv>
 8004522:	4682      	mov	sl, r0
 8004524:	468b      	mov	fp, r1
 8004526:	e028      	b.n	800457a <_dtoa_r+0x3d2>
 8004528:	2502      	movs	r5, #2
 800452a:	e7f2      	b.n	8004512 <_dtoa_r+0x36a>
 800452c:	07f9      	lsls	r1, r7, #31
 800452e:	d508      	bpl.n	8004542 <_dtoa_r+0x39a>
 8004530:	4640      	mov	r0, r8
 8004532:	4649      	mov	r1, r9
 8004534:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004538:	f7fc f85e 	bl	80005f8 <__aeabi_dmul>
 800453c:	3501      	adds	r5, #1
 800453e:	4680      	mov	r8, r0
 8004540:	4689      	mov	r9, r1
 8004542:	107f      	asrs	r7, r7, #1
 8004544:	3608      	adds	r6, #8
 8004546:	e7e5      	b.n	8004514 <_dtoa_r+0x36c>
 8004548:	f000 809b 	beq.w	8004682 <_dtoa_r+0x4da>
 800454c:	9b00      	ldr	r3, [sp, #0]
 800454e:	4f9d      	ldr	r7, [pc, #628]	; (80047c4 <_dtoa_r+0x61c>)
 8004550:	425e      	negs	r6, r3
 8004552:	4b9b      	ldr	r3, [pc, #620]	; (80047c0 <_dtoa_r+0x618>)
 8004554:	f006 020f 	and.w	r2, r6, #15
 8004558:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004560:	ec51 0b19 	vmov	r0, r1, d9
 8004564:	f7fc f848 	bl	80005f8 <__aeabi_dmul>
 8004568:	1136      	asrs	r6, r6, #4
 800456a:	4682      	mov	sl, r0
 800456c:	468b      	mov	fp, r1
 800456e:	2300      	movs	r3, #0
 8004570:	2502      	movs	r5, #2
 8004572:	2e00      	cmp	r6, #0
 8004574:	d17a      	bne.n	800466c <_dtoa_r+0x4c4>
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1d3      	bne.n	8004522 <_dtoa_r+0x37a>
 800457a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 8082 	beq.w	8004686 <_dtoa_r+0x4de>
 8004582:	4b91      	ldr	r3, [pc, #580]	; (80047c8 <_dtoa_r+0x620>)
 8004584:	2200      	movs	r2, #0
 8004586:	4650      	mov	r0, sl
 8004588:	4659      	mov	r1, fp
 800458a:	f7fc faa7 	bl	8000adc <__aeabi_dcmplt>
 800458e:	2800      	cmp	r0, #0
 8004590:	d079      	beq.n	8004686 <_dtoa_r+0x4de>
 8004592:	9b03      	ldr	r3, [sp, #12]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d076      	beq.n	8004686 <_dtoa_r+0x4de>
 8004598:	9b02      	ldr	r3, [sp, #8]
 800459a:	2b00      	cmp	r3, #0
 800459c:	dd36      	ble.n	800460c <_dtoa_r+0x464>
 800459e:	9b00      	ldr	r3, [sp, #0]
 80045a0:	4650      	mov	r0, sl
 80045a2:	4659      	mov	r1, fp
 80045a4:	1e5f      	subs	r7, r3, #1
 80045a6:	2200      	movs	r2, #0
 80045a8:	4b88      	ldr	r3, [pc, #544]	; (80047cc <_dtoa_r+0x624>)
 80045aa:	f7fc f825 	bl	80005f8 <__aeabi_dmul>
 80045ae:	9e02      	ldr	r6, [sp, #8]
 80045b0:	4682      	mov	sl, r0
 80045b2:	468b      	mov	fp, r1
 80045b4:	3501      	adds	r5, #1
 80045b6:	4628      	mov	r0, r5
 80045b8:	f7fb ffb4 	bl	8000524 <__aeabi_i2d>
 80045bc:	4652      	mov	r2, sl
 80045be:	465b      	mov	r3, fp
 80045c0:	f7fc f81a 	bl	80005f8 <__aeabi_dmul>
 80045c4:	4b82      	ldr	r3, [pc, #520]	; (80047d0 <_dtoa_r+0x628>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	f7fb fe60 	bl	800028c <__adddf3>
 80045cc:	46d0      	mov	r8, sl
 80045ce:	46d9      	mov	r9, fp
 80045d0:	4682      	mov	sl, r0
 80045d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80045d6:	2e00      	cmp	r6, #0
 80045d8:	d158      	bne.n	800468c <_dtoa_r+0x4e4>
 80045da:	4b7e      	ldr	r3, [pc, #504]	; (80047d4 <_dtoa_r+0x62c>)
 80045dc:	2200      	movs	r2, #0
 80045de:	4640      	mov	r0, r8
 80045e0:	4649      	mov	r1, r9
 80045e2:	f7fb fe51 	bl	8000288 <__aeabi_dsub>
 80045e6:	4652      	mov	r2, sl
 80045e8:	465b      	mov	r3, fp
 80045ea:	4680      	mov	r8, r0
 80045ec:	4689      	mov	r9, r1
 80045ee:	f7fc fa93 	bl	8000b18 <__aeabi_dcmpgt>
 80045f2:	2800      	cmp	r0, #0
 80045f4:	f040 8295 	bne.w	8004b22 <_dtoa_r+0x97a>
 80045f8:	4652      	mov	r2, sl
 80045fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80045fe:	4640      	mov	r0, r8
 8004600:	4649      	mov	r1, r9
 8004602:	f7fc fa6b 	bl	8000adc <__aeabi_dcmplt>
 8004606:	2800      	cmp	r0, #0
 8004608:	f040 8289 	bne.w	8004b1e <_dtoa_r+0x976>
 800460c:	ec5b ab19 	vmov	sl, fp, d9
 8004610:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004612:	2b00      	cmp	r3, #0
 8004614:	f2c0 8148 	blt.w	80048a8 <_dtoa_r+0x700>
 8004618:	9a00      	ldr	r2, [sp, #0]
 800461a:	2a0e      	cmp	r2, #14
 800461c:	f300 8144 	bgt.w	80048a8 <_dtoa_r+0x700>
 8004620:	4b67      	ldr	r3, [pc, #412]	; (80047c0 <_dtoa_r+0x618>)
 8004622:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004626:	e9d3 8900 	ldrd	r8, r9, [r3]
 800462a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800462c:	2b00      	cmp	r3, #0
 800462e:	f280 80d5 	bge.w	80047dc <_dtoa_r+0x634>
 8004632:	9b03      	ldr	r3, [sp, #12]
 8004634:	2b00      	cmp	r3, #0
 8004636:	f300 80d1 	bgt.w	80047dc <_dtoa_r+0x634>
 800463a:	f040 826f 	bne.w	8004b1c <_dtoa_r+0x974>
 800463e:	4b65      	ldr	r3, [pc, #404]	; (80047d4 <_dtoa_r+0x62c>)
 8004640:	2200      	movs	r2, #0
 8004642:	4640      	mov	r0, r8
 8004644:	4649      	mov	r1, r9
 8004646:	f7fb ffd7 	bl	80005f8 <__aeabi_dmul>
 800464a:	4652      	mov	r2, sl
 800464c:	465b      	mov	r3, fp
 800464e:	f7fc fa59 	bl	8000b04 <__aeabi_dcmpge>
 8004652:	9e03      	ldr	r6, [sp, #12]
 8004654:	4637      	mov	r7, r6
 8004656:	2800      	cmp	r0, #0
 8004658:	f040 8245 	bne.w	8004ae6 <_dtoa_r+0x93e>
 800465c:	9d01      	ldr	r5, [sp, #4]
 800465e:	2331      	movs	r3, #49	; 0x31
 8004660:	f805 3b01 	strb.w	r3, [r5], #1
 8004664:	9b00      	ldr	r3, [sp, #0]
 8004666:	3301      	adds	r3, #1
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	e240      	b.n	8004aee <_dtoa_r+0x946>
 800466c:	07f2      	lsls	r2, r6, #31
 800466e:	d505      	bpl.n	800467c <_dtoa_r+0x4d4>
 8004670:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004674:	f7fb ffc0 	bl	80005f8 <__aeabi_dmul>
 8004678:	3501      	adds	r5, #1
 800467a:	2301      	movs	r3, #1
 800467c:	1076      	asrs	r6, r6, #1
 800467e:	3708      	adds	r7, #8
 8004680:	e777      	b.n	8004572 <_dtoa_r+0x3ca>
 8004682:	2502      	movs	r5, #2
 8004684:	e779      	b.n	800457a <_dtoa_r+0x3d2>
 8004686:	9f00      	ldr	r7, [sp, #0]
 8004688:	9e03      	ldr	r6, [sp, #12]
 800468a:	e794      	b.n	80045b6 <_dtoa_r+0x40e>
 800468c:	9901      	ldr	r1, [sp, #4]
 800468e:	4b4c      	ldr	r3, [pc, #304]	; (80047c0 <_dtoa_r+0x618>)
 8004690:	4431      	add	r1, r6
 8004692:	910d      	str	r1, [sp, #52]	; 0x34
 8004694:	9908      	ldr	r1, [sp, #32]
 8004696:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800469a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800469e:	2900      	cmp	r1, #0
 80046a0:	d043      	beq.n	800472a <_dtoa_r+0x582>
 80046a2:	494d      	ldr	r1, [pc, #308]	; (80047d8 <_dtoa_r+0x630>)
 80046a4:	2000      	movs	r0, #0
 80046a6:	f7fc f8d1 	bl	800084c <__aeabi_ddiv>
 80046aa:	4652      	mov	r2, sl
 80046ac:	465b      	mov	r3, fp
 80046ae:	f7fb fdeb 	bl	8000288 <__aeabi_dsub>
 80046b2:	9d01      	ldr	r5, [sp, #4]
 80046b4:	4682      	mov	sl, r0
 80046b6:	468b      	mov	fp, r1
 80046b8:	4649      	mov	r1, r9
 80046ba:	4640      	mov	r0, r8
 80046bc:	f7fc fa4c 	bl	8000b58 <__aeabi_d2iz>
 80046c0:	4606      	mov	r6, r0
 80046c2:	f7fb ff2f 	bl	8000524 <__aeabi_i2d>
 80046c6:	4602      	mov	r2, r0
 80046c8:	460b      	mov	r3, r1
 80046ca:	4640      	mov	r0, r8
 80046cc:	4649      	mov	r1, r9
 80046ce:	f7fb fddb 	bl	8000288 <__aeabi_dsub>
 80046d2:	3630      	adds	r6, #48	; 0x30
 80046d4:	f805 6b01 	strb.w	r6, [r5], #1
 80046d8:	4652      	mov	r2, sl
 80046da:	465b      	mov	r3, fp
 80046dc:	4680      	mov	r8, r0
 80046de:	4689      	mov	r9, r1
 80046e0:	f7fc f9fc 	bl	8000adc <__aeabi_dcmplt>
 80046e4:	2800      	cmp	r0, #0
 80046e6:	d163      	bne.n	80047b0 <_dtoa_r+0x608>
 80046e8:	4642      	mov	r2, r8
 80046ea:	464b      	mov	r3, r9
 80046ec:	4936      	ldr	r1, [pc, #216]	; (80047c8 <_dtoa_r+0x620>)
 80046ee:	2000      	movs	r0, #0
 80046f0:	f7fb fdca 	bl	8000288 <__aeabi_dsub>
 80046f4:	4652      	mov	r2, sl
 80046f6:	465b      	mov	r3, fp
 80046f8:	f7fc f9f0 	bl	8000adc <__aeabi_dcmplt>
 80046fc:	2800      	cmp	r0, #0
 80046fe:	f040 80b5 	bne.w	800486c <_dtoa_r+0x6c4>
 8004702:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004704:	429d      	cmp	r5, r3
 8004706:	d081      	beq.n	800460c <_dtoa_r+0x464>
 8004708:	4b30      	ldr	r3, [pc, #192]	; (80047cc <_dtoa_r+0x624>)
 800470a:	2200      	movs	r2, #0
 800470c:	4650      	mov	r0, sl
 800470e:	4659      	mov	r1, fp
 8004710:	f7fb ff72 	bl	80005f8 <__aeabi_dmul>
 8004714:	4b2d      	ldr	r3, [pc, #180]	; (80047cc <_dtoa_r+0x624>)
 8004716:	4682      	mov	sl, r0
 8004718:	468b      	mov	fp, r1
 800471a:	4640      	mov	r0, r8
 800471c:	4649      	mov	r1, r9
 800471e:	2200      	movs	r2, #0
 8004720:	f7fb ff6a 	bl	80005f8 <__aeabi_dmul>
 8004724:	4680      	mov	r8, r0
 8004726:	4689      	mov	r9, r1
 8004728:	e7c6      	b.n	80046b8 <_dtoa_r+0x510>
 800472a:	4650      	mov	r0, sl
 800472c:	4659      	mov	r1, fp
 800472e:	f7fb ff63 	bl	80005f8 <__aeabi_dmul>
 8004732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004734:	9d01      	ldr	r5, [sp, #4]
 8004736:	930f      	str	r3, [sp, #60]	; 0x3c
 8004738:	4682      	mov	sl, r0
 800473a:	468b      	mov	fp, r1
 800473c:	4649      	mov	r1, r9
 800473e:	4640      	mov	r0, r8
 8004740:	f7fc fa0a 	bl	8000b58 <__aeabi_d2iz>
 8004744:	4606      	mov	r6, r0
 8004746:	f7fb feed 	bl	8000524 <__aeabi_i2d>
 800474a:	3630      	adds	r6, #48	; 0x30
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	4640      	mov	r0, r8
 8004752:	4649      	mov	r1, r9
 8004754:	f7fb fd98 	bl	8000288 <__aeabi_dsub>
 8004758:	f805 6b01 	strb.w	r6, [r5], #1
 800475c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800475e:	429d      	cmp	r5, r3
 8004760:	4680      	mov	r8, r0
 8004762:	4689      	mov	r9, r1
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	d124      	bne.n	80047b4 <_dtoa_r+0x60c>
 800476a:	4b1b      	ldr	r3, [pc, #108]	; (80047d8 <_dtoa_r+0x630>)
 800476c:	4650      	mov	r0, sl
 800476e:	4659      	mov	r1, fp
 8004770:	f7fb fd8c 	bl	800028c <__adddf3>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	4640      	mov	r0, r8
 800477a:	4649      	mov	r1, r9
 800477c:	f7fc f9cc 	bl	8000b18 <__aeabi_dcmpgt>
 8004780:	2800      	cmp	r0, #0
 8004782:	d173      	bne.n	800486c <_dtoa_r+0x6c4>
 8004784:	4652      	mov	r2, sl
 8004786:	465b      	mov	r3, fp
 8004788:	4913      	ldr	r1, [pc, #76]	; (80047d8 <_dtoa_r+0x630>)
 800478a:	2000      	movs	r0, #0
 800478c:	f7fb fd7c 	bl	8000288 <__aeabi_dsub>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	4640      	mov	r0, r8
 8004796:	4649      	mov	r1, r9
 8004798:	f7fc f9a0 	bl	8000adc <__aeabi_dcmplt>
 800479c:	2800      	cmp	r0, #0
 800479e:	f43f af35 	beq.w	800460c <_dtoa_r+0x464>
 80047a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80047a4:	1e6b      	subs	r3, r5, #1
 80047a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80047a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80047ac:	2b30      	cmp	r3, #48	; 0x30
 80047ae:	d0f8      	beq.n	80047a2 <_dtoa_r+0x5fa>
 80047b0:	9700      	str	r7, [sp, #0]
 80047b2:	e049      	b.n	8004848 <_dtoa_r+0x6a0>
 80047b4:	4b05      	ldr	r3, [pc, #20]	; (80047cc <_dtoa_r+0x624>)
 80047b6:	f7fb ff1f 	bl	80005f8 <__aeabi_dmul>
 80047ba:	4680      	mov	r8, r0
 80047bc:	4689      	mov	r9, r1
 80047be:	e7bd      	b.n	800473c <_dtoa_r+0x594>
 80047c0:	080064f8 	.word	0x080064f8
 80047c4:	080064d0 	.word	0x080064d0
 80047c8:	3ff00000 	.word	0x3ff00000
 80047cc:	40240000 	.word	0x40240000
 80047d0:	401c0000 	.word	0x401c0000
 80047d4:	40140000 	.word	0x40140000
 80047d8:	3fe00000 	.word	0x3fe00000
 80047dc:	9d01      	ldr	r5, [sp, #4]
 80047de:	4656      	mov	r6, sl
 80047e0:	465f      	mov	r7, fp
 80047e2:	4642      	mov	r2, r8
 80047e4:	464b      	mov	r3, r9
 80047e6:	4630      	mov	r0, r6
 80047e8:	4639      	mov	r1, r7
 80047ea:	f7fc f82f 	bl	800084c <__aeabi_ddiv>
 80047ee:	f7fc f9b3 	bl	8000b58 <__aeabi_d2iz>
 80047f2:	4682      	mov	sl, r0
 80047f4:	f7fb fe96 	bl	8000524 <__aeabi_i2d>
 80047f8:	4642      	mov	r2, r8
 80047fa:	464b      	mov	r3, r9
 80047fc:	f7fb fefc 	bl	80005f8 <__aeabi_dmul>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4630      	mov	r0, r6
 8004806:	4639      	mov	r1, r7
 8004808:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800480c:	f7fb fd3c 	bl	8000288 <__aeabi_dsub>
 8004810:	f805 6b01 	strb.w	r6, [r5], #1
 8004814:	9e01      	ldr	r6, [sp, #4]
 8004816:	9f03      	ldr	r7, [sp, #12]
 8004818:	1bae      	subs	r6, r5, r6
 800481a:	42b7      	cmp	r7, r6
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	d135      	bne.n	800488e <_dtoa_r+0x6e6>
 8004822:	f7fb fd33 	bl	800028c <__adddf3>
 8004826:	4642      	mov	r2, r8
 8004828:	464b      	mov	r3, r9
 800482a:	4606      	mov	r6, r0
 800482c:	460f      	mov	r7, r1
 800482e:	f7fc f973 	bl	8000b18 <__aeabi_dcmpgt>
 8004832:	b9d0      	cbnz	r0, 800486a <_dtoa_r+0x6c2>
 8004834:	4642      	mov	r2, r8
 8004836:	464b      	mov	r3, r9
 8004838:	4630      	mov	r0, r6
 800483a:	4639      	mov	r1, r7
 800483c:	f7fc f944 	bl	8000ac8 <__aeabi_dcmpeq>
 8004840:	b110      	cbz	r0, 8004848 <_dtoa_r+0x6a0>
 8004842:	f01a 0f01 	tst.w	sl, #1
 8004846:	d110      	bne.n	800486a <_dtoa_r+0x6c2>
 8004848:	4620      	mov	r0, r4
 800484a:	ee18 1a10 	vmov	r1, s16
 800484e:	f000 faf7 	bl	8004e40 <_Bfree>
 8004852:	2300      	movs	r3, #0
 8004854:	9800      	ldr	r0, [sp, #0]
 8004856:	702b      	strb	r3, [r5, #0]
 8004858:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800485a:	3001      	adds	r0, #1
 800485c:	6018      	str	r0, [r3, #0]
 800485e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004860:	2b00      	cmp	r3, #0
 8004862:	f43f acf1 	beq.w	8004248 <_dtoa_r+0xa0>
 8004866:	601d      	str	r5, [r3, #0]
 8004868:	e4ee      	b.n	8004248 <_dtoa_r+0xa0>
 800486a:	9f00      	ldr	r7, [sp, #0]
 800486c:	462b      	mov	r3, r5
 800486e:	461d      	mov	r5, r3
 8004870:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004874:	2a39      	cmp	r2, #57	; 0x39
 8004876:	d106      	bne.n	8004886 <_dtoa_r+0x6de>
 8004878:	9a01      	ldr	r2, [sp, #4]
 800487a:	429a      	cmp	r2, r3
 800487c:	d1f7      	bne.n	800486e <_dtoa_r+0x6c6>
 800487e:	9901      	ldr	r1, [sp, #4]
 8004880:	2230      	movs	r2, #48	; 0x30
 8004882:	3701      	adds	r7, #1
 8004884:	700a      	strb	r2, [r1, #0]
 8004886:	781a      	ldrb	r2, [r3, #0]
 8004888:	3201      	adds	r2, #1
 800488a:	701a      	strb	r2, [r3, #0]
 800488c:	e790      	b.n	80047b0 <_dtoa_r+0x608>
 800488e:	4ba6      	ldr	r3, [pc, #664]	; (8004b28 <_dtoa_r+0x980>)
 8004890:	2200      	movs	r2, #0
 8004892:	f7fb feb1 	bl	80005f8 <__aeabi_dmul>
 8004896:	2200      	movs	r2, #0
 8004898:	2300      	movs	r3, #0
 800489a:	4606      	mov	r6, r0
 800489c:	460f      	mov	r7, r1
 800489e:	f7fc f913 	bl	8000ac8 <__aeabi_dcmpeq>
 80048a2:	2800      	cmp	r0, #0
 80048a4:	d09d      	beq.n	80047e2 <_dtoa_r+0x63a>
 80048a6:	e7cf      	b.n	8004848 <_dtoa_r+0x6a0>
 80048a8:	9a08      	ldr	r2, [sp, #32]
 80048aa:	2a00      	cmp	r2, #0
 80048ac:	f000 80d7 	beq.w	8004a5e <_dtoa_r+0x8b6>
 80048b0:	9a06      	ldr	r2, [sp, #24]
 80048b2:	2a01      	cmp	r2, #1
 80048b4:	f300 80ba 	bgt.w	8004a2c <_dtoa_r+0x884>
 80048b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048ba:	2a00      	cmp	r2, #0
 80048bc:	f000 80b2 	beq.w	8004a24 <_dtoa_r+0x87c>
 80048c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80048c4:	9e07      	ldr	r6, [sp, #28]
 80048c6:	9d04      	ldr	r5, [sp, #16]
 80048c8:	9a04      	ldr	r2, [sp, #16]
 80048ca:	441a      	add	r2, r3
 80048cc:	9204      	str	r2, [sp, #16]
 80048ce:	9a05      	ldr	r2, [sp, #20]
 80048d0:	2101      	movs	r1, #1
 80048d2:	441a      	add	r2, r3
 80048d4:	4620      	mov	r0, r4
 80048d6:	9205      	str	r2, [sp, #20]
 80048d8:	f000 fb6a 	bl	8004fb0 <__i2b>
 80048dc:	4607      	mov	r7, r0
 80048de:	2d00      	cmp	r5, #0
 80048e0:	dd0c      	ble.n	80048fc <_dtoa_r+0x754>
 80048e2:	9b05      	ldr	r3, [sp, #20]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	dd09      	ble.n	80048fc <_dtoa_r+0x754>
 80048e8:	42ab      	cmp	r3, r5
 80048ea:	9a04      	ldr	r2, [sp, #16]
 80048ec:	bfa8      	it	ge
 80048ee:	462b      	movge	r3, r5
 80048f0:	1ad2      	subs	r2, r2, r3
 80048f2:	9204      	str	r2, [sp, #16]
 80048f4:	9a05      	ldr	r2, [sp, #20]
 80048f6:	1aed      	subs	r5, r5, r3
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	9305      	str	r3, [sp, #20]
 80048fc:	9b07      	ldr	r3, [sp, #28]
 80048fe:	b31b      	cbz	r3, 8004948 <_dtoa_r+0x7a0>
 8004900:	9b08      	ldr	r3, [sp, #32]
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 80af 	beq.w	8004a66 <_dtoa_r+0x8be>
 8004908:	2e00      	cmp	r6, #0
 800490a:	dd13      	ble.n	8004934 <_dtoa_r+0x78c>
 800490c:	4639      	mov	r1, r7
 800490e:	4632      	mov	r2, r6
 8004910:	4620      	mov	r0, r4
 8004912:	f000 fc0d 	bl	8005130 <__pow5mult>
 8004916:	ee18 2a10 	vmov	r2, s16
 800491a:	4601      	mov	r1, r0
 800491c:	4607      	mov	r7, r0
 800491e:	4620      	mov	r0, r4
 8004920:	f000 fb5c 	bl	8004fdc <__multiply>
 8004924:	ee18 1a10 	vmov	r1, s16
 8004928:	4680      	mov	r8, r0
 800492a:	4620      	mov	r0, r4
 800492c:	f000 fa88 	bl	8004e40 <_Bfree>
 8004930:	ee08 8a10 	vmov	s16, r8
 8004934:	9b07      	ldr	r3, [sp, #28]
 8004936:	1b9a      	subs	r2, r3, r6
 8004938:	d006      	beq.n	8004948 <_dtoa_r+0x7a0>
 800493a:	ee18 1a10 	vmov	r1, s16
 800493e:	4620      	mov	r0, r4
 8004940:	f000 fbf6 	bl	8005130 <__pow5mult>
 8004944:	ee08 0a10 	vmov	s16, r0
 8004948:	2101      	movs	r1, #1
 800494a:	4620      	mov	r0, r4
 800494c:	f000 fb30 	bl	8004fb0 <__i2b>
 8004950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004952:	2b00      	cmp	r3, #0
 8004954:	4606      	mov	r6, r0
 8004956:	f340 8088 	ble.w	8004a6a <_dtoa_r+0x8c2>
 800495a:	461a      	mov	r2, r3
 800495c:	4601      	mov	r1, r0
 800495e:	4620      	mov	r0, r4
 8004960:	f000 fbe6 	bl	8005130 <__pow5mult>
 8004964:	9b06      	ldr	r3, [sp, #24]
 8004966:	2b01      	cmp	r3, #1
 8004968:	4606      	mov	r6, r0
 800496a:	f340 8081 	ble.w	8004a70 <_dtoa_r+0x8c8>
 800496e:	f04f 0800 	mov.w	r8, #0
 8004972:	6933      	ldr	r3, [r6, #16]
 8004974:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004978:	6918      	ldr	r0, [r3, #16]
 800497a:	f000 fac9 	bl	8004f10 <__hi0bits>
 800497e:	f1c0 0020 	rsb	r0, r0, #32
 8004982:	9b05      	ldr	r3, [sp, #20]
 8004984:	4418      	add	r0, r3
 8004986:	f010 001f 	ands.w	r0, r0, #31
 800498a:	f000 8092 	beq.w	8004ab2 <_dtoa_r+0x90a>
 800498e:	f1c0 0320 	rsb	r3, r0, #32
 8004992:	2b04      	cmp	r3, #4
 8004994:	f340 808a 	ble.w	8004aac <_dtoa_r+0x904>
 8004998:	f1c0 001c 	rsb	r0, r0, #28
 800499c:	9b04      	ldr	r3, [sp, #16]
 800499e:	4403      	add	r3, r0
 80049a0:	9304      	str	r3, [sp, #16]
 80049a2:	9b05      	ldr	r3, [sp, #20]
 80049a4:	4403      	add	r3, r0
 80049a6:	4405      	add	r5, r0
 80049a8:	9305      	str	r3, [sp, #20]
 80049aa:	9b04      	ldr	r3, [sp, #16]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	dd07      	ble.n	80049c0 <_dtoa_r+0x818>
 80049b0:	ee18 1a10 	vmov	r1, s16
 80049b4:	461a      	mov	r2, r3
 80049b6:	4620      	mov	r0, r4
 80049b8:	f000 fc14 	bl	80051e4 <__lshift>
 80049bc:	ee08 0a10 	vmov	s16, r0
 80049c0:	9b05      	ldr	r3, [sp, #20]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	dd05      	ble.n	80049d2 <_dtoa_r+0x82a>
 80049c6:	4631      	mov	r1, r6
 80049c8:	461a      	mov	r2, r3
 80049ca:	4620      	mov	r0, r4
 80049cc:	f000 fc0a 	bl	80051e4 <__lshift>
 80049d0:	4606      	mov	r6, r0
 80049d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d06e      	beq.n	8004ab6 <_dtoa_r+0x90e>
 80049d8:	ee18 0a10 	vmov	r0, s16
 80049dc:	4631      	mov	r1, r6
 80049de:	f000 fc71 	bl	80052c4 <__mcmp>
 80049e2:	2800      	cmp	r0, #0
 80049e4:	da67      	bge.n	8004ab6 <_dtoa_r+0x90e>
 80049e6:	9b00      	ldr	r3, [sp, #0]
 80049e8:	3b01      	subs	r3, #1
 80049ea:	ee18 1a10 	vmov	r1, s16
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	220a      	movs	r2, #10
 80049f2:	2300      	movs	r3, #0
 80049f4:	4620      	mov	r0, r4
 80049f6:	f000 fa45 	bl	8004e84 <__multadd>
 80049fa:	9b08      	ldr	r3, [sp, #32]
 80049fc:	ee08 0a10 	vmov	s16, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 81b1 	beq.w	8004d68 <_dtoa_r+0xbc0>
 8004a06:	2300      	movs	r3, #0
 8004a08:	4639      	mov	r1, r7
 8004a0a:	220a      	movs	r2, #10
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	f000 fa39 	bl	8004e84 <__multadd>
 8004a12:	9b02      	ldr	r3, [sp, #8]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	4607      	mov	r7, r0
 8004a18:	f300 808e 	bgt.w	8004b38 <_dtoa_r+0x990>
 8004a1c:	9b06      	ldr	r3, [sp, #24]
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	dc51      	bgt.n	8004ac6 <_dtoa_r+0x91e>
 8004a22:	e089      	b.n	8004b38 <_dtoa_r+0x990>
 8004a24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004a26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004a2a:	e74b      	b.n	80048c4 <_dtoa_r+0x71c>
 8004a2c:	9b03      	ldr	r3, [sp, #12]
 8004a2e:	1e5e      	subs	r6, r3, #1
 8004a30:	9b07      	ldr	r3, [sp, #28]
 8004a32:	42b3      	cmp	r3, r6
 8004a34:	bfbf      	itttt	lt
 8004a36:	9b07      	ldrlt	r3, [sp, #28]
 8004a38:	9607      	strlt	r6, [sp, #28]
 8004a3a:	1af2      	sublt	r2, r6, r3
 8004a3c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004a3e:	bfb6      	itet	lt
 8004a40:	189b      	addlt	r3, r3, r2
 8004a42:	1b9e      	subge	r6, r3, r6
 8004a44:	930a      	strlt	r3, [sp, #40]	; 0x28
 8004a46:	9b03      	ldr	r3, [sp, #12]
 8004a48:	bfb8      	it	lt
 8004a4a:	2600      	movlt	r6, #0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	bfb7      	itett	lt
 8004a50:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8004a54:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004a58:	1a9d      	sublt	r5, r3, r2
 8004a5a:	2300      	movlt	r3, #0
 8004a5c:	e734      	b.n	80048c8 <_dtoa_r+0x720>
 8004a5e:	9e07      	ldr	r6, [sp, #28]
 8004a60:	9d04      	ldr	r5, [sp, #16]
 8004a62:	9f08      	ldr	r7, [sp, #32]
 8004a64:	e73b      	b.n	80048de <_dtoa_r+0x736>
 8004a66:	9a07      	ldr	r2, [sp, #28]
 8004a68:	e767      	b.n	800493a <_dtoa_r+0x792>
 8004a6a:	9b06      	ldr	r3, [sp, #24]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	dc18      	bgt.n	8004aa2 <_dtoa_r+0x8fa>
 8004a70:	f1ba 0f00 	cmp.w	sl, #0
 8004a74:	d115      	bne.n	8004aa2 <_dtoa_r+0x8fa>
 8004a76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004a7a:	b993      	cbnz	r3, 8004aa2 <_dtoa_r+0x8fa>
 8004a7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004a80:	0d1b      	lsrs	r3, r3, #20
 8004a82:	051b      	lsls	r3, r3, #20
 8004a84:	b183      	cbz	r3, 8004aa8 <_dtoa_r+0x900>
 8004a86:	9b04      	ldr	r3, [sp, #16]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	9304      	str	r3, [sp, #16]
 8004a8c:	9b05      	ldr	r3, [sp, #20]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	9305      	str	r3, [sp, #20]
 8004a92:	f04f 0801 	mov.w	r8, #1
 8004a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f47f af6a 	bne.w	8004972 <_dtoa_r+0x7ca>
 8004a9e:	2001      	movs	r0, #1
 8004aa0:	e76f      	b.n	8004982 <_dtoa_r+0x7da>
 8004aa2:	f04f 0800 	mov.w	r8, #0
 8004aa6:	e7f6      	b.n	8004a96 <_dtoa_r+0x8ee>
 8004aa8:	4698      	mov	r8, r3
 8004aaa:	e7f4      	b.n	8004a96 <_dtoa_r+0x8ee>
 8004aac:	f43f af7d 	beq.w	80049aa <_dtoa_r+0x802>
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	301c      	adds	r0, #28
 8004ab4:	e772      	b.n	800499c <_dtoa_r+0x7f4>
 8004ab6:	9b03      	ldr	r3, [sp, #12]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	dc37      	bgt.n	8004b2c <_dtoa_r+0x984>
 8004abc:	9b06      	ldr	r3, [sp, #24]
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	dd34      	ble.n	8004b2c <_dtoa_r+0x984>
 8004ac2:	9b03      	ldr	r3, [sp, #12]
 8004ac4:	9302      	str	r3, [sp, #8]
 8004ac6:	9b02      	ldr	r3, [sp, #8]
 8004ac8:	b96b      	cbnz	r3, 8004ae6 <_dtoa_r+0x93e>
 8004aca:	4631      	mov	r1, r6
 8004acc:	2205      	movs	r2, #5
 8004ace:	4620      	mov	r0, r4
 8004ad0:	f000 f9d8 	bl	8004e84 <__multadd>
 8004ad4:	4601      	mov	r1, r0
 8004ad6:	4606      	mov	r6, r0
 8004ad8:	ee18 0a10 	vmov	r0, s16
 8004adc:	f000 fbf2 	bl	80052c4 <__mcmp>
 8004ae0:	2800      	cmp	r0, #0
 8004ae2:	f73f adbb 	bgt.w	800465c <_dtoa_r+0x4b4>
 8004ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ae8:	9d01      	ldr	r5, [sp, #4]
 8004aea:	43db      	mvns	r3, r3
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	f04f 0800 	mov.w	r8, #0
 8004af2:	4631      	mov	r1, r6
 8004af4:	4620      	mov	r0, r4
 8004af6:	f000 f9a3 	bl	8004e40 <_Bfree>
 8004afa:	2f00      	cmp	r7, #0
 8004afc:	f43f aea4 	beq.w	8004848 <_dtoa_r+0x6a0>
 8004b00:	f1b8 0f00 	cmp.w	r8, #0
 8004b04:	d005      	beq.n	8004b12 <_dtoa_r+0x96a>
 8004b06:	45b8      	cmp	r8, r7
 8004b08:	d003      	beq.n	8004b12 <_dtoa_r+0x96a>
 8004b0a:	4641      	mov	r1, r8
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	f000 f997 	bl	8004e40 <_Bfree>
 8004b12:	4639      	mov	r1, r7
 8004b14:	4620      	mov	r0, r4
 8004b16:	f000 f993 	bl	8004e40 <_Bfree>
 8004b1a:	e695      	b.n	8004848 <_dtoa_r+0x6a0>
 8004b1c:	2600      	movs	r6, #0
 8004b1e:	4637      	mov	r7, r6
 8004b20:	e7e1      	b.n	8004ae6 <_dtoa_r+0x93e>
 8004b22:	9700      	str	r7, [sp, #0]
 8004b24:	4637      	mov	r7, r6
 8004b26:	e599      	b.n	800465c <_dtoa_r+0x4b4>
 8004b28:	40240000 	.word	0x40240000
 8004b2c:	9b08      	ldr	r3, [sp, #32]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f000 80ca 	beq.w	8004cc8 <_dtoa_r+0xb20>
 8004b34:	9b03      	ldr	r3, [sp, #12]
 8004b36:	9302      	str	r3, [sp, #8]
 8004b38:	2d00      	cmp	r5, #0
 8004b3a:	dd05      	ble.n	8004b48 <_dtoa_r+0x9a0>
 8004b3c:	4639      	mov	r1, r7
 8004b3e:	462a      	mov	r2, r5
 8004b40:	4620      	mov	r0, r4
 8004b42:	f000 fb4f 	bl	80051e4 <__lshift>
 8004b46:	4607      	mov	r7, r0
 8004b48:	f1b8 0f00 	cmp.w	r8, #0
 8004b4c:	d05b      	beq.n	8004c06 <_dtoa_r+0xa5e>
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	4620      	mov	r0, r4
 8004b52:	f000 f935 	bl	8004dc0 <_Balloc>
 8004b56:	4605      	mov	r5, r0
 8004b58:	b928      	cbnz	r0, 8004b66 <_dtoa_r+0x9be>
 8004b5a:	4b87      	ldr	r3, [pc, #540]	; (8004d78 <_dtoa_r+0xbd0>)
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004b62:	f7ff bb3b 	b.w	80041dc <_dtoa_r+0x34>
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	3202      	adds	r2, #2
 8004b6a:	0092      	lsls	r2, r2, #2
 8004b6c:	f107 010c 	add.w	r1, r7, #12
 8004b70:	300c      	adds	r0, #12
 8004b72:	f000 f90b 	bl	8004d8c <memcpy>
 8004b76:	2201      	movs	r2, #1
 8004b78:	4629      	mov	r1, r5
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	f000 fb32 	bl	80051e4 <__lshift>
 8004b80:	9b01      	ldr	r3, [sp, #4]
 8004b82:	f103 0901 	add.w	r9, r3, #1
 8004b86:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	9305      	str	r3, [sp, #20]
 8004b8e:	f00a 0301 	and.w	r3, sl, #1
 8004b92:	46b8      	mov	r8, r7
 8004b94:	9304      	str	r3, [sp, #16]
 8004b96:	4607      	mov	r7, r0
 8004b98:	4631      	mov	r1, r6
 8004b9a:	ee18 0a10 	vmov	r0, s16
 8004b9e:	f7ff fa75 	bl	800408c <quorem>
 8004ba2:	4641      	mov	r1, r8
 8004ba4:	9002      	str	r0, [sp, #8]
 8004ba6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004baa:	ee18 0a10 	vmov	r0, s16
 8004bae:	f000 fb89 	bl	80052c4 <__mcmp>
 8004bb2:	463a      	mov	r2, r7
 8004bb4:	9003      	str	r0, [sp, #12]
 8004bb6:	4631      	mov	r1, r6
 8004bb8:	4620      	mov	r0, r4
 8004bba:	f000 fb9f 	bl	80052fc <__mdiff>
 8004bbe:	68c2      	ldr	r2, [r0, #12]
 8004bc0:	f109 3bff 	add.w	fp, r9, #4294967295
 8004bc4:	4605      	mov	r5, r0
 8004bc6:	bb02      	cbnz	r2, 8004c0a <_dtoa_r+0xa62>
 8004bc8:	4601      	mov	r1, r0
 8004bca:	ee18 0a10 	vmov	r0, s16
 8004bce:	f000 fb79 	bl	80052c4 <__mcmp>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	4629      	mov	r1, r5
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	9207      	str	r2, [sp, #28]
 8004bda:	f000 f931 	bl	8004e40 <_Bfree>
 8004bde:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004be2:	ea43 0102 	orr.w	r1, r3, r2
 8004be6:	9b04      	ldr	r3, [sp, #16]
 8004be8:	430b      	orrs	r3, r1
 8004bea:	464d      	mov	r5, r9
 8004bec:	d10f      	bne.n	8004c0e <_dtoa_r+0xa66>
 8004bee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004bf2:	d02a      	beq.n	8004c4a <_dtoa_r+0xaa2>
 8004bf4:	9b03      	ldr	r3, [sp, #12]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	dd02      	ble.n	8004c00 <_dtoa_r+0xa58>
 8004bfa:	9b02      	ldr	r3, [sp, #8]
 8004bfc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004c00:	f88b a000 	strb.w	sl, [fp]
 8004c04:	e775      	b.n	8004af2 <_dtoa_r+0x94a>
 8004c06:	4638      	mov	r0, r7
 8004c08:	e7ba      	b.n	8004b80 <_dtoa_r+0x9d8>
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	e7e2      	b.n	8004bd4 <_dtoa_r+0xa2c>
 8004c0e:	9b03      	ldr	r3, [sp, #12]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	db04      	blt.n	8004c1e <_dtoa_r+0xa76>
 8004c14:	9906      	ldr	r1, [sp, #24]
 8004c16:	430b      	orrs	r3, r1
 8004c18:	9904      	ldr	r1, [sp, #16]
 8004c1a:	430b      	orrs	r3, r1
 8004c1c:	d122      	bne.n	8004c64 <_dtoa_r+0xabc>
 8004c1e:	2a00      	cmp	r2, #0
 8004c20:	ddee      	ble.n	8004c00 <_dtoa_r+0xa58>
 8004c22:	ee18 1a10 	vmov	r1, s16
 8004c26:	2201      	movs	r2, #1
 8004c28:	4620      	mov	r0, r4
 8004c2a:	f000 fadb 	bl	80051e4 <__lshift>
 8004c2e:	4631      	mov	r1, r6
 8004c30:	ee08 0a10 	vmov	s16, r0
 8004c34:	f000 fb46 	bl	80052c4 <__mcmp>
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	dc03      	bgt.n	8004c44 <_dtoa_r+0xa9c>
 8004c3c:	d1e0      	bne.n	8004c00 <_dtoa_r+0xa58>
 8004c3e:	f01a 0f01 	tst.w	sl, #1
 8004c42:	d0dd      	beq.n	8004c00 <_dtoa_r+0xa58>
 8004c44:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004c48:	d1d7      	bne.n	8004bfa <_dtoa_r+0xa52>
 8004c4a:	2339      	movs	r3, #57	; 0x39
 8004c4c:	f88b 3000 	strb.w	r3, [fp]
 8004c50:	462b      	mov	r3, r5
 8004c52:	461d      	mov	r5, r3
 8004c54:	3b01      	subs	r3, #1
 8004c56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004c5a:	2a39      	cmp	r2, #57	; 0x39
 8004c5c:	d071      	beq.n	8004d42 <_dtoa_r+0xb9a>
 8004c5e:	3201      	adds	r2, #1
 8004c60:	701a      	strb	r2, [r3, #0]
 8004c62:	e746      	b.n	8004af2 <_dtoa_r+0x94a>
 8004c64:	2a00      	cmp	r2, #0
 8004c66:	dd07      	ble.n	8004c78 <_dtoa_r+0xad0>
 8004c68:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004c6c:	d0ed      	beq.n	8004c4a <_dtoa_r+0xaa2>
 8004c6e:	f10a 0301 	add.w	r3, sl, #1
 8004c72:	f88b 3000 	strb.w	r3, [fp]
 8004c76:	e73c      	b.n	8004af2 <_dtoa_r+0x94a>
 8004c78:	9b05      	ldr	r3, [sp, #20]
 8004c7a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8004c7e:	4599      	cmp	r9, r3
 8004c80:	d047      	beq.n	8004d12 <_dtoa_r+0xb6a>
 8004c82:	ee18 1a10 	vmov	r1, s16
 8004c86:	2300      	movs	r3, #0
 8004c88:	220a      	movs	r2, #10
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	f000 f8fa 	bl	8004e84 <__multadd>
 8004c90:	45b8      	cmp	r8, r7
 8004c92:	ee08 0a10 	vmov	s16, r0
 8004c96:	f04f 0300 	mov.w	r3, #0
 8004c9a:	f04f 020a 	mov.w	r2, #10
 8004c9e:	4641      	mov	r1, r8
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	d106      	bne.n	8004cb2 <_dtoa_r+0xb0a>
 8004ca4:	f000 f8ee 	bl	8004e84 <__multadd>
 8004ca8:	4680      	mov	r8, r0
 8004caa:	4607      	mov	r7, r0
 8004cac:	f109 0901 	add.w	r9, r9, #1
 8004cb0:	e772      	b.n	8004b98 <_dtoa_r+0x9f0>
 8004cb2:	f000 f8e7 	bl	8004e84 <__multadd>
 8004cb6:	4639      	mov	r1, r7
 8004cb8:	4680      	mov	r8, r0
 8004cba:	2300      	movs	r3, #0
 8004cbc:	220a      	movs	r2, #10
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	f000 f8e0 	bl	8004e84 <__multadd>
 8004cc4:	4607      	mov	r7, r0
 8004cc6:	e7f1      	b.n	8004cac <_dtoa_r+0xb04>
 8004cc8:	9b03      	ldr	r3, [sp, #12]
 8004cca:	9302      	str	r3, [sp, #8]
 8004ccc:	9d01      	ldr	r5, [sp, #4]
 8004cce:	ee18 0a10 	vmov	r0, s16
 8004cd2:	4631      	mov	r1, r6
 8004cd4:	f7ff f9da 	bl	800408c <quorem>
 8004cd8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004cdc:	9b01      	ldr	r3, [sp, #4]
 8004cde:	f805 ab01 	strb.w	sl, [r5], #1
 8004ce2:	1aea      	subs	r2, r5, r3
 8004ce4:	9b02      	ldr	r3, [sp, #8]
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	dd09      	ble.n	8004cfe <_dtoa_r+0xb56>
 8004cea:	ee18 1a10 	vmov	r1, s16
 8004cee:	2300      	movs	r3, #0
 8004cf0:	220a      	movs	r2, #10
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	f000 f8c6 	bl	8004e84 <__multadd>
 8004cf8:	ee08 0a10 	vmov	s16, r0
 8004cfc:	e7e7      	b.n	8004cce <_dtoa_r+0xb26>
 8004cfe:	9b02      	ldr	r3, [sp, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	bfc8      	it	gt
 8004d04:	461d      	movgt	r5, r3
 8004d06:	9b01      	ldr	r3, [sp, #4]
 8004d08:	bfd8      	it	le
 8004d0a:	2501      	movle	r5, #1
 8004d0c:	441d      	add	r5, r3
 8004d0e:	f04f 0800 	mov.w	r8, #0
 8004d12:	ee18 1a10 	vmov	r1, s16
 8004d16:	2201      	movs	r2, #1
 8004d18:	4620      	mov	r0, r4
 8004d1a:	f000 fa63 	bl	80051e4 <__lshift>
 8004d1e:	4631      	mov	r1, r6
 8004d20:	ee08 0a10 	vmov	s16, r0
 8004d24:	f000 face 	bl	80052c4 <__mcmp>
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	dc91      	bgt.n	8004c50 <_dtoa_r+0xaa8>
 8004d2c:	d102      	bne.n	8004d34 <_dtoa_r+0xb8c>
 8004d2e:	f01a 0f01 	tst.w	sl, #1
 8004d32:	d18d      	bne.n	8004c50 <_dtoa_r+0xaa8>
 8004d34:	462b      	mov	r3, r5
 8004d36:	461d      	mov	r5, r3
 8004d38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d3c:	2a30      	cmp	r2, #48	; 0x30
 8004d3e:	d0fa      	beq.n	8004d36 <_dtoa_r+0xb8e>
 8004d40:	e6d7      	b.n	8004af2 <_dtoa_r+0x94a>
 8004d42:	9a01      	ldr	r2, [sp, #4]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d184      	bne.n	8004c52 <_dtoa_r+0xaaa>
 8004d48:	9b00      	ldr	r3, [sp, #0]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	2331      	movs	r3, #49	; 0x31
 8004d50:	7013      	strb	r3, [r2, #0]
 8004d52:	e6ce      	b.n	8004af2 <_dtoa_r+0x94a>
 8004d54:	4b09      	ldr	r3, [pc, #36]	; (8004d7c <_dtoa_r+0xbd4>)
 8004d56:	f7ff ba95 	b.w	8004284 <_dtoa_r+0xdc>
 8004d5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f47f aa6e 	bne.w	800423e <_dtoa_r+0x96>
 8004d62:	4b07      	ldr	r3, [pc, #28]	; (8004d80 <_dtoa_r+0xbd8>)
 8004d64:	f7ff ba8e 	b.w	8004284 <_dtoa_r+0xdc>
 8004d68:	9b02      	ldr	r3, [sp, #8]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	dcae      	bgt.n	8004ccc <_dtoa_r+0xb24>
 8004d6e:	9b06      	ldr	r3, [sp, #24]
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	f73f aea8 	bgt.w	8004ac6 <_dtoa_r+0x91e>
 8004d76:	e7a9      	b.n	8004ccc <_dtoa_r+0xb24>
 8004d78:	08006463 	.word	0x08006463
 8004d7c:	080063c0 	.word	0x080063c0
 8004d80:	080063e4 	.word	0x080063e4

08004d84 <_localeconv_r>:
 8004d84:	4800      	ldr	r0, [pc, #0]	; (8004d88 <_localeconv_r+0x4>)
 8004d86:	4770      	bx	lr
 8004d88:	20000160 	.word	0x20000160

08004d8c <memcpy>:
 8004d8c:	440a      	add	r2, r1
 8004d8e:	4291      	cmp	r1, r2
 8004d90:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d94:	d100      	bne.n	8004d98 <memcpy+0xc>
 8004d96:	4770      	bx	lr
 8004d98:	b510      	push	{r4, lr}
 8004d9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004da2:	4291      	cmp	r1, r2
 8004da4:	d1f9      	bne.n	8004d9a <memcpy+0xe>
 8004da6:	bd10      	pop	{r4, pc}

08004da8 <__malloc_lock>:
 8004da8:	4801      	ldr	r0, [pc, #4]	; (8004db0 <__malloc_lock+0x8>)
 8004daa:	f000 bd30 	b.w	800580e <__retarget_lock_acquire_recursive>
 8004dae:	bf00      	nop
 8004db0:	200002d0 	.word	0x200002d0

08004db4 <__malloc_unlock>:
 8004db4:	4801      	ldr	r0, [pc, #4]	; (8004dbc <__malloc_unlock+0x8>)
 8004db6:	f000 bd2b 	b.w	8005810 <__retarget_lock_release_recursive>
 8004dba:	bf00      	nop
 8004dbc:	200002d0 	.word	0x200002d0

08004dc0 <_Balloc>:
 8004dc0:	b570      	push	{r4, r5, r6, lr}
 8004dc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004dc4:	4604      	mov	r4, r0
 8004dc6:	460d      	mov	r5, r1
 8004dc8:	b976      	cbnz	r6, 8004de8 <_Balloc+0x28>
 8004dca:	2010      	movs	r0, #16
 8004dcc:	f7fe fbd4 	bl	8003578 <malloc>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	6260      	str	r0, [r4, #36]	; 0x24
 8004dd4:	b920      	cbnz	r0, 8004de0 <_Balloc+0x20>
 8004dd6:	4b18      	ldr	r3, [pc, #96]	; (8004e38 <_Balloc+0x78>)
 8004dd8:	4818      	ldr	r0, [pc, #96]	; (8004e3c <_Balloc+0x7c>)
 8004dda:	2166      	movs	r1, #102	; 0x66
 8004ddc:	f000 fce6 	bl	80057ac <__assert_func>
 8004de0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004de4:	6006      	str	r6, [r0, #0]
 8004de6:	60c6      	str	r6, [r0, #12]
 8004de8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004dea:	68f3      	ldr	r3, [r6, #12]
 8004dec:	b183      	cbz	r3, 8004e10 <_Balloc+0x50>
 8004dee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004df6:	b9b8      	cbnz	r0, 8004e28 <_Balloc+0x68>
 8004df8:	2101      	movs	r1, #1
 8004dfa:	fa01 f605 	lsl.w	r6, r1, r5
 8004dfe:	1d72      	adds	r2, r6, #5
 8004e00:	0092      	lsls	r2, r2, #2
 8004e02:	4620      	mov	r0, r4
 8004e04:	f000 fb60 	bl	80054c8 <_calloc_r>
 8004e08:	b160      	cbz	r0, 8004e24 <_Balloc+0x64>
 8004e0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004e0e:	e00e      	b.n	8004e2e <_Balloc+0x6e>
 8004e10:	2221      	movs	r2, #33	; 0x21
 8004e12:	2104      	movs	r1, #4
 8004e14:	4620      	mov	r0, r4
 8004e16:	f000 fb57 	bl	80054c8 <_calloc_r>
 8004e1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e1c:	60f0      	str	r0, [r6, #12]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1e4      	bne.n	8004dee <_Balloc+0x2e>
 8004e24:	2000      	movs	r0, #0
 8004e26:	bd70      	pop	{r4, r5, r6, pc}
 8004e28:	6802      	ldr	r2, [r0, #0]
 8004e2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004e2e:	2300      	movs	r3, #0
 8004e30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004e34:	e7f7      	b.n	8004e26 <_Balloc+0x66>
 8004e36:	bf00      	nop
 8004e38:	080063f1 	.word	0x080063f1
 8004e3c:	08006474 	.word	0x08006474

08004e40 <_Bfree>:
 8004e40:	b570      	push	{r4, r5, r6, lr}
 8004e42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004e44:	4605      	mov	r5, r0
 8004e46:	460c      	mov	r4, r1
 8004e48:	b976      	cbnz	r6, 8004e68 <_Bfree+0x28>
 8004e4a:	2010      	movs	r0, #16
 8004e4c:	f7fe fb94 	bl	8003578 <malloc>
 8004e50:	4602      	mov	r2, r0
 8004e52:	6268      	str	r0, [r5, #36]	; 0x24
 8004e54:	b920      	cbnz	r0, 8004e60 <_Bfree+0x20>
 8004e56:	4b09      	ldr	r3, [pc, #36]	; (8004e7c <_Bfree+0x3c>)
 8004e58:	4809      	ldr	r0, [pc, #36]	; (8004e80 <_Bfree+0x40>)
 8004e5a:	218a      	movs	r1, #138	; 0x8a
 8004e5c:	f000 fca6 	bl	80057ac <__assert_func>
 8004e60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004e64:	6006      	str	r6, [r0, #0]
 8004e66:	60c6      	str	r6, [r0, #12]
 8004e68:	b13c      	cbz	r4, 8004e7a <_Bfree+0x3a>
 8004e6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004e6c:	6862      	ldr	r2, [r4, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e74:	6021      	str	r1, [r4, #0]
 8004e76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004e7a:	bd70      	pop	{r4, r5, r6, pc}
 8004e7c:	080063f1 	.word	0x080063f1
 8004e80:	08006474 	.word	0x08006474

08004e84 <__multadd>:
 8004e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e88:	690d      	ldr	r5, [r1, #16]
 8004e8a:	4607      	mov	r7, r0
 8004e8c:	460c      	mov	r4, r1
 8004e8e:	461e      	mov	r6, r3
 8004e90:	f101 0c14 	add.w	ip, r1, #20
 8004e94:	2000      	movs	r0, #0
 8004e96:	f8dc 3000 	ldr.w	r3, [ip]
 8004e9a:	b299      	uxth	r1, r3
 8004e9c:	fb02 6101 	mla	r1, r2, r1, r6
 8004ea0:	0c1e      	lsrs	r6, r3, #16
 8004ea2:	0c0b      	lsrs	r3, r1, #16
 8004ea4:	fb02 3306 	mla	r3, r2, r6, r3
 8004ea8:	b289      	uxth	r1, r1
 8004eaa:	3001      	adds	r0, #1
 8004eac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004eb0:	4285      	cmp	r5, r0
 8004eb2:	f84c 1b04 	str.w	r1, [ip], #4
 8004eb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004eba:	dcec      	bgt.n	8004e96 <__multadd+0x12>
 8004ebc:	b30e      	cbz	r6, 8004f02 <__multadd+0x7e>
 8004ebe:	68a3      	ldr	r3, [r4, #8]
 8004ec0:	42ab      	cmp	r3, r5
 8004ec2:	dc19      	bgt.n	8004ef8 <__multadd+0x74>
 8004ec4:	6861      	ldr	r1, [r4, #4]
 8004ec6:	4638      	mov	r0, r7
 8004ec8:	3101      	adds	r1, #1
 8004eca:	f7ff ff79 	bl	8004dc0 <_Balloc>
 8004ece:	4680      	mov	r8, r0
 8004ed0:	b928      	cbnz	r0, 8004ede <__multadd+0x5a>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	4b0c      	ldr	r3, [pc, #48]	; (8004f08 <__multadd+0x84>)
 8004ed6:	480d      	ldr	r0, [pc, #52]	; (8004f0c <__multadd+0x88>)
 8004ed8:	21b5      	movs	r1, #181	; 0xb5
 8004eda:	f000 fc67 	bl	80057ac <__assert_func>
 8004ede:	6922      	ldr	r2, [r4, #16]
 8004ee0:	3202      	adds	r2, #2
 8004ee2:	f104 010c 	add.w	r1, r4, #12
 8004ee6:	0092      	lsls	r2, r2, #2
 8004ee8:	300c      	adds	r0, #12
 8004eea:	f7ff ff4f 	bl	8004d8c <memcpy>
 8004eee:	4621      	mov	r1, r4
 8004ef0:	4638      	mov	r0, r7
 8004ef2:	f7ff ffa5 	bl	8004e40 <_Bfree>
 8004ef6:	4644      	mov	r4, r8
 8004ef8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004efc:	3501      	adds	r5, #1
 8004efe:	615e      	str	r6, [r3, #20]
 8004f00:	6125      	str	r5, [r4, #16]
 8004f02:	4620      	mov	r0, r4
 8004f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f08:	08006463 	.word	0x08006463
 8004f0c:	08006474 	.word	0x08006474

08004f10 <__hi0bits>:
 8004f10:	0c03      	lsrs	r3, r0, #16
 8004f12:	041b      	lsls	r3, r3, #16
 8004f14:	b9d3      	cbnz	r3, 8004f4c <__hi0bits+0x3c>
 8004f16:	0400      	lsls	r0, r0, #16
 8004f18:	2310      	movs	r3, #16
 8004f1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004f1e:	bf04      	itt	eq
 8004f20:	0200      	lsleq	r0, r0, #8
 8004f22:	3308      	addeq	r3, #8
 8004f24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004f28:	bf04      	itt	eq
 8004f2a:	0100      	lsleq	r0, r0, #4
 8004f2c:	3304      	addeq	r3, #4
 8004f2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004f32:	bf04      	itt	eq
 8004f34:	0080      	lsleq	r0, r0, #2
 8004f36:	3302      	addeq	r3, #2
 8004f38:	2800      	cmp	r0, #0
 8004f3a:	db05      	blt.n	8004f48 <__hi0bits+0x38>
 8004f3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004f40:	f103 0301 	add.w	r3, r3, #1
 8004f44:	bf08      	it	eq
 8004f46:	2320      	moveq	r3, #32
 8004f48:	4618      	mov	r0, r3
 8004f4a:	4770      	bx	lr
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	e7e4      	b.n	8004f1a <__hi0bits+0xa>

08004f50 <__lo0bits>:
 8004f50:	6803      	ldr	r3, [r0, #0]
 8004f52:	f013 0207 	ands.w	r2, r3, #7
 8004f56:	4601      	mov	r1, r0
 8004f58:	d00b      	beq.n	8004f72 <__lo0bits+0x22>
 8004f5a:	07da      	lsls	r2, r3, #31
 8004f5c:	d423      	bmi.n	8004fa6 <__lo0bits+0x56>
 8004f5e:	0798      	lsls	r0, r3, #30
 8004f60:	bf49      	itett	mi
 8004f62:	085b      	lsrmi	r3, r3, #1
 8004f64:	089b      	lsrpl	r3, r3, #2
 8004f66:	2001      	movmi	r0, #1
 8004f68:	600b      	strmi	r3, [r1, #0]
 8004f6a:	bf5c      	itt	pl
 8004f6c:	600b      	strpl	r3, [r1, #0]
 8004f6e:	2002      	movpl	r0, #2
 8004f70:	4770      	bx	lr
 8004f72:	b298      	uxth	r0, r3
 8004f74:	b9a8      	cbnz	r0, 8004fa2 <__lo0bits+0x52>
 8004f76:	0c1b      	lsrs	r3, r3, #16
 8004f78:	2010      	movs	r0, #16
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	b90a      	cbnz	r2, 8004f82 <__lo0bits+0x32>
 8004f7e:	3008      	adds	r0, #8
 8004f80:	0a1b      	lsrs	r3, r3, #8
 8004f82:	071a      	lsls	r2, r3, #28
 8004f84:	bf04      	itt	eq
 8004f86:	091b      	lsreq	r3, r3, #4
 8004f88:	3004      	addeq	r0, #4
 8004f8a:	079a      	lsls	r2, r3, #30
 8004f8c:	bf04      	itt	eq
 8004f8e:	089b      	lsreq	r3, r3, #2
 8004f90:	3002      	addeq	r0, #2
 8004f92:	07da      	lsls	r2, r3, #31
 8004f94:	d403      	bmi.n	8004f9e <__lo0bits+0x4e>
 8004f96:	085b      	lsrs	r3, r3, #1
 8004f98:	f100 0001 	add.w	r0, r0, #1
 8004f9c:	d005      	beq.n	8004faa <__lo0bits+0x5a>
 8004f9e:	600b      	str	r3, [r1, #0]
 8004fa0:	4770      	bx	lr
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	e7e9      	b.n	8004f7a <__lo0bits+0x2a>
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	4770      	bx	lr
 8004faa:	2020      	movs	r0, #32
 8004fac:	4770      	bx	lr
	...

08004fb0 <__i2b>:
 8004fb0:	b510      	push	{r4, lr}
 8004fb2:	460c      	mov	r4, r1
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	f7ff ff03 	bl	8004dc0 <_Balloc>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	b928      	cbnz	r0, 8004fca <__i2b+0x1a>
 8004fbe:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <__i2b+0x24>)
 8004fc0:	4805      	ldr	r0, [pc, #20]	; (8004fd8 <__i2b+0x28>)
 8004fc2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004fc6:	f000 fbf1 	bl	80057ac <__assert_func>
 8004fca:	2301      	movs	r3, #1
 8004fcc:	6144      	str	r4, [r0, #20]
 8004fce:	6103      	str	r3, [r0, #16]
 8004fd0:	bd10      	pop	{r4, pc}
 8004fd2:	bf00      	nop
 8004fd4:	08006463 	.word	0x08006463
 8004fd8:	08006474 	.word	0x08006474

08004fdc <__multiply>:
 8004fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe0:	4691      	mov	r9, r2
 8004fe2:	690a      	ldr	r2, [r1, #16]
 8004fe4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	bfb8      	it	lt
 8004fec:	460b      	movlt	r3, r1
 8004fee:	460c      	mov	r4, r1
 8004ff0:	bfbc      	itt	lt
 8004ff2:	464c      	movlt	r4, r9
 8004ff4:	4699      	movlt	r9, r3
 8004ff6:	6927      	ldr	r7, [r4, #16]
 8004ff8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004ffc:	68a3      	ldr	r3, [r4, #8]
 8004ffe:	6861      	ldr	r1, [r4, #4]
 8005000:	eb07 060a 	add.w	r6, r7, sl
 8005004:	42b3      	cmp	r3, r6
 8005006:	b085      	sub	sp, #20
 8005008:	bfb8      	it	lt
 800500a:	3101      	addlt	r1, #1
 800500c:	f7ff fed8 	bl	8004dc0 <_Balloc>
 8005010:	b930      	cbnz	r0, 8005020 <__multiply+0x44>
 8005012:	4602      	mov	r2, r0
 8005014:	4b44      	ldr	r3, [pc, #272]	; (8005128 <__multiply+0x14c>)
 8005016:	4845      	ldr	r0, [pc, #276]	; (800512c <__multiply+0x150>)
 8005018:	f240 115d 	movw	r1, #349	; 0x15d
 800501c:	f000 fbc6 	bl	80057ac <__assert_func>
 8005020:	f100 0514 	add.w	r5, r0, #20
 8005024:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005028:	462b      	mov	r3, r5
 800502a:	2200      	movs	r2, #0
 800502c:	4543      	cmp	r3, r8
 800502e:	d321      	bcc.n	8005074 <__multiply+0x98>
 8005030:	f104 0314 	add.w	r3, r4, #20
 8005034:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005038:	f109 0314 	add.w	r3, r9, #20
 800503c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005040:	9202      	str	r2, [sp, #8]
 8005042:	1b3a      	subs	r2, r7, r4
 8005044:	3a15      	subs	r2, #21
 8005046:	f022 0203 	bic.w	r2, r2, #3
 800504a:	3204      	adds	r2, #4
 800504c:	f104 0115 	add.w	r1, r4, #21
 8005050:	428f      	cmp	r7, r1
 8005052:	bf38      	it	cc
 8005054:	2204      	movcc	r2, #4
 8005056:	9201      	str	r2, [sp, #4]
 8005058:	9a02      	ldr	r2, [sp, #8]
 800505a:	9303      	str	r3, [sp, #12]
 800505c:	429a      	cmp	r2, r3
 800505e:	d80c      	bhi.n	800507a <__multiply+0x9e>
 8005060:	2e00      	cmp	r6, #0
 8005062:	dd03      	ble.n	800506c <__multiply+0x90>
 8005064:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005068:	2b00      	cmp	r3, #0
 800506a:	d05a      	beq.n	8005122 <__multiply+0x146>
 800506c:	6106      	str	r6, [r0, #16]
 800506e:	b005      	add	sp, #20
 8005070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005074:	f843 2b04 	str.w	r2, [r3], #4
 8005078:	e7d8      	b.n	800502c <__multiply+0x50>
 800507a:	f8b3 a000 	ldrh.w	sl, [r3]
 800507e:	f1ba 0f00 	cmp.w	sl, #0
 8005082:	d024      	beq.n	80050ce <__multiply+0xf2>
 8005084:	f104 0e14 	add.w	lr, r4, #20
 8005088:	46a9      	mov	r9, r5
 800508a:	f04f 0c00 	mov.w	ip, #0
 800508e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005092:	f8d9 1000 	ldr.w	r1, [r9]
 8005096:	fa1f fb82 	uxth.w	fp, r2
 800509a:	b289      	uxth	r1, r1
 800509c:	fb0a 110b 	mla	r1, sl, fp, r1
 80050a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80050a4:	f8d9 2000 	ldr.w	r2, [r9]
 80050a8:	4461      	add	r1, ip
 80050aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80050ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80050b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80050b6:	b289      	uxth	r1, r1
 80050b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80050bc:	4577      	cmp	r7, lr
 80050be:	f849 1b04 	str.w	r1, [r9], #4
 80050c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80050c6:	d8e2      	bhi.n	800508e <__multiply+0xb2>
 80050c8:	9a01      	ldr	r2, [sp, #4]
 80050ca:	f845 c002 	str.w	ip, [r5, r2]
 80050ce:	9a03      	ldr	r2, [sp, #12]
 80050d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80050d4:	3304      	adds	r3, #4
 80050d6:	f1b9 0f00 	cmp.w	r9, #0
 80050da:	d020      	beq.n	800511e <__multiply+0x142>
 80050dc:	6829      	ldr	r1, [r5, #0]
 80050de:	f104 0c14 	add.w	ip, r4, #20
 80050e2:	46ae      	mov	lr, r5
 80050e4:	f04f 0a00 	mov.w	sl, #0
 80050e8:	f8bc b000 	ldrh.w	fp, [ip]
 80050ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80050f0:	fb09 220b 	mla	r2, r9, fp, r2
 80050f4:	4492      	add	sl, r2
 80050f6:	b289      	uxth	r1, r1
 80050f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80050fc:	f84e 1b04 	str.w	r1, [lr], #4
 8005100:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005104:	f8be 1000 	ldrh.w	r1, [lr]
 8005108:	0c12      	lsrs	r2, r2, #16
 800510a:	fb09 1102 	mla	r1, r9, r2, r1
 800510e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005112:	4567      	cmp	r7, ip
 8005114:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005118:	d8e6      	bhi.n	80050e8 <__multiply+0x10c>
 800511a:	9a01      	ldr	r2, [sp, #4]
 800511c:	50a9      	str	r1, [r5, r2]
 800511e:	3504      	adds	r5, #4
 8005120:	e79a      	b.n	8005058 <__multiply+0x7c>
 8005122:	3e01      	subs	r6, #1
 8005124:	e79c      	b.n	8005060 <__multiply+0x84>
 8005126:	bf00      	nop
 8005128:	08006463 	.word	0x08006463
 800512c:	08006474 	.word	0x08006474

08005130 <__pow5mult>:
 8005130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005134:	4615      	mov	r5, r2
 8005136:	f012 0203 	ands.w	r2, r2, #3
 800513a:	4606      	mov	r6, r0
 800513c:	460f      	mov	r7, r1
 800513e:	d007      	beq.n	8005150 <__pow5mult+0x20>
 8005140:	4c25      	ldr	r4, [pc, #148]	; (80051d8 <__pow5mult+0xa8>)
 8005142:	3a01      	subs	r2, #1
 8005144:	2300      	movs	r3, #0
 8005146:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800514a:	f7ff fe9b 	bl	8004e84 <__multadd>
 800514e:	4607      	mov	r7, r0
 8005150:	10ad      	asrs	r5, r5, #2
 8005152:	d03d      	beq.n	80051d0 <__pow5mult+0xa0>
 8005154:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005156:	b97c      	cbnz	r4, 8005178 <__pow5mult+0x48>
 8005158:	2010      	movs	r0, #16
 800515a:	f7fe fa0d 	bl	8003578 <malloc>
 800515e:	4602      	mov	r2, r0
 8005160:	6270      	str	r0, [r6, #36]	; 0x24
 8005162:	b928      	cbnz	r0, 8005170 <__pow5mult+0x40>
 8005164:	4b1d      	ldr	r3, [pc, #116]	; (80051dc <__pow5mult+0xac>)
 8005166:	481e      	ldr	r0, [pc, #120]	; (80051e0 <__pow5mult+0xb0>)
 8005168:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800516c:	f000 fb1e 	bl	80057ac <__assert_func>
 8005170:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005174:	6004      	str	r4, [r0, #0]
 8005176:	60c4      	str	r4, [r0, #12]
 8005178:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800517c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005180:	b94c      	cbnz	r4, 8005196 <__pow5mult+0x66>
 8005182:	f240 2171 	movw	r1, #625	; 0x271
 8005186:	4630      	mov	r0, r6
 8005188:	f7ff ff12 	bl	8004fb0 <__i2b>
 800518c:	2300      	movs	r3, #0
 800518e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005192:	4604      	mov	r4, r0
 8005194:	6003      	str	r3, [r0, #0]
 8005196:	f04f 0900 	mov.w	r9, #0
 800519a:	07eb      	lsls	r3, r5, #31
 800519c:	d50a      	bpl.n	80051b4 <__pow5mult+0x84>
 800519e:	4639      	mov	r1, r7
 80051a0:	4622      	mov	r2, r4
 80051a2:	4630      	mov	r0, r6
 80051a4:	f7ff ff1a 	bl	8004fdc <__multiply>
 80051a8:	4639      	mov	r1, r7
 80051aa:	4680      	mov	r8, r0
 80051ac:	4630      	mov	r0, r6
 80051ae:	f7ff fe47 	bl	8004e40 <_Bfree>
 80051b2:	4647      	mov	r7, r8
 80051b4:	106d      	asrs	r5, r5, #1
 80051b6:	d00b      	beq.n	80051d0 <__pow5mult+0xa0>
 80051b8:	6820      	ldr	r0, [r4, #0]
 80051ba:	b938      	cbnz	r0, 80051cc <__pow5mult+0x9c>
 80051bc:	4622      	mov	r2, r4
 80051be:	4621      	mov	r1, r4
 80051c0:	4630      	mov	r0, r6
 80051c2:	f7ff ff0b 	bl	8004fdc <__multiply>
 80051c6:	6020      	str	r0, [r4, #0]
 80051c8:	f8c0 9000 	str.w	r9, [r0]
 80051cc:	4604      	mov	r4, r0
 80051ce:	e7e4      	b.n	800519a <__pow5mult+0x6a>
 80051d0:	4638      	mov	r0, r7
 80051d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051d6:	bf00      	nop
 80051d8:	080065c0 	.word	0x080065c0
 80051dc:	080063f1 	.word	0x080063f1
 80051e0:	08006474 	.word	0x08006474

080051e4 <__lshift>:
 80051e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051e8:	460c      	mov	r4, r1
 80051ea:	6849      	ldr	r1, [r1, #4]
 80051ec:	6923      	ldr	r3, [r4, #16]
 80051ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80051f2:	68a3      	ldr	r3, [r4, #8]
 80051f4:	4607      	mov	r7, r0
 80051f6:	4691      	mov	r9, r2
 80051f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80051fc:	f108 0601 	add.w	r6, r8, #1
 8005200:	42b3      	cmp	r3, r6
 8005202:	db0b      	blt.n	800521c <__lshift+0x38>
 8005204:	4638      	mov	r0, r7
 8005206:	f7ff fddb 	bl	8004dc0 <_Balloc>
 800520a:	4605      	mov	r5, r0
 800520c:	b948      	cbnz	r0, 8005222 <__lshift+0x3e>
 800520e:	4602      	mov	r2, r0
 8005210:	4b2a      	ldr	r3, [pc, #168]	; (80052bc <__lshift+0xd8>)
 8005212:	482b      	ldr	r0, [pc, #172]	; (80052c0 <__lshift+0xdc>)
 8005214:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005218:	f000 fac8 	bl	80057ac <__assert_func>
 800521c:	3101      	adds	r1, #1
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	e7ee      	b.n	8005200 <__lshift+0x1c>
 8005222:	2300      	movs	r3, #0
 8005224:	f100 0114 	add.w	r1, r0, #20
 8005228:	f100 0210 	add.w	r2, r0, #16
 800522c:	4618      	mov	r0, r3
 800522e:	4553      	cmp	r3, sl
 8005230:	db37      	blt.n	80052a2 <__lshift+0xbe>
 8005232:	6920      	ldr	r0, [r4, #16]
 8005234:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005238:	f104 0314 	add.w	r3, r4, #20
 800523c:	f019 091f 	ands.w	r9, r9, #31
 8005240:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005244:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005248:	d02f      	beq.n	80052aa <__lshift+0xc6>
 800524a:	f1c9 0e20 	rsb	lr, r9, #32
 800524e:	468a      	mov	sl, r1
 8005250:	f04f 0c00 	mov.w	ip, #0
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	fa02 f209 	lsl.w	r2, r2, r9
 800525a:	ea42 020c 	orr.w	r2, r2, ip
 800525e:	f84a 2b04 	str.w	r2, [sl], #4
 8005262:	f853 2b04 	ldr.w	r2, [r3], #4
 8005266:	4298      	cmp	r0, r3
 8005268:	fa22 fc0e 	lsr.w	ip, r2, lr
 800526c:	d8f2      	bhi.n	8005254 <__lshift+0x70>
 800526e:	1b03      	subs	r3, r0, r4
 8005270:	3b15      	subs	r3, #21
 8005272:	f023 0303 	bic.w	r3, r3, #3
 8005276:	3304      	adds	r3, #4
 8005278:	f104 0215 	add.w	r2, r4, #21
 800527c:	4290      	cmp	r0, r2
 800527e:	bf38      	it	cc
 8005280:	2304      	movcc	r3, #4
 8005282:	f841 c003 	str.w	ip, [r1, r3]
 8005286:	f1bc 0f00 	cmp.w	ip, #0
 800528a:	d001      	beq.n	8005290 <__lshift+0xac>
 800528c:	f108 0602 	add.w	r6, r8, #2
 8005290:	3e01      	subs	r6, #1
 8005292:	4638      	mov	r0, r7
 8005294:	612e      	str	r6, [r5, #16]
 8005296:	4621      	mov	r1, r4
 8005298:	f7ff fdd2 	bl	8004e40 <_Bfree>
 800529c:	4628      	mov	r0, r5
 800529e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80052a6:	3301      	adds	r3, #1
 80052a8:	e7c1      	b.n	800522e <__lshift+0x4a>
 80052aa:	3904      	subs	r1, #4
 80052ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80052b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80052b4:	4298      	cmp	r0, r3
 80052b6:	d8f9      	bhi.n	80052ac <__lshift+0xc8>
 80052b8:	e7ea      	b.n	8005290 <__lshift+0xac>
 80052ba:	bf00      	nop
 80052bc:	08006463 	.word	0x08006463
 80052c0:	08006474 	.word	0x08006474

080052c4 <__mcmp>:
 80052c4:	b530      	push	{r4, r5, lr}
 80052c6:	6902      	ldr	r2, [r0, #16]
 80052c8:	690c      	ldr	r4, [r1, #16]
 80052ca:	1b12      	subs	r2, r2, r4
 80052cc:	d10e      	bne.n	80052ec <__mcmp+0x28>
 80052ce:	f100 0314 	add.w	r3, r0, #20
 80052d2:	3114      	adds	r1, #20
 80052d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80052d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80052dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80052e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80052e4:	42a5      	cmp	r5, r4
 80052e6:	d003      	beq.n	80052f0 <__mcmp+0x2c>
 80052e8:	d305      	bcc.n	80052f6 <__mcmp+0x32>
 80052ea:	2201      	movs	r2, #1
 80052ec:	4610      	mov	r0, r2
 80052ee:	bd30      	pop	{r4, r5, pc}
 80052f0:	4283      	cmp	r3, r0
 80052f2:	d3f3      	bcc.n	80052dc <__mcmp+0x18>
 80052f4:	e7fa      	b.n	80052ec <__mcmp+0x28>
 80052f6:	f04f 32ff 	mov.w	r2, #4294967295
 80052fa:	e7f7      	b.n	80052ec <__mcmp+0x28>

080052fc <__mdiff>:
 80052fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005300:	460c      	mov	r4, r1
 8005302:	4606      	mov	r6, r0
 8005304:	4611      	mov	r1, r2
 8005306:	4620      	mov	r0, r4
 8005308:	4690      	mov	r8, r2
 800530a:	f7ff ffdb 	bl	80052c4 <__mcmp>
 800530e:	1e05      	subs	r5, r0, #0
 8005310:	d110      	bne.n	8005334 <__mdiff+0x38>
 8005312:	4629      	mov	r1, r5
 8005314:	4630      	mov	r0, r6
 8005316:	f7ff fd53 	bl	8004dc0 <_Balloc>
 800531a:	b930      	cbnz	r0, 800532a <__mdiff+0x2e>
 800531c:	4b3a      	ldr	r3, [pc, #232]	; (8005408 <__mdiff+0x10c>)
 800531e:	4602      	mov	r2, r0
 8005320:	f240 2132 	movw	r1, #562	; 0x232
 8005324:	4839      	ldr	r0, [pc, #228]	; (800540c <__mdiff+0x110>)
 8005326:	f000 fa41 	bl	80057ac <__assert_func>
 800532a:	2301      	movs	r3, #1
 800532c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005330:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005334:	bfa4      	itt	ge
 8005336:	4643      	movge	r3, r8
 8005338:	46a0      	movge	r8, r4
 800533a:	4630      	mov	r0, r6
 800533c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005340:	bfa6      	itte	ge
 8005342:	461c      	movge	r4, r3
 8005344:	2500      	movge	r5, #0
 8005346:	2501      	movlt	r5, #1
 8005348:	f7ff fd3a 	bl	8004dc0 <_Balloc>
 800534c:	b920      	cbnz	r0, 8005358 <__mdiff+0x5c>
 800534e:	4b2e      	ldr	r3, [pc, #184]	; (8005408 <__mdiff+0x10c>)
 8005350:	4602      	mov	r2, r0
 8005352:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005356:	e7e5      	b.n	8005324 <__mdiff+0x28>
 8005358:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800535c:	6926      	ldr	r6, [r4, #16]
 800535e:	60c5      	str	r5, [r0, #12]
 8005360:	f104 0914 	add.w	r9, r4, #20
 8005364:	f108 0514 	add.w	r5, r8, #20
 8005368:	f100 0e14 	add.w	lr, r0, #20
 800536c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005370:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005374:	f108 0210 	add.w	r2, r8, #16
 8005378:	46f2      	mov	sl, lr
 800537a:	2100      	movs	r1, #0
 800537c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005380:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005384:	fa1f f883 	uxth.w	r8, r3
 8005388:	fa11 f18b 	uxtah	r1, r1, fp
 800538c:	0c1b      	lsrs	r3, r3, #16
 800538e:	eba1 0808 	sub.w	r8, r1, r8
 8005392:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005396:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800539a:	fa1f f888 	uxth.w	r8, r8
 800539e:	1419      	asrs	r1, r3, #16
 80053a0:	454e      	cmp	r6, r9
 80053a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80053a6:	f84a 3b04 	str.w	r3, [sl], #4
 80053aa:	d8e7      	bhi.n	800537c <__mdiff+0x80>
 80053ac:	1b33      	subs	r3, r6, r4
 80053ae:	3b15      	subs	r3, #21
 80053b0:	f023 0303 	bic.w	r3, r3, #3
 80053b4:	3304      	adds	r3, #4
 80053b6:	3415      	adds	r4, #21
 80053b8:	42a6      	cmp	r6, r4
 80053ba:	bf38      	it	cc
 80053bc:	2304      	movcc	r3, #4
 80053be:	441d      	add	r5, r3
 80053c0:	4473      	add	r3, lr
 80053c2:	469e      	mov	lr, r3
 80053c4:	462e      	mov	r6, r5
 80053c6:	4566      	cmp	r6, ip
 80053c8:	d30e      	bcc.n	80053e8 <__mdiff+0xec>
 80053ca:	f10c 0203 	add.w	r2, ip, #3
 80053ce:	1b52      	subs	r2, r2, r5
 80053d0:	f022 0203 	bic.w	r2, r2, #3
 80053d4:	3d03      	subs	r5, #3
 80053d6:	45ac      	cmp	ip, r5
 80053d8:	bf38      	it	cc
 80053da:	2200      	movcc	r2, #0
 80053dc:	441a      	add	r2, r3
 80053de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80053e2:	b17b      	cbz	r3, 8005404 <__mdiff+0x108>
 80053e4:	6107      	str	r7, [r0, #16]
 80053e6:	e7a3      	b.n	8005330 <__mdiff+0x34>
 80053e8:	f856 8b04 	ldr.w	r8, [r6], #4
 80053ec:	fa11 f288 	uxtah	r2, r1, r8
 80053f0:	1414      	asrs	r4, r2, #16
 80053f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80053f6:	b292      	uxth	r2, r2
 80053f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80053fc:	f84e 2b04 	str.w	r2, [lr], #4
 8005400:	1421      	asrs	r1, r4, #16
 8005402:	e7e0      	b.n	80053c6 <__mdiff+0xca>
 8005404:	3f01      	subs	r7, #1
 8005406:	e7ea      	b.n	80053de <__mdiff+0xe2>
 8005408:	08006463 	.word	0x08006463
 800540c:	08006474 	.word	0x08006474

08005410 <__d2b>:
 8005410:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005414:	4689      	mov	r9, r1
 8005416:	2101      	movs	r1, #1
 8005418:	ec57 6b10 	vmov	r6, r7, d0
 800541c:	4690      	mov	r8, r2
 800541e:	f7ff fccf 	bl	8004dc0 <_Balloc>
 8005422:	4604      	mov	r4, r0
 8005424:	b930      	cbnz	r0, 8005434 <__d2b+0x24>
 8005426:	4602      	mov	r2, r0
 8005428:	4b25      	ldr	r3, [pc, #148]	; (80054c0 <__d2b+0xb0>)
 800542a:	4826      	ldr	r0, [pc, #152]	; (80054c4 <__d2b+0xb4>)
 800542c:	f240 310a 	movw	r1, #778	; 0x30a
 8005430:	f000 f9bc 	bl	80057ac <__assert_func>
 8005434:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005438:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800543c:	bb35      	cbnz	r5, 800548c <__d2b+0x7c>
 800543e:	2e00      	cmp	r6, #0
 8005440:	9301      	str	r3, [sp, #4]
 8005442:	d028      	beq.n	8005496 <__d2b+0x86>
 8005444:	4668      	mov	r0, sp
 8005446:	9600      	str	r6, [sp, #0]
 8005448:	f7ff fd82 	bl	8004f50 <__lo0bits>
 800544c:	9900      	ldr	r1, [sp, #0]
 800544e:	b300      	cbz	r0, 8005492 <__d2b+0x82>
 8005450:	9a01      	ldr	r2, [sp, #4]
 8005452:	f1c0 0320 	rsb	r3, r0, #32
 8005456:	fa02 f303 	lsl.w	r3, r2, r3
 800545a:	430b      	orrs	r3, r1
 800545c:	40c2      	lsrs	r2, r0
 800545e:	6163      	str	r3, [r4, #20]
 8005460:	9201      	str	r2, [sp, #4]
 8005462:	9b01      	ldr	r3, [sp, #4]
 8005464:	61a3      	str	r3, [r4, #24]
 8005466:	2b00      	cmp	r3, #0
 8005468:	bf14      	ite	ne
 800546a:	2202      	movne	r2, #2
 800546c:	2201      	moveq	r2, #1
 800546e:	6122      	str	r2, [r4, #16]
 8005470:	b1d5      	cbz	r5, 80054a8 <__d2b+0x98>
 8005472:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005476:	4405      	add	r5, r0
 8005478:	f8c9 5000 	str.w	r5, [r9]
 800547c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005480:	f8c8 0000 	str.w	r0, [r8]
 8005484:	4620      	mov	r0, r4
 8005486:	b003      	add	sp, #12
 8005488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800548c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005490:	e7d5      	b.n	800543e <__d2b+0x2e>
 8005492:	6161      	str	r1, [r4, #20]
 8005494:	e7e5      	b.n	8005462 <__d2b+0x52>
 8005496:	a801      	add	r0, sp, #4
 8005498:	f7ff fd5a 	bl	8004f50 <__lo0bits>
 800549c:	9b01      	ldr	r3, [sp, #4]
 800549e:	6163      	str	r3, [r4, #20]
 80054a0:	2201      	movs	r2, #1
 80054a2:	6122      	str	r2, [r4, #16]
 80054a4:	3020      	adds	r0, #32
 80054a6:	e7e3      	b.n	8005470 <__d2b+0x60>
 80054a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80054ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80054b0:	f8c9 0000 	str.w	r0, [r9]
 80054b4:	6918      	ldr	r0, [r3, #16]
 80054b6:	f7ff fd2b 	bl	8004f10 <__hi0bits>
 80054ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80054be:	e7df      	b.n	8005480 <__d2b+0x70>
 80054c0:	08006463 	.word	0x08006463
 80054c4:	08006474 	.word	0x08006474

080054c8 <_calloc_r>:
 80054c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054ca:	fba1 2402 	umull	r2, r4, r1, r2
 80054ce:	b94c      	cbnz	r4, 80054e4 <_calloc_r+0x1c>
 80054d0:	4611      	mov	r1, r2
 80054d2:	9201      	str	r2, [sp, #4]
 80054d4:	f7fe f8cc 	bl	8003670 <_malloc_r>
 80054d8:	9a01      	ldr	r2, [sp, #4]
 80054da:	4605      	mov	r5, r0
 80054dc:	b930      	cbnz	r0, 80054ec <_calloc_r+0x24>
 80054de:	4628      	mov	r0, r5
 80054e0:	b003      	add	sp, #12
 80054e2:	bd30      	pop	{r4, r5, pc}
 80054e4:	220c      	movs	r2, #12
 80054e6:	6002      	str	r2, [r0, #0]
 80054e8:	2500      	movs	r5, #0
 80054ea:	e7f8      	b.n	80054de <_calloc_r+0x16>
 80054ec:	4621      	mov	r1, r4
 80054ee:	f7fe f84b 	bl	8003588 <memset>
 80054f2:	e7f4      	b.n	80054de <_calloc_r+0x16>

080054f4 <__ssputs_r>:
 80054f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054f8:	688e      	ldr	r6, [r1, #8]
 80054fa:	429e      	cmp	r6, r3
 80054fc:	4682      	mov	sl, r0
 80054fe:	460c      	mov	r4, r1
 8005500:	4690      	mov	r8, r2
 8005502:	461f      	mov	r7, r3
 8005504:	d838      	bhi.n	8005578 <__ssputs_r+0x84>
 8005506:	898a      	ldrh	r2, [r1, #12]
 8005508:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800550c:	d032      	beq.n	8005574 <__ssputs_r+0x80>
 800550e:	6825      	ldr	r5, [r4, #0]
 8005510:	6909      	ldr	r1, [r1, #16]
 8005512:	eba5 0901 	sub.w	r9, r5, r1
 8005516:	6965      	ldr	r5, [r4, #20]
 8005518:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800551c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005520:	3301      	adds	r3, #1
 8005522:	444b      	add	r3, r9
 8005524:	106d      	asrs	r5, r5, #1
 8005526:	429d      	cmp	r5, r3
 8005528:	bf38      	it	cc
 800552a:	461d      	movcc	r5, r3
 800552c:	0553      	lsls	r3, r2, #21
 800552e:	d531      	bpl.n	8005594 <__ssputs_r+0xa0>
 8005530:	4629      	mov	r1, r5
 8005532:	f7fe f89d 	bl	8003670 <_malloc_r>
 8005536:	4606      	mov	r6, r0
 8005538:	b950      	cbnz	r0, 8005550 <__ssputs_r+0x5c>
 800553a:	230c      	movs	r3, #12
 800553c:	f8ca 3000 	str.w	r3, [sl]
 8005540:	89a3      	ldrh	r3, [r4, #12]
 8005542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005546:	81a3      	strh	r3, [r4, #12]
 8005548:	f04f 30ff 	mov.w	r0, #4294967295
 800554c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005550:	6921      	ldr	r1, [r4, #16]
 8005552:	464a      	mov	r2, r9
 8005554:	f7ff fc1a 	bl	8004d8c <memcpy>
 8005558:	89a3      	ldrh	r3, [r4, #12]
 800555a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800555e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005562:	81a3      	strh	r3, [r4, #12]
 8005564:	6126      	str	r6, [r4, #16]
 8005566:	6165      	str	r5, [r4, #20]
 8005568:	444e      	add	r6, r9
 800556a:	eba5 0509 	sub.w	r5, r5, r9
 800556e:	6026      	str	r6, [r4, #0]
 8005570:	60a5      	str	r5, [r4, #8]
 8005572:	463e      	mov	r6, r7
 8005574:	42be      	cmp	r6, r7
 8005576:	d900      	bls.n	800557a <__ssputs_r+0x86>
 8005578:	463e      	mov	r6, r7
 800557a:	6820      	ldr	r0, [r4, #0]
 800557c:	4632      	mov	r2, r6
 800557e:	4641      	mov	r1, r8
 8005580:	f000 f959 	bl	8005836 <memmove>
 8005584:	68a3      	ldr	r3, [r4, #8]
 8005586:	1b9b      	subs	r3, r3, r6
 8005588:	60a3      	str	r3, [r4, #8]
 800558a:	6823      	ldr	r3, [r4, #0]
 800558c:	4433      	add	r3, r6
 800558e:	6023      	str	r3, [r4, #0]
 8005590:	2000      	movs	r0, #0
 8005592:	e7db      	b.n	800554c <__ssputs_r+0x58>
 8005594:	462a      	mov	r2, r5
 8005596:	f000 f968 	bl	800586a <_realloc_r>
 800559a:	4606      	mov	r6, r0
 800559c:	2800      	cmp	r0, #0
 800559e:	d1e1      	bne.n	8005564 <__ssputs_r+0x70>
 80055a0:	6921      	ldr	r1, [r4, #16]
 80055a2:	4650      	mov	r0, sl
 80055a4:	f7fd fff8 	bl	8003598 <_free_r>
 80055a8:	e7c7      	b.n	800553a <__ssputs_r+0x46>
	...

080055ac <_svfiprintf_r>:
 80055ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055b0:	4698      	mov	r8, r3
 80055b2:	898b      	ldrh	r3, [r1, #12]
 80055b4:	061b      	lsls	r3, r3, #24
 80055b6:	b09d      	sub	sp, #116	; 0x74
 80055b8:	4607      	mov	r7, r0
 80055ba:	460d      	mov	r5, r1
 80055bc:	4614      	mov	r4, r2
 80055be:	d50e      	bpl.n	80055de <_svfiprintf_r+0x32>
 80055c0:	690b      	ldr	r3, [r1, #16]
 80055c2:	b963      	cbnz	r3, 80055de <_svfiprintf_r+0x32>
 80055c4:	2140      	movs	r1, #64	; 0x40
 80055c6:	f7fe f853 	bl	8003670 <_malloc_r>
 80055ca:	6028      	str	r0, [r5, #0]
 80055cc:	6128      	str	r0, [r5, #16]
 80055ce:	b920      	cbnz	r0, 80055da <_svfiprintf_r+0x2e>
 80055d0:	230c      	movs	r3, #12
 80055d2:	603b      	str	r3, [r7, #0]
 80055d4:	f04f 30ff 	mov.w	r0, #4294967295
 80055d8:	e0d1      	b.n	800577e <_svfiprintf_r+0x1d2>
 80055da:	2340      	movs	r3, #64	; 0x40
 80055dc:	616b      	str	r3, [r5, #20]
 80055de:	2300      	movs	r3, #0
 80055e0:	9309      	str	r3, [sp, #36]	; 0x24
 80055e2:	2320      	movs	r3, #32
 80055e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80055ec:	2330      	movs	r3, #48	; 0x30
 80055ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005798 <_svfiprintf_r+0x1ec>
 80055f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055f6:	f04f 0901 	mov.w	r9, #1
 80055fa:	4623      	mov	r3, r4
 80055fc:	469a      	mov	sl, r3
 80055fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005602:	b10a      	cbz	r2, 8005608 <_svfiprintf_r+0x5c>
 8005604:	2a25      	cmp	r2, #37	; 0x25
 8005606:	d1f9      	bne.n	80055fc <_svfiprintf_r+0x50>
 8005608:	ebba 0b04 	subs.w	fp, sl, r4
 800560c:	d00b      	beq.n	8005626 <_svfiprintf_r+0x7a>
 800560e:	465b      	mov	r3, fp
 8005610:	4622      	mov	r2, r4
 8005612:	4629      	mov	r1, r5
 8005614:	4638      	mov	r0, r7
 8005616:	f7ff ff6d 	bl	80054f4 <__ssputs_r>
 800561a:	3001      	adds	r0, #1
 800561c:	f000 80aa 	beq.w	8005774 <_svfiprintf_r+0x1c8>
 8005620:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005622:	445a      	add	r2, fp
 8005624:	9209      	str	r2, [sp, #36]	; 0x24
 8005626:	f89a 3000 	ldrb.w	r3, [sl]
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 80a2 	beq.w	8005774 <_svfiprintf_r+0x1c8>
 8005630:	2300      	movs	r3, #0
 8005632:	f04f 32ff 	mov.w	r2, #4294967295
 8005636:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800563a:	f10a 0a01 	add.w	sl, sl, #1
 800563e:	9304      	str	r3, [sp, #16]
 8005640:	9307      	str	r3, [sp, #28]
 8005642:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005646:	931a      	str	r3, [sp, #104]	; 0x68
 8005648:	4654      	mov	r4, sl
 800564a:	2205      	movs	r2, #5
 800564c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005650:	4851      	ldr	r0, [pc, #324]	; (8005798 <_svfiprintf_r+0x1ec>)
 8005652:	f7fa fdc5 	bl	80001e0 <memchr>
 8005656:	9a04      	ldr	r2, [sp, #16]
 8005658:	b9d8      	cbnz	r0, 8005692 <_svfiprintf_r+0xe6>
 800565a:	06d0      	lsls	r0, r2, #27
 800565c:	bf44      	itt	mi
 800565e:	2320      	movmi	r3, #32
 8005660:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005664:	0711      	lsls	r1, r2, #28
 8005666:	bf44      	itt	mi
 8005668:	232b      	movmi	r3, #43	; 0x2b
 800566a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800566e:	f89a 3000 	ldrb.w	r3, [sl]
 8005672:	2b2a      	cmp	r3, #42	; 0x2a
 8005674:	d015      	beq.n	80056a2 <_svfiprintf_r+0xf6>
 8005676:	9a07      	ldr	r2, [sp, #28]
 8005678:	4654      	mov	r4, sl
 800567a:	2000      	movs	r0, #0
 800567c:	f04f 0c0a 	mov.w	ip, #10
 8005680:	4621      	mov	r1, r4
 8005682:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005686:	3b30      	subs	r3, #48	; 0x30
 8005688:	2b09      	cmp	r3, #9
 800568a:	d94e      	bls.n	800572a <_svfiprintf_r+0x17e>
 800568c:	b1b0      	cbz	r0, 80056bc <_svfiprintf_r+0x110>
 800568e:	9207      	str	r2, [sp, #28]
 8005690:	e014      	b.n	80056bc <_svfiprintf_r+0x110>
 8005692:	eba0 0308 	sub.w	r3, r0, r8
 8005696:	fa09 f303 	lsl.w	r3, r9, r3
 800569a:	4313      	orrs	r3, r2
 800569c:	9304      	str	r3, [sp, #16]
 800569e:	46a2      	mov	sl, r4
 80056a0:	e7d2      	b.n	8005648 <_svfiprintf_r+0x9c>
 80056a2:	9b03      	ldr	r3, [sp, #12]
 80056a4:	1d19      	adds	r1, r3, #4
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	9103      	str	r1, [sp, #12]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	bfbb      	ittet	lt
 80056ae:	425b      	neglt	r3, r3
 80056b0:	f042 0202 	orrlt.w	r2, r2, #2
 80056b4:	9307      	strge	r3, [sp, #28]
 80056b6:	9307      	strlt	r3, [sp, #28]
 80056b8:	bfb8      	it	lt
 80056ba:	9204      	strlt	r2, [sp, #16]
 80056bc:	7823      	ldrb	r3, [r4, #0]
 80056be:	2b2e      	cmp	r3, #46	; 0x2e
 80056c0:	d10c      	bne.n	80056dc <_svfiprintf_r+0x130>
 80056c2:	7863      	ldrb	r3, [r4, #1]
 80056c4:	2b2a      	cmp	r3, #42	; 0x2a
 80056c6:	d135      	bne.n	8005734 <_svfiprintf_r+0x188>
 80056c8:	9b03      	ldr	r3, [sp, #12]
 80056ca:	1d1a      	adds	r2, r3, #4
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	9203      	str	r2, [sp, #12]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	bfb8      	it	lt
 80056d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80056d8:	3402      	adds	r4, #2
 80056da:	9305      	str	r3, [sp, #20]
 80056dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80057a8 <_svfiprintf_r+0x1fc>
 80056e0:	7821      	ldrb	r1, [r4, #0]
 80056e2:	2203      	movs	r2, #3
 80056e4:	4650      	mov	r0, sl
 80056e6:	f7fa fd7b 	bl	80001e0 <memchr>
 80056ea:	b140      	cbz	r0, 80056fe <_svfiprintf_r+0x152>
 80056ec:	2340      	movs	r3, #64	; 0x40
 80056ee:	eba0 000a 	sub.w	r0, r0, sl
 80056f2:	fa03 f000 	lsl.w	r0, r3, r0
 80056f6:	9b04      	ldr	r3, [sp, #16]
 80056f8:	4303      	orrs	r3, r0
 80056fa:	3401      	adds	r4, #1
 80056fc:	9304      	str	r3, [sp, #16]
 80056fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005702:	4826      	ldr	r0, [pc, #152]	; (800579c <_svfiprintf_r+0x1f0>)
 8005704:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005708:	2206      	movs	r2, #6
 800570a:	f7fa fd69 	bl	80001e0 <memchr>
 800570e:	2800      	cmp	r0, #0
 8005710:	d038      	beq.n	8005784 <_svfiprintf_r+0x1d8>
 8005712:	4b23      	ldr	r3, [pc, #140]	; (80057a0 <_svfiprintf_r+0x1f4>)
 8005714:	bb1b      	cbnz	r3, 800575e <_svfiprintf_r+0x1b2>
 8005716:	9b03      	ldr	r3, [sp, #12]
 8005718:	3307      	adds	r3, #7
 800571a:	f023 0307 	bic.w	r3, r3, #7
 800571e:	3308      	adds	r3, #8
 8005720:	9303      	str	r3, [sp, #12]
 8005722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005724:	4433      	add	r3, r6
 8005726:	9309      	str	r3, [sp, #36]	; 0x24
 8005728:	e767      	b.n	80055fa <_svfiprintf_r+0x4e>
 800572a:	fb0c 3202 	mla	r2, ip, r2, r3
 800572e:	460c      	mov	r4, r1
 8005730:	2001      	movs	r0, #1
 8005732:	e7a5      	b.n	8005680 <_svfiprintf_r+0xd4>
 8005734:	2300      	movs	r3, #0
 8005736:	3401      	adds	r4, #1
 8005738:	9305      	str	r3, [sp, #20]
 800573a:	4619      	mov	r1, r3
 800573c:	f04f 0c0a 	mov.w	ip, #10
 8005740:	4620      	mov	r0, r4
 8005742:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005746:	3a30      	subs	r2, #48	; 0x30
 8005748:	2a09      	cmp	r2, #9
 800574a:	d903      	bls.n	8005754 <_svfiprintf_r+0x1a8>
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0c5      	beq.n	80056dc <_svfiprintf_r+0x130>
 8005750:	9105      	str	r1, [sp, #20]
 8005752:	e7c3      	b.n	80056dc <_svfiprintf_r+0x130>
 8005754:	fb0c 2101 	mla	r1, ip, r1, r2
 8005758:	4604      	mov	r4, r0
 800575a:	2301      	movs	r3, #1
 800575c:	e7f0      	b.n	8005740 <_svfiprintf_r+0x194>
 800575e:	ab03      	add	r3, sp, #12
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	462a      	mov	r2, r5
 8005764:	4b0f      	ldr	r3, [pc, #60]	; (80057a4 <_svfiprintf_r+0x1f8>)
 8005766:	a904      	add	r1, sp, #16
 8005768:	4638      	mov	r0, r7
 800576a:	f7fe f895 	bl	8003898 <_printf_float>
 800576e:	1c42      	adds	r2, r0, #1
 8005770:	4606      	mov	r6, r0
 8005772:	d1d6      	bne.n	8005722 <_svfiprintf_r+0x176>
 8005774:	89ab      	ldrh	r3, [r5, #12]
 8005776:	065b      	lsls	r3, r3, #25
 8005778:	f53f af2c 	bmi.w	80055d4 <_svfiprintf_r+0x28>
 800577c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800577e:	b01d      	add	sp, #116	; 0x74
 8005780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005784:	ab03      	add	r3, sp, #12
 8005786:	9300      	str	r3, [sp, #0]
 8005788:	462a      	mov	r2, r5
 800578a:	4b06      	ldr	r3, [pc, #24]	; (80057a4 <_svfiprintf_r+0x1f8>)
 800578c:	a904      	add	r1, sp, #16
 800578e:	4638      	mov	r0, r7
 8005790:	f7fe fb26 	bl	8003de0 <_printf_i>
 8005794:	e7eb      	b.n	800576e <_svfiprintf_r+0x1c2>
 8005796:	bf00      	nop
 8005798:	080065cc 	.word	0x080065cc
 800579c:	080065d6 	.word	0x080065d6
 80057a0:	08003899 	.word	0x08003899
 80057a4:	080054f5 	.word	0x080054f5
 80057a8:	080065d2 	.word	0x080065d2

080057ac <__assert_func>:
 80057ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80057ae:	4614      	mov	r4, r2
 80057b0:	461a      	mov	r2, r3
 80057b2:	4b09      	ldr	r3, [pc, #36]	; (80057d8 <__assert_func+0x2c>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4605      	mov	r5, r0
 80057b8:	68d8      	ldr	r0, [r3, #12]
 80057ba:	b14c      	cbz	r4, 80057d0 <__assert_func+0x24>
 80057bc:	4b07      	ldr	r3, [pc, #28]	; (80057dc <__assert_func+0x30>)
 80057be:	9100      	str	r1, [sp, #0]
 80057c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80057c4:	4906      	ldr	r1, [pc, #24]	; (80057e0 <__assert_func+0x34>)
 80057c6:	462b      	mov	r3, r5
 80057c8:	f000 f80e 	bl	80057e8 <fiprintf>
 80057cc:	f000 faa4 	bl	8005d18 <abort>
 80057d0:	4b04      	ldr	r3, [pc, #16]	; (80057e4 <__assert_func+0x38>)
 80057d2:	461c      	mov	r4, r3
 80057d4:	e7f3      	b.n	80057be <__assert_func+0x12>
 80057d6:	bf00      	nop
 80057d8:	2000000c 	.word	0x2000000c
 80057dc:	080065dd 	.word	0x080065dd
 80057e0:	080065ea 	.word	0x080065ea
 80057e4:	08006618 	.word	0x08006618

080057e8 <fiprintf>:
 80057e8:	b40e      	push	{r1, r2, r3}
 80057ea:	b503      	push	{r0, r1, lr}
 80057ec:	4601      	mov	r1, r0
 80057ee:	ab03      	add	r3, sp, #12
 80057f0:	4805      	ldr	r0, [pc, #20]	; (8005808 <fiprintf+0x20>)
 80057f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80057f6:	6800      	ldr	r0, [r0, #0]
 80057f8:	9301      	str	r3, [sp, #4]
 80057fa:	f000 f88f 	bl	800591c <_vfiprintf_r>
 80057fe:	b002      	add	sp, #8
 8005800:	f85d eb04 	ldr.w	lr, [sp], #4
 8005804:	b003      	add	sp, #12
 8005806:	4770      	bx	lr
 8005808:	2000000c 	.word	0x2000000c

0800580c <__retarget_lock_init_recursive>:
 800580c:	4770      	bx	lr

0800580e <__retarget_lock_acquire_recursive>:
 800580e:	4770      	bx	lr

08005810 <__retarget_lock_release_recursive>:
 8005810:	4770      	bx	lr

08005812 <__ascii_mbtowc>:
 8005812:	b082      	sub	sp, #8
 8005814:	b901      	cbnz	r1, 8005818 <__ascii_mbtowc+0x6>
 8005816:	a901      	add	r1, sp, #4
 8005818:	b142      	cbz	r2, 800582c <__ascii_mbtowc+0x1a>
 800581a:	b14b      	cbz	r3, 8005830 <__ascii_mbtowc+0x1e>
 800581c:	7813      	ldrb	r3, [r2, #0]
 800581e:	600b      	str	r3, [r1, #0]
 8005820:	7812      	ldrb	r2, [r2, #0]
 8005822:	1e10      	subs	r0, r2, #0
 8005824:	bf18      	it	ne
 8005826:	2001      	movne	r0, #1
 8005828:	b002      	add	sp, #8
 800582a:	4770      	bx	lr
 800582c:	4610      	mov	r0, r2
 800582e:	e7fb      	b.n	8005828 <__ascii_mbtowc+0x16>
 8005830:	f06f 0001 	mvn.w	r0, #1
 8005834:	e7f8      	b.n	8005828 <__ascii_mbtowc+0x16>

08005836 <memmove>:
 8005836:	4288      	cmp	r0, r1
 8005838:	b510      	push	{r4, lr}
 800583a:	eb01 0402 	add.w	r4, r1, r2
 800583e:	d902      	bls.n	8005846 <memmove+0x10>
 8005840:	4284      	cmp	r4, r0
 8005842:	4623      	mov	r3, r4
 8005844:	d807      	bhi.n	8005856 <memmove+0x20>
 8005846:	1e43      	subs	r3, r0, #1
 8005848:	42a1      	cmp	r1, r4
 800584a:	d008      	beq.n	800585e <memmove+0x28>
 800584c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005850:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005854:	e7f8      	b.n	8005848 <memmove+0x12>
 8005856:	4402      	add	r2, r0
 8005858:	4601      	mov	r1, r0
 800585a:	428a      	cmp	r2, r1
 800585c:	d100      	bne.n	8005860 <memmove+0x2a>
 800585e:	bd10      	pop	{r4, pc}
 8005860:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005864:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005868:	e7f7      	b.n	800585a <memmove+0x24>

0800586a <_realloc_r>:
 800586a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800586e:	4680      	mov	r8, r0
 8005870:	4614      	mov	r4, r2
 8005872:	460e      	mov	r6, r1
 8005874:	b921      	cbnz	r1, 8005880 <_realloc_r+0x16>
 8005876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800587a:	4611      	mov	r1, r2
 800587c:	f7fd bef8 	b.w	8003670 <_malloc_r>
 8005880:	b92a      	cbnz	r2, 800588e <_realloc_r+0x24>
 8005882:	f7fd fe89 	bl	8003598 <_free_r>
 8005886:	4625      	mov	r5, r4
 8005888:	4628      	mov	r0, r5
 800588a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800588e:	f000 fc67 	bl	8006160 <_malloc_usable_size_r>
 8005892:	4284      	cmp	r4, r0
 8005894:	4607      	mov	r7, r0
 8005896:	d802      	bhi.n	800589e <_realloc_r+0x34>
 8005898:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800589c:	d812      	bhi.n	80058c4 <_realloc_r+0x5a>
 800589e:	4621      	mov	r1, r4
 80058a0:	4640      	mov	r0, r8
 80058a2:	f7fd fee5 	bl	8003670 <_malloc_r>
 80058a6:	4605      	mov	r5, r0
 80058a8:	2800      	cmp	r0, #0
 80058aa:	d0ed      	beq.n	8005888 <_realloc_r+0x1e>
 80058ac:	42bc      	cmp	r4, r7
 80058ae:	4622      	mov	r2, r4
 80058b0:	4631      	mov	r1, r6
 80058b2:	bf28      	it	cs
 80058b4:	463a      	movcs	r2, r7
 80058b6:	f7ff fa69 	bl	8004d8c <memcpy>
 80058ba:	4631      	mov	r1, r6
 80058bc:	4640      	mov	r0, r8
 80058be:	f7fd fe6b 	bl	8003598 <_free_r>
 80058c2:	e7e1      	b.n	8005888 <_realloc_r+0x1e>
 80058c4:	4635      	mov	r5, r6
 80058c6:	e7df      	b.n	8005888 <_realloc_r+0x1e>

080058c8 <__sfputc_r>:
 80058c8:	6893      	ldr	r3, [r2, #8]
 80058ca:	3b01      	subs	r3, #1
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	b410      	push	{r4}
 80058d0:	6093      	str	r3, [r2, #8]
 80058d2:	da08      	bge.n	80058e6 <__sfputc_r+0x1e>
 80058d4:	6994      	ldr	r4, [r2, #24]
 80058d6:	42a3      	cmp	r3, r4
 80058d8:	db01      	blt.n	80058de <__sfputc_r+0x16>
 80058da:	290a      	cmp	r1, #10
 80058dc:	d103      	bne.n	80058e6 <__sfputc_r+0x1e>
 80058de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058e2:	f000 b94b 	b.w	8005b7c <__swbuf_r>
 80058e6:	6813      	ldr	r3, [r2, #0]
 80058e8:	1c58      	adds	r0, r3, #1
 80058ea:	6010      	str	r0, [r2, #0]
 80058ec:	7019      	strb	r1, [r3, #0]
 80058ee:	4608      	mov	r0, r1
 80058f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <__sfputs_r>:
 80058f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058f8:	4606      	mov	r6, r0
 80058fa:	460f      	mov	r7, r1
 80058fc:	4614      	mov	r4, r2
 80058fe:	18d5      	adds	r5, r2, r3
 8005900:	42ac      	cmp	r4, r5
 8005902:	d101      	bne.n	8005908 <__sfputs_r+0x12>
 8005904:	2000      	movs	r0, #0
 8005906:	e007      	b.n	8005918 <__sfputs_r+0x22>
 8005908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800590c:	463a      	mov	r2, r7
 800590e:	4630      	mov	r0, r6
 8005910:	f7ff ffda 	bl	80058c8 <__sfputc_r>
 8005914:	1c43      	adds	r3, r0, #1
 8005916:	d1f3      	bne.n	8005900 <__sfputs_r+0xa>
 8005918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800591c <_vfiprintf_r>:
 800591c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005920:	460d      	mov	r5, r1
 8005922:	b09d      	sub	sp, #116	; 0x74
 8005924:	4614      	mov	r4, r2
 8005926:	4698      	mov	r8, r3
 8005928:	4606      	mov	r6, r0
 800592a:	b118      	cbz	r0, 8005934 <_vfiprintf_r+0x18>
 800592c:	6983      	ldr	r3, [r0, #24]
 800592e:	b90b      	cbnz	r3, 8005934 <_vfiprintf_r+0x18>
 8005930:	f000 fb14 	bl	8005f5c <__sinit>
 8005934:	4b89      	ldr	r3, [pc, #548]	; (8005b5c <_vfiprintf_r+0x240>)
 8005936:	429d      	cmp	r5, r3
 8005938:	d11b      	bne.n	8005972 <_vfiprintf_r+0x56>
 800593a:	6875      	ldr	r5, [r6, #4]
 800593c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800593e:	07d9      	lsls	r1, r3, #31
 8005940:	d405      	bmi.n	800594e <_vfiprintf_r+0x32>
 8005942:	89ab      	ldrh	r3, [r5, #12]
 8005944:	059a      	lsls	r2, r3, #22
 8005946:	d402      	bmi.n	800594e <_vfiprintf_r+0x32>
 8005948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800594a:	f7ff ff60 	bl	800580e <__retarget_lock_acquire_recursive>
 800594e:	89ab      	ldrh	r3, [r5, #12]
 8005950:	071b      	lsls	r3, r3, #28
 8005952:	d501      	bpl.n	8005958 <_vfiprintf_r+0x3c>
 8005954:	692b      	ldr	r3, [r5, #16]
 8005956:	b9eb      	cbnz	r3, 8005994 <_vfiprintf_r+0x78>
 8005958:	4629      	mov	r1, r5
 800595a:	4630      	mov	r0, r6
 800595c:	f000 f96e 	bl	8005c3c <__swsetup_r>
 8005960:	b1c0      	cbz	r0, 8005994 <_vfiprintf_r+0x78>
 8005962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005964:	07dc      	lsls	r4, r3, #31
 8005966:	d50e      	bpl.n	8005986 <_vfiprintf_r+0x6a>
 8005968:	f04f 30ff 	mov.w	r0, #4294967295
 800596c:	b01d      	add	sp, #116	; 0x74
 800596e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005972:	4b7b      	ldr	r3, [pc, #492]	; (8005b60 <_vfiprintf_r+0x244>)
 8005974:	429d      	cmp	r5, r3
 8005976:	d101      	bne.n	800597c <_vfiprintf_r+0x60>
 8005978:	68b5      	ldr	r5, [r6, #8]
 800597a:	e7df      	b.n	800593c <_vfiprintf_r+0x20>
 800597c:	4b79      	ldr	r3, [pc, #484]	; (8005b64 <_vfiprintf_r+0x248>)
 800597e:	429d      	cmp	r5, r3
 8005980:	bf08      	it	eq
 8005982:	68f5      	ldreq	r5, [r6, #12]
 8005984:	e7da      	b.n	800593c <_vfiprintf_r+0x20>
 8005986:	89ab      	ldrh	r3, [r5, #12]
 8005988:	0598      	lsls	r0, r3, #22
 800598a:	d4ed      	bmi.n	8005968 <_vfiprintf_r+0x4c>
 800598c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800598e:	f7ff ff3f 	bl	8005810 <__retarget_lock_release_recursive>
 8005992:	e7e9      	b.n	8005968 <_vfiprintf_r+0x4c>
 8005994:	2300      	movs	r3, #0
 8005996:	9309      	str	r3, [sp, #36]	; 0x24
 8005998:	2320      	movs	r3, #32
 800599a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800599e:	f8cd 800c 	str.w	r8, [sp, #12]
 80059a2:	2330      	movs	r3, #48	; 0x30
 80059a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005b68 <_vfiprintf_r+0x24c>
 80059a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059ac:	f04f 0901 	mov.w	r9, #1
 80059b0:	4623      	mov	r3, r4
 80059b2:	469a      	mov	sl, r3
 80059b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059b8:	b10a      	cbz	r2, 80059be <_vfiprintf_r+0xa2>
 80059ba:	2a25      	cmp	r2, #37	; 0x25
 80059bc:	d1f9      	bne.n	80059b2 <_vfiprintf_r+0x96>
 80059be:	ebba 0b04 	subs.w	fp, sl, r4
 80059c2:	d00b      	beq.n	80059dc <_vfiprintf_r+0xc0>
 80059c4:	465b      	mov	r3, fp
 80059c6:	4622      	mov	r2, r4
 80059c8:	4629      	mov	r1, r5
 80059ca:	4630      	mov	r0, r6
 80059cc:	f7ff ff93 	bl	80058f6 <__sfputs_r>
 80059d0:	3001      	adds	r0, #1
 80059d2:	f000 80aa 	beq.w	8005b2a <_vfiprintf_r+0x20e>
 80059d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059d8:	445a      	add	r2, fp
 80059da:	9209      	str	r2, [sp, #36]	; 0x24
 80059dc:	f89a 3000 	ldrb.w	r3, [sl]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f000 80a2 	beq.w	8005b2a <_vfiprintf_r+0x20e>
 80059e6:	2300      	movs	r3, #0
 80059e8:	f04f 32ff 	mov.w	r2, #4294967295
 80059ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059f0:	f10a 0a01 	add.w	sl, sl, #1
 80059f4:	9304      	str	r3, [sp, #16]
 80059f6:	9307      	str	r3, [sp, #28]
 80059f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059fc:	931a      	str	r3, [sp, #104]	; 0x68
 80059fe:	4654      	mov	r4, sl
 8005a00:	2205      	movs	r2, #5
 8005a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a06:	4858      	ldr	r0, [pc, #352]	; (8005b68 <_vfiprintf_r+0x24c>)
 8005a08:	f7fa fbea 	bl	80001e0 <memchr>
 8005a0c:	9a04      	ldr	r2, [sp, #16]
 8005a0e:	b9d8      	cbnz	r0, 8005a48 <_vfiprintf_r+0x12c>
 8005a10:	06d1      	lsls	r1, r2, #27
 8005a12:	bf44      	itt	mi
 8005a14:	2320      	movmi	r3, #32
 8005a16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a1a:	0713      	lsls	r3, r2, #28
 8005a1c:	bf44      	itt	mi
 8005a1e:	232b      	movmi	r3, #43	; 0x2b
 8005a20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a24:	f89a 3000 	ldrb.w	r3, [sl]
 8005a28:	2b2a      	cmp	r3, #42	; 0x2a
 8005a2a:	d015      	beq.n	8005a58 <_vfiprintf_r+0x13c>
 8005a2c:	9a07      	ldr	r2, [sp, #28]
 8005a2e:	4654      	mov	r4, sl
 8005a30:	2000      	movs	r0, #0
 8005a32:	f04f 0c0a 	mov.w	ip, #10
 8005a36:	4621      	mov	r1, r4
 8005a38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a3c:	3b30      	subs	r3, #48	; 0x30
 8005a3e:	2b09      	cmp	r3, #9
 8005a40:	d94e      	bls.n	8005ae0 <_vfiprintf_r+0x1c4>
 8005a42:	b1b0      	cbz	r0, 8005a72 <_vfiprintf_r+0x156>
 8005a44:	9207      	str	r2, [sp, #28]
 8005a46:	e014      	b.n	8005a72 <_vfiprintf_r+0x156>
 8005a48:	eba0 0308 	sub.w	r3, r0, r8
 8005a4c:	fa09 f303 	lsl.w	r3, r9, r3
 8005a50:	4313      	orrs	r3, r2
 8005a52:	9304      	str	r3, [sp, #16]
 8005a54:	46a2      	mov	sl, r4
 8005a56:	e7d2      	b.n	80059fe <_vfiprintf_r+0xe2>
 8005a58:	9b03      	ldr	r3, [sp, #12]
 8005a5a:	1d19      	adds	r1, r3, #4
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	9103      	str	r1, [sp, #12]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	bfbb      	ittet	lt
 8005a64:	425b      	neglt	r3, r3
 8005a66:	f042 0202 	orrlt.w	r2, r2, #2
 8005a6a:	9307      	strge	r3, [sp, #28]
 8005a6c:	9307      	strlt	r3, [sp, #28]
 8005a6e:	bfb8      	it	lt
 8005a70:	9204      	strlt	r2, [sp, #16]
 8005a72:	7823      	ldrb	r3, [r4, #0]
 8005a74:	2b2e      	cmp	r3, #46	; 0x2e
 8005a76:	d10c      	bne.n	8005a92 <_vfiprintf_r+0x176>
 8005a78:	7863      	ldrb	r3, [r4, #1]
 8005a7a:	2b2a      	cmp	r3, #42	; 0x2a
 8005a7c:	d135      	bne.n	8005aea <_vfiprintf_r+0x1ce>
 8005a7e:	9b03      	ldr	r3, [sp, #12]
 8005a80:	1d1a      	adds	r2, r3, #4
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	9203      	str	r2, [sp, #12]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	bfb8      	it	lt
 8005a8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a8e:	3402      	adds	r4, #2
 8005a90:	9305      	str	r3, [sp, #20]
 8005a92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005b78 <_vfiprintf_r+0x25c>
 8005a96:	7821      	ldrb	r1, [r4, #0]
 8005a98:	2203      	movs	r2, #3
 8005a9a:	4650      	mov	r0, sl
 8005a9c:	f7fa fba0 	bl	80001e0 <memchr>
 8005aa0:	b140      	cbz	r0, 8005ab4 <_vfiprintf_r+0x198>
 8005aa2:	2340      	movs	r3, #64	; 0x40
 8005aa4:	eba0 000a 	sub.w	r0, r0, sl
 8005aa8:	fa03 f000 	lsl.w	r0, r3, r0
 8005aac:	9b04      	ldr	r3, [sp, #16]
 8005aae:	4303      	orrs	r3, r0
 8005ab0:	3401      	adds	r4, #1
 8005ab2:	9304      	str	r3, [sp, #16]
 8005ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ab8:	482c      	ldr	r0, [pc, #176]	; (8005b6c <_vfiprintf_r+0x250>)
 8005aba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005abe:	2206      	movs	r2, #6
 8005ac0:	f7fa fb8e 	bl	80001e0 <memchr>
 8005ac4:	2800      	cmp	r0, #0
 8005ac6:	d03f      	beq.n	8005b48 <_vfiprintf_r+0x22c>
 8005ac8:	4b29      	ldr	r3, [pc, #164]	; (8005b70 <_vfiprintf_r+0x254>)
 8005aca:	bb1b      	cbnz	r3, 8005b14 <_vfiprintf_r+0x1f8>
 8005acc:	9b03      	ldr	r3, [sp, #12]
 8005ace:	3307      	adds	r3, #7
 8005ad0:	f023 0307 	bic.w	r3, r3, #7
 8005ad4:	3308      	adds	r3, #8
 8005ad6:	9303      	str	r3, [sp, #12]
 8005ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ada:	443b      	add	r3, r7
 8005adc:	9309      	str	r3, [sp, #36]	; 0x24
 8005ade:	e767      	b.n	80059b0 <_vfiprintf_r+0x94>
 8005ae0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ae4:	460c      	mov	r4, r1
 8005ae6:	2001      	movs	r0, #1
 8005ae8:	e7a5      	b.n	8005a36 <_vfiprintf_r+0x11a>
 8005aea:	2300      	movs	r3, #0
 8005aec:	3401      	adds	r4, #1
 8005aee:	9305      	str	r3, [sp, #20]
 8005af0:	4619      	mov	r1, r3
 8005af2:	f04f 0c0a 	mov.w	ip, #10
 8005af6:	4620      	mov	r0, r4
 8005af8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005afc:	3a30      	subs	r2, #48	; 0x30
 8005afe:	2a09      	cmp	r2, #9
 8005b00:	d903      	bls.n	8005b0a <_vfiprintf_r+0x1ee>
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0c5      	beq.n	8005a92 <_vfiprintf_r+0x176>
 8005b06:	9105      	str	r1, [sp, #20]
 8005b08:	e7c3      	b.n	8005a92 <_vfiprintf_r+0x176>
 8005b0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b0e:	4604      	mov	r4, r0
 8005b10:	2301      	movs	r3, #1
 8005b12:	e7f0      	b.n	8005af6 <_vfiprintf_r+0x1da>
 8005b14:	ab03      	add	r3, sp, #12
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	462a      	mov	r2, r5
 8005b1a:	4b16      	ldr	r3, [pc, #88]	; (8005b74 <_vfiprintf_r+0x258>)
 8005b1c:	a904      	add	r1, sp, #16
 8005b1e:	4630      	mov	r0, r6
 8005b20:	f7fd feba 	bl	8003898 <_printf_float>
 8005b24:	4607      	mov	r7, r0
 8005b26:	1c78      	adds	r0, r7, #1
 8005b28:	d1d6      	bne.n	8005ad8 <_vfiprintf_r+0x1bc>
 8005b2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b2c:	07d9      	lsls	r1, r3, #31
 8005b2e:	d405      	bmi.n	8005b3c <_vfiprintf_r+0x220>
 8005b30:	89ab      	ldrh	r3, [r5, #12]
 8005b32:	059a      	lsls	r2, r3, #22
 8005b34:	d402      	bmi.n	8005b3c <_vfiprintf_r+0x220>
 8005b36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b38:	f7ff fe6a 	bl	8005810 <__retarget_lock_release_recursive>
 8005b3c:	89ab      	ldrh	r3, [r5, #12]
 8005b3e:	065b      	lsls	r3, r3, #25
 8005b40:	f53f af12 	bmi.w	8005968 <_vfiprintf_r+0x4c>
 8005b44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b46:	e711      	b.n	800596c <_vfiprintf_r+0x50>
 8005b48:	ab03      	add	r3, sp, #12
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	462a      	mov	r2, r5
 8005b4e:	4b09      	ldr	r3, [pc, #36]	; (8005b74 <_vfiprintf_r+0x258>)
 8005b50:	a904      	add	r1, sp, #16
 8005b52:	4630      	mov	r0, r6
 8005b54:	f7fe f944 	bl	8003de0 <_printf_i>
 8005b58:	e7e4      	b.n	8005b24 <_vfiprintf_r+0x208>
 8005b5a:	bf00      	nop
 8005b5c:	08006744 	.word	0x08006744
 8005b60:	08006764 	.word	0x08006764
 8005b64:	08006724 	.word	0x08006724
 8005b68:	080065cc 	.word	0x080065cc
 8005b6c:	080065d6 	.word	0x080065d6
 8005b70:	08003899 	.word	0x08003899
 8005b74:	080058f7 	.word	0x080058f7
 8005b78:	080065d2 	.word	0x080065d2

08005b7c <__swbuf_r>:
 8005b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7e:	460e      	mov	r6, r1
 8005b80:	4614      	mov	r4, r2
 8005b82:	4605      	mov	r5, r0
 8005b84:	b118      	cbz	r0, 8005b8e <__swbuf_r+0x12>
 8005b86:	6983      	ldr	r3, [r0, #24]
 8005b88:	b90b      	cbnz	r3, 8005b8e <__swbuf_r+0x12>
 8005b8a:	f000 f9e7 	bl	8005f5c <__sinit>
 8005b8e:	4b21      	ldr	r3, [pc, #132]	; (8005c14 <__swbuf_r+0x98>)
 8005b90:	429c      	cmp	r4, r3
 8005b92:	d12b      	bne.n	8005bec <__swbuf_r+0x70>
 8005b94:	686c      	ldr	r4, [r5, #4]
 8005b96:	69a3      	ldr	r3, [r4, #24]
 8005b98:	60a3      	str	r3, [r4, #8]
 8005b9a:	89a3      	ldrh	r3, [r4, #12]
 8005b9c:	071a      	lsls	r2, r3, #28
 8005b9e:	d52f      	bpl.n	8005c00 <__swbuf_r+0x84>
 8005ba0:	6923      	ldr	r3, [r4, #16]
 8005ba2:	b36b      	cbz	r3, 8005c00 <__swbuf_r+0x84>
 8005ba4:	6923      	ldr	r3, [r4, #16]
 8005ba6:	6820      	ldr	r0, [r4, #0]
 8005ba8:	1ac0      	subs	r0, r0, r3
 8005baa:	6963      	ldr	r3, [r4, #20]
 8005bac:	b2f6      	uxtb	r6, r6
 8005bae:	4283      	cmp	r3, r0
 8005bb0:	4637      	mov	r7, r6
 8005bb2:	dc04      	bgt.n	8005bbe <__swbuf_r+0x42>
 8005bb4:	4621      	mov	r1, r4
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	f000 f93c 	bl	8005e34 <_fflush_r>
 8005bbc:	bb30      	cbnz	r0, 8005c0c <__swbuf_r+0x90>
 8005bbe:	68a3      	ldr	r3, [r4, #8]
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	60a3      	str	r3, [r4, #8]
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	1c5a      	adds	r2, r3, #1
 8005bc8:	6022      	str	r2, [r4, #0]
 8005bca:	701e      	strb	r6, [r3, #0]
 8005bcc:	6963      	ldr	r3, [r4, #20]
 8005bce:	3001      	adds	r0, #1
 8005bd0:	4283      	cmp	r3, r0
 8005bd2:	d004      	beq.n	8005bde <__swbuf_r+0x62>
 8005bd4:	89a3      	ldrh	r3, [r4, #12]
 8005bd6:	07db      	lsls	r3, r3, #31
 8005bd8:	d506      	bpl.n	8005be8 <__swbuf_r+0x6c>
 8005bda:	2e0a      	cmp	r6, #10
 8005bdc:	d104      	bne.n	8005be8 <__swbuf_r+0x6c>
 8005bde:	4621      	mov	r1, r4
 8005be0:	4628      	mov	r0, r5
 8005be2:	f000 f927 	bl	8005e34 <_fflush_r>
 8005be6:	b988      	cbnz	r0, 8005c0c <__swbuf_r+0x90>
 8005be8:	4638      	mov	r0, r7
 8005bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bec:	4b0a      	ldr	r3, [pc, #40]	; (8005c18 <__swbuf_r+0x9c>)
 8005bee:	429c      	cmp	r4, r3
 8005bf0:	d101      	bne.n	8005bf6 <__swbuf_r+0x7a>
 8005bf2:	68ac      	ldr	r4, [r5, #8]
 8005bf4:	e7cf      	b.n	8005b96 <__swbuf_r+0x1a>
 8005bf6:	4b09      	ldr	r3, [pc, #36]	; (8005c1c <__swbuf_r+0xa0>)
 8005bf8:	429c      	cmp	r4, r3
 8005bfa:	bf08      	it	eq
 8005bfc:	68ec      	ldreq	r4, [r5, #12]
 8005bfe:	e7ca      	b.n	8005b96 <__swbuf_r+0x1a>
 8005c00:	4621      	mov	r1, r4
 8005c02:	4628      	mov	r0, r5
 8005c04:	f000 f81a 	bl	8005c3c <__swsetup_r>
 8005c08:	2800      	cmp	r0, #0
 8005c0a:	d0cb      	beq.n	8005ba4 <__swbuf_r+0x28>
 8005c0c:	f04f 37ff 	mov.w	r7, #4294967295
 8005c10:	e7ea      	b.n	8005be8 <__swbuf_r+0x6c>
 8005c12:	bf00      	nop
 8005c14:	08006744 	.word	0x08006744
 8005c18:	08006764 	.word	0x08006764
 8005c1c:	08006724 	.word	0x08006724

08005c20 <__ascii_wctomb>:
 8005c20:	b149      	cbz	r1, 8005c36 <__ascii_wctomb+0x16>
 8005c22:	2aff      	cmp	r2, #255	; 0xff
 8005c24:	bf85      	ittet	hi
 8005c26:	238a      	movhi	r3, #138	; 0x8a
 8005c28:	6003      	strhi	r3, [r0, #0]
 8005c2a:	700a      	strbls	r2, [r1, #0]
 8005c2c:	f04f 30ff 	movhi.w	r0, #4294967295
 8005c30:	bf98      	it	ls
 8005c32:	2001      	movls	r0, #1
 8005c34:	4770      	bx	lr
 8005c36:	4608      	mov	r0, r1
 8005c38:	4770      	bx	lr
	...

08005c3c <__swsetup_r>:
 8005c3c:	4b32      	ldr	r3, [pc, #200]	; (8005d08 <__swsetup_r+0xcc>)
 8005c3e:	b570      	push	{r4, r5, r6, lr}
 8005c40:	681d      	ldr	r5, [r3, #0]
 8005c42:	4606      	mov	r6, r0
 8005c44:	460c      	mov	r4, r1
 8005c46:	b125      	cbz	r5, 8005c52 <__swsetup_r+0x16>
 8005c48:	69ab      	ldr	r3, [r5, #24]
 8005c4a:	b913      	cbnz	r3, 8005c52 <__swsetup_r+0x16>
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	f000 f985 	bl	8005f5c <__sinit>
 8005c52:	4b2e      	ldr	r3, [pc, #184]	; (8005d0c <__swsetup_r+0xd0>)
 8005c54:	429c      	cmp	r4, r3
 8005c56:	d10f      	bne.n	8005c78 <__swsetup_r+0x3c>
 8005c58:	686c      	ldr	r4, [r5, #4]
 8005c5a:	89a3      	ldrh	r3, [r4, #12]
 8005c5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c60:	0719      	lsls	r1, r3, #28
 8005c62:	d42c      	bmi.n	8005cbe <__swsetup_r+0x82>
 8005c64:	06dd      	lsls	r5, r3, #27
 8005c66:	d411      	bmi.n	8005c8c <__swsetup_r+0x50>
 8005c68:	2309      	movs	r3, #9
 8005c6a:	6033      	str	r3, [r6, #0]
 8005c6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c70:	81a3      	strh	r3, [r4, #12]
 8005c72:	f04f 30ff 	mov.w	r0, #4294967295
 8005c76:	e03e      	b.n	8005cf6 <__swsetup_r+0xba>
 8005c78:	4b25      	ldr	r3, [pc, #148]	; (8005d10 <__swsetup_r+0xd4>)
 8005c7a:	429c      	cmp	r4, r3
 8005c7c:	d101      	bne.n	8005c82 <__swsetup_r+0x46>
 8005c7e:	68ac      	ldr	r4, [r5, #8]
 8005c80:	e7eb      	b.n	8005c5a <__swsetup_r+0x1e>
 8005c82:	4b24      	ldr	r3, [pc, #144]	; (8005d14 <__swsetup_r+0xd8>)
 8005c84:	429c      	cmp	r4, r3
 8005c86:	bf08      	it	eq
 8005c88:	68ec      	ldreq	r4, [r5, #12]
 8005c8a:	e7e6      	b.n	8005c5a <__swsetup_r+0x1e>
 8005c8c:	0758      	lsls	r0, r3, #29
 8005c8e:	d512      	bpl.n	8005cb6 <__swsetup_r+0x7a>
 8005c90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c92:	b141      	cbz	r1, 8005ca6 <__swsetup_r+0x6a>
 8005c94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c98:	4299      	cmp	r1, r3
 8005c9a:	d002      	beq.n	8005ca2 <__swsetup_r+0x66>
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	f7fd fc7b 	bl	8003598 <_free_r>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	6363      	str	r3, [r4, #52]	; 0x34
 8005ca6:	89a3      	ldrh	r3, [r4, #12]
 8005ca8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005cac:	81a3      	strh	r3, [r4, #12]
 8005cae:	2300      	movs	r3, #0
 8005cb0:	6063      	str	r3, [r4, #4]
 8005cb2:	6923      	ldr	r3, [r4, #16]
 8005cb4:	6023      	str	r3, [r4, #0]
 8005cb6:	89a3      	ldrh	r3, [r4, #12]
 8005cb8:	f043 0308 	orr.w	r3, r3, #8
 8005cbc:	81a3      	strh	r3, [r4, #12]
 8005cbe:	6923      	ldr	r3, [r4, #16]
 8005cc0:	b94b      	cbnz	r3, 8005cd6 <__swsetup_r+0x9a>
 8005cc2:	89a3      	ldrh	r3, [r4, #12]
 8005cc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ccc:	d003      	beq.n	8005cd6 <__swsetup_r+0x9a>
 8005cce:	4621      	mov	r1, r4
 8005cd0:	4630      	mov	r0, r6
 8005cd2:	f000 fa05 	bl	80060e0 <__smakebuf_r>
 8005cd6:	89a0      	ldrh	r0, [r4, #12]
 8005cd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005cdc:	f010 0301 	ands.w	r3, r0, #1
 8005ce0:	d00a      	beq.n	8005cf8 <__swsetup_r+0xbc>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60a3      	str	r3, [r4, #8]
 8005ce6:	6963      	ldr	r3, [r4, #20]
 8005ce8:	425b      	negs	r3, r3
 8005cea:	61a3      	str	r3, [r4, #24]
 8005cec:	6923      	ldr	r3, [r4, #16]
 8005cee:	b943      	cbnz	r3, 8005d02 <__swsetup_r+0xc6>
 8005cf0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005cf4:	d1ba      	bne.n	8005c6c <__swsetup_r+0x30>
 8005cf6:	bd70      	pop	{r4, r5, r6, pc}
 8005cf8:	0781      	lsls	r1, r0, #30
 8005cfa:	bf58      	it	pl
 8005cfc:	6963      	ldrpl	r3, [r4, #20]
 8005cfe:	60a3      	str	r3, [r4, #8]
 8005d00:	e7f4      	b.n	8005cec <__swsetup_r+0xb0>
 8005d02:	2000      	movs	r0, #0
 8005d04:	e7f7      	b.n	8005cf6 <__swsetup_r+0xba>
 8005d06:	bf00      	nop
 8005d08:	2000000c 	.word	0x2000000c
 8005d0c:	08006744 	.word	0x08006744
 8005d10:	08006764 	.word	0x08006764
 8005d14:	08006724 	.word	0x08006724

08005d18 <abort>:
 8005d18:	b508      	push	{r3, lr}
 8005d1a:	2006      	movs	r0, #6
 8005d1c:	f000 fa50 	bl	80061c0 <raise>
 8005d20:	2001      	movs	r0, #1
 8005d22:	f7fb fbd7 	bl	80014d4 <_exit>
	...

08005d28 <__sflush_r>:
 8005d28:	898a      	ldrh	r2, [r1, #12]
 8005d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d2e:	4605      	mov	r5, r0
 8005d30:	0710      	lsls	r0, r2, #28
 8005d32:	460c      	mov	r4, r1
 8005d34:	d458      	bmi.n	8005de8 <__sflush_r+0xc0>
 8005d36:	684b      	ldr	r3, [r1, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	dc05      	bgt.n	8005d48 <__sflush_r+0x20>
 8005d3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	dc02      	bgt.n	8005d48 <__sflush_r+0x20>
 8005d42:	2000      	movs	r0, #0
 8005d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d4a:	2e00      	cmp	r6, #0
 8005d4c:	d0f9      	beq.n	8005d42 <__sflush_r+0x1a>
 8005d4e:	2300      	movs	r3, #0
 8005d50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d54:	682f      	ldr	r7, [r5, #0]
 8005d56:	602b      	str	r3, [r5, #0]
 8005d58:	d032      	beq.n	8005dc0 <__sflush_r+0x98>
 8005d5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d5c:	89a3      	ldrh	r3, [r4, #12]
 8005d5e:	075a      	lsls	r2, r3, #29
 8005d60:	d505      	bpl.n	8005d6e <__sflush_r+0x46>
 8005d62:	6863      	ldr	r3, [r4, #4]
 8005d64:	1ac0      	subs	r0, r0, r3
 8005d66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d68:	b10b      	cbz	r3, 8005d6e <__sflush_r+0x46>
 8005d6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d6c:	1ac0      	subs	r0, r0, r3
 8005d6e:	2300      	movs	r3, #0
 8005d70:	4602      	mov	r2, r0
 8005d72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d74:	6a21      	ldr	r1, [r4, #32]
 8005d76:	4628      	mov	r0, r5
 8005d78:	47b0      	blx	r6
 8005d7a:	1c43      	adds	r3, r0, #1
 8005d7c:	89a3      	ldrh	r3, [r4, #12]
 8005d7e:	d106      	bne.n	8005d8e <__sflush_r+0x66>
 8005d80:	6829      	ldr	r1, [r5, #0]
 8005d82:	291d      	cmp	r1, #29
 8005d84:	d82c      	bhi.n	8005de0 <__sflush_r+0xb8>
 8005d86:	4a2a      	ldr	r2, [pc, #168]	; (8005e30 <__sflush_r+0x108>)
 8005d88:	40ca      	lsrs	r2, r1
 8005d8a:	07d6      	lsls	r6, r2, #31
 8005d8c:	d528      	bpl.n	8005de0 <__sflush_r+0xb8>
 8005d8e:	2200      	movs	r2, #0
 8005d90:	6062      	str	r2, [r4, #4]
 8005d92:	04d9      	lsls	r1, r3, #19
 8005d94:	6922      	ldr	r2, [r4, #16]
 8005d96:	6022      	str	r2, [r4, #0]
 8005d98:	d504      	bpl.n	8005da4 <__sflush_r+0x7c>
 8005d9a:	1c42      	adds	r2, r0, #1
 8005d9c:	d101      	bne.n	8005da2 <__sflush_r+0x7a>
 8005d9e:	682b      	ldr	r3, [r5, #0]
 8005da0:	b903      	cbnz	r3, 8005da4 <__sflush_r+0x7c>
 8005da2:	6560      	str	r0, [r4, #84]	; 0x54
 8005da4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005da6:	602f      	str	r7, [r5, #0]
 8005da8:	2900      	cmp	r1, #0
 8005daa:	d0ca      	beq.n	8005d42 <__sflush_r+0x1a>
 8005dac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005db0:	4299      	cmp	r1, r3
 8005db2:	d002      	beq.n	8005dba <__sflush_r+0x92>
 8005db4:	4628      	mov	r0, r5
 8005db6:	f7fd fbef 	bl	8003598 <_free_r>
 8005dba:	2000      	movs	r0, #0
 8005dbc:	6360      	str	r0, [r4, #52]	; 0x34
 8005dbe:	e7c1      	b.n	8005d44 <__sflush_r+0x1c>
 8005dc0:	6a21      	ldr	r1, [r4, #32]
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	4628      	mov	r0, r5
 8005dc6:	47b0      	blx	r6
 8005dc8:	1c41      	adds	r1, r0, #1
 8005dca:	d1c7      	bne.n	8005d5c <__sflush_r+0x34>
 8005dcc:	682b      	ldr	r3, [r5, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d0c4      	beq.n	8005d5c <__sflush_r+0x34>
 8005dd2:	2b1d      	cmp	r3, #29
 8005dd4:	d001      	beq.n	8005dda <__sflush_r+0xb2>
 8005dd6:	2b16      	cmp	r3, #22
 8005dd8:	d101      	bne.n	8005dde <__sflush_r+0xb6>
 8005dda:	602f      	str	r7, [r5, #0]
 8005ddc:	e7b1      	b.n	8005d42 <__sflush_r+0x1a>
 8005dde:	89a3      	ldrh	r3, [r4, #12]
 8005de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005de4:	81a3      	strh	r3, [r4, #12]
 8005de6:	e7ad      	b.n	8005d44 <__sflush_r+0x1c>
 8005de8:	690f      	ldr	r7, [r1, #16]
 8005dea:	2f00      	cmp	r7, #0
 8005dec:	d0a9      	beq.n	8005d42 <__sflush_r+0x1a>
 8005dee:	0793      	lsls	r3, r2, #30
 8005df0:	680e      	ldr	r6, [r1, #0]
 8005df2:	bf08      	it	eq
 8005df4:	694b      	ldreq	r3, [r1, #20]
 8005df6:	600f      	str	r7, [r1, #0]
 8005df8:	bf18      	it	ne
 8005dfa:	2300      	movne	r3, #0
 8005dfc:	eba6 0807 	sub.w	r8, r6, r7
 8005e00:	608b      	str	r3, [r1, #8]
 8005e02:	f1b8 0f00 	cmp.w	r8, #0
 8005e06:	dd9c      	ble.n	8005d42 <__sflush_r+0x1a>
 8005e08:	6a21      	ldr	r1, [r4, #32]
 8005e0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e0c:	4643      	mov	r3, r8
 8005e0e:	463a      	mov	r2, r7
 8005e10:	4628      	mov	r0, r5
 8005e12:	47b0      	blx	r6
 8005e14:	2800      	cmp	r0, #0
 8005e16:	dc06      	bgt.n	8005e26 <__sflush_r+0xfe>
 8005e18:	89a3      	ldrh	r3, [r4, #12]
 8005e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e1e:	81a3      	strh	r3, [r4, #12]
 8005e20:	f04f 30ff 	mov.w	r0, #4294967295
 8005e24:	e78e      	b.n	8005d44 <__sflush_r+0x1c>
 8005e26:	4407      	add	r7, r0
 8005e28:	eba8 0800 	sub.w	r8, r8, r0
 8005e2c:	e7e9      	b.n	8005e02 <__sflush_r+0xda>
 8005e2e:	bf00      	nop
 8005e30:	20400001 	.word	0x20400001

08005e34 <_fflush_r>:
 8005e34:	b538      	push	{r3, r4, r5, lr}
 8005e36:	690b      	ldr	r3, [r1, #16]
 8005e38:	4605      	mov	r5, r0
 8005e3a:	460c      	mov	r4, r1
 8005e3c:	b913      	cbnz	r3, 8005e44 <_fflush_r+0x10>
 8005e3e:	2500      	movs	r5, #0
 8005e40:	4628      	mov	r0, r5
 8005e42:	bd38      	pop	{r3, r4, r5, pc}
 8005e44:	b118      	cbz	r0, 8005e4e <_fflush_r+0x1a>
 8005e46:	6983      	ldr	r3, [r0, #24]
 8005e48:	b90b      	cbnz	r3, 8005e4e <_fflush_r+0x1a>
 8005e4a:	f000 f887 	bl	8005f5c <__sinit>
 8005e4e:	4b14      	ldr	r3, [pc, #80]	; (8005ea0 <_fflush_r+0x6c>)
 8005e50:	429c      	cmp	r4, r3
 8005e52:	d11b      	bne.n	8005e8c <_fflush_r+0x58>
 8005e54:	686c      	ldr	r4, [r5, #4]
 8005e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d0ef      	beq.n	8005e3e <_fflush_r+0xa>
 8005e5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e60:	07d0      	lsls	r0, r2, #31
 8005e62:	d404      	bmi.n	8005e6e <_fflush_r+0x3a>
 8005e64:	0599      	lsls	r1, r3, #22
 8005e66:	d402      	bmi.n	8005e6e <_fflush_r+0x3a>
 8005e68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e6a:	f7ff fcd0 	bl	800580e <__retarget_lock_acquire_recursive>
 8005e6e:	4628      	mov	r0, r5
 8005e70:	4621      	mov	r1, r4
 8005e72:	f7ff ff59 	bl	8005d28 <__sflush_r>
 8005e76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e78:	07da      	lsls	r2, r3, #31
 8005e7a:	4605      	mov	r5, r0
 8005e7c:	d4e0      	bmi.n	8005e40 <_fflush_r+0xc>
 8005e7e:	89a3      	ldrh	r3, [r4, #12]
 8005e80:	059b      	lsls	r3, r3, #22
 8005e82:	d4dd      	bmi.n	8005e40 <_fflush_r+0xc>
 8005e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e86:	f7ff fcc3 	bl	8005810 <__retarget_lock_release_recursive>
 8005e8a:	e7d9      	b.n	8005e40 <_fflush_r+0xc>
 8005e8c:	4b05      	ldr	r3, [pc, #20]	; (8005ea4 <_fflush_r+0x70>)
 8005e8e:	429c      	cmp	r4, r3
 8005e90:	d101      	bne.n	8005e96 <_fflush_r+0x62>
 8005e92:	68ac      	ldr	r4, [r5, #8]
 8005e94:	e7df      	b.n	8005e56 <_fflush_r+0x22>
 8005e96:	4b04      	ldr	r3, [pc, #16]	; (8005ea8 <_fflush_r+0x74>)
 8005e98:	429c      	cmp	r4, r3
 8005e9a:	bf08      	it	eq
 8005e9c:	68ec      	ldreq	r4, [r5, #12]
 8005e9e:	e7da      	b.n	8005e56 <_fflush_r+0x22>
 8005ea0:	08006744 	.word	0x08006744
 8005ea4:	08006764 	.word	0x08006764
 8005ea8:	08006724 	.word	0x08006724

08005eac <std>:
 8005eac:	2300      	movs	r3, #0
 8005eae:	b510      	push	{r4, lr}
 8005eb0:	4604      	mov	r4, r0
 8005eb2:	e9c0 3300 	strd	r3, r3, [r0]
 8005eb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005eba:	6083      	str	r3, [r0, #8]
 8005ebc:	8181      	strh	r1, [r0, #12]
 8005ebe:	6643      	str	r3, [r0, #100]	; 0x64
 8005ec0:	81c2      	strh	r2, [r0, #14]
 8005ec2:	6183      	str	r3, [r0, #24]
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	2208      	movs	r2, #8
 8005ec8:	305c      	adds	r0, #92	; 0x5c
 8005eca:	f7fd fb5d 	bl	8003588 <memset>
 8005ece:	4b05      	ldr	r3, [pc, #20]	; (8005ee4 <std+0x38>)
 8005ed0:	6263      	str	r3, [r4, #36]	; 0x24
 8005ed2:	4b05      	ldr	r3, [pc, #20]	; (8005ee8 <std+0x3c>)
 8005ed4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ed6:	4b05      	ldr	r3, [pc, #20]	; (8005eec <std+0x40>)
 8005ed8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005eda:	4b05      	ldr	r3, [pc, #20]	; (8005ef0 <std+0x44>)
 8005edc:	6224      	str	r4, [r4, #32]
 8005ede:	6323      	str	r3, [r4, #48]	; 0x30
 8005ee0:	bd10      	pop	{r4, pc}
 8005ee2:	bf00      	nop
 8005ee4:	080061f9 	.word	0x080061f9
 8005ee8:	0800621b 	.word	0x0800621b
 8005eec:	08006253 	.word	0x08006253
 8005ef0:	08006277 	.word	0x08006277

08005ef4 <_cleanup_r>:
 8005ef4:	4901      	ldr	r1, [pc, #4]	; (8005efc <_cleanup_r+0x8>)
 8005ef6:	f000 b8af 	b.w	8006058 <_fwalk_reent>
 8005efa:	bf00      	nop
 8005efc:	08005e35 	.word	0x08005e35

08005f00 <__sfmoreglue>:
 8005f00:	b570      	push	{r4, r5, r6, lr}
 8005f02:	2268      	movs	r2, #104	; 0x68
 8005f04:	1e4d      	subs	r5, r1, #1
 8005f06:	4355      	muls	r5, r2
 8005f08:	460e      	mov	r6, r1
 8005f0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005f0e:	f7fd fbaf 	bl	8003670 <_malloc_r>
 8005f12:	4604      	mov	r4, r0
 8005f14:	b140      	cbz	r0, 8005f28 <__sfmoreglue+0x28>
 8005f16:	2100      	movs	r1, #0
 8005f18:	e9c0 1600 	strd	r1, r6, [r0]
 8005f1c:	300c      	adds	r0, #12
 8005f1e:	60a0      	str	r0, [r4, #8]
 8005f20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f24:	f7fd fb30 	bl	8003588 <memset>
 8005f28:	4620      	mov	r0, r4
 8005f2a:	bd70      	pop	{r4, r5, r6, pc}

08005f2c <__sfp_lock_acquire>:
 8005f2c:	4801      	ldr	r0, [pc, #4]	; (8005f34 <__sfp_lock_acquire+0x8>)
 8005f2e:	f7ff bc6e 	b.w	800580e <__retarget_lock_acquire_recursive>
 8005f32:	bf00      	nop
 8005f34:	200002d1 	.word	0x200002d1

08005f38 <__sfp_lock_release>:
 8005f38:	4801      	ldr	r0, [pc, #4]	; (8005f40 <__sfp_lock_release+0x8>)
 8005f3a:	f7ff bc69 	b.w	8005810 <__retarget_lock_release_recursive>
 8005f3e:	bf00      	nop
 8005f40:	200002d1 	.word	0x200002d1

08005f44 <__sinit_lock_acquire>:
 8005f44:	4801      	ldr	r0, [pc, #4]	; (8005f4c <__sinit_lock_acquire+0x8>)
 8005f46:	f7ff bc62 	b.w	800580e <__retarget_lock_acquire_recursive>
 8005f4a:	bf00      	nop
 8005f4c:	200002d2 	.word	0x200002d2

08005f50 <__sinit_lock_release>:
 8005f50:	4801      	ldr	r0, [pc, #4]	; (8005f58 <__sinit_lock_release+0x8>)
 8005f52:	f7ff bc5d 	b.w	8005810 <__retarget_lock_release_recursive>
 8005f56:	bf00      	nop
 8005f58:	200002d2 	.word	0x200002d2

08005f5c <__sinit>:
 8005f5c:	b510      	push	{r4, lr}
 8005f5e:	4604      	mov	r4, r0
 8005f60:	f7ff fff0 	bl	8005f44 <__sinit_lock_acquire>
 8005f64:	69a3      	ldr	r3, [r4, #24]
 8005f66:	b11b      	cbz	r3, 8005f70 <__sinit+0x14>
 8005f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f6c:	f7ff bff0 	b.w	8005f50 <__sinit_lock_release>
 8005f70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005f74:	6523      	str	r3, [r4, #80]	; 0x50
 8005f76:	4b13      	ldr	r3, [pc, #76]	; (8005fc4 <__sinit+0x68>)
 8005f78:	4a13      	ldr	r2, [pc, #76]	; (8005fc8 <__sinit+0x6c>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005f7e:	42a3      	cmp	r3, r4
 8005f80:	bf04      	itt	eq
 8005f82:	2301      	moveq	r3, #1
 8005f84:	61a3      	streq	r3, [r4, #24]
 8005f86:	4620      	mov	r0, r4
 8005f88:	f000 f820 	bl	8005fcc <__sfp>
 8005f8c:	6060      	str	r0, [r4, #4]
 8005f8e:	4620      	mov	r0, r4
 8005f90:	f000 f81c 	bl	8005fcc <__sfp>
 8005f94:	60a0      	str	r0, [r4, #8]
 8005f96:	4620      	mov	r0, r4
 8005f98:	f000 f818 	bl	8005fcc <__sfp>
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	60e0      	str	r0, [r4, #12]
 8005fa0:	2104      	movs	r1, #4
 8005fa2:	6860      	ldr	r0, [r4, #4]
 8005fa4:	f7ff ff82 	bl	8005eac <std>
 8005fa8:	68a0      	ldr	r0, [r4, #8]
 8005faa:	2201      	movs	r2, #1
 8005fac:	2109      	movs	r1, #9
 8005fae:	f7ff ff7d 	bl	8005eac <std>
 8005fb2:	68e0      	ldr	r0, [r4, #12]
 8005fb4:	2202      	movs	r2, #2
 8005fb6:	2112      	movs	r1, #18
 8005fb8:	f7ff ff78 	bl	8005eac <std>
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	61a3      	str	r3, [r4, #24]
 8005fc0:	e7d2      	b.n	8005f68 <__sinit+0xc>
 8005fc2:	bf00      	nop
 8005fc4:	080063ac 	.word	0x080063ac
 8005fc8:	08005ef5 	.word	0x08005ef5

08005fcc <__sfp>:
 8005fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fce:	4607      	mov	r7, r0
 8005fd0:	f7ff ffac 	bl	8005f2c <__sfp_lock_acquire>
 8005fd4:	4b1e      	ldr	r3, [pc, #120]	; (8006050 <__sfp+0x84>)
 8005fd6:	681e      	ldr	r6, [r3, #0]
 8005fd8:	69b3      	ldr	r3, [r6, #24]
 8005fda:	b913      	cbnz	r3, 8005fe2 <__sfp+0x16>
 8005fdc:	4630      	mov	r0, r6
 8005fde:	f7ff ffbd 	bl	8005f5c <__sinit>
 8005fe2:	3648      	adds	r6, #72	; 0x48
 8005fe4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	d503      	bpl.n	8005ff4 <__sfp+0x28>
 8005fec:	6833      	ldr	r3, [r6, #0]
 8005fee:	b30b      	cbz	r3, 8006034 <__sfp+0x68>
 8005ff0:	6836      	ldr	r6, [r6, #0]
 8005ff2:	e7f7      	b.n	8005fe4 <__sfp+0x18>
 8005ff4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ff8:	b9d5      	cbnz	r5, 8006030 <__sfp+0x64>
 8005ffa:	4b16      	ldr	r3, [pc, #88]	; (8006054 <__sfp+0x88>)
 8005ffc:	60e3      	str	r3, [r4, #12]
 8005ffe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006002:	6665      	str	r5, [r4, #100]	; 0x64
 8006004:	f7ff fc02 	bl	800580c <__retarget_lock_init_recursive>
 8006008:	f7ff ff96 	bl	8005f38 <__sfp_lock_release>
 800600c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006010:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006014:	6025      	str	r5, [r4, #0]
 8006016:	61a5      	str	r5, [r4, #24]
 8006018:	2208      	movs	r2, #8
 800601a:	4629      	mov	r1, r5
 800601c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006020:	f7fd fab2 	bl	8003588 <memset>
 8006024:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006028:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800602c:	4620      	mov	r0, r4
 800602e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006030:	3468      	adds	r4, #104	; 0x68
 8006032:	e7d9      	b.n	8005fe8 <__sfp+0x1c>
 8006034:	2104      	movs	r1, #4
 8006036:	4638      	mov	r0, r7
 8006038:	f7ff ff62 	bl	8005f00 <__sfmoreglue>
 800603c:	4604      	mov	r4, r0
 800603e:	6030      	str	r0, [r6, #0]
 8006040:	2800      	cmp	r0, #0
 8006042:	d1d5      	bne.n	8005ff0 <__sfp+0x24>
 8006044:	f7ff ff78 	bl	8005f38 <__sfp_lock_release>
 8006048:	230c      	movs	r3, #12
 800604a:	603b      	str	r3, [r7, #0]
 800604c:	e7ee      	b.n	800602c <__sfp+0x60>
 800604e:	bf00      	nop
 8006050:	080063ac 	.word	0x080063ac
 8006054:	ffff0001 	.word	0xffff0001

08006058 <_fwalk_reent>:
 8006058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800605c:	4606      	mov	r6, r0
 800605e:	4688      	mov	r8, r1
 8006060:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006064:	2700      	movs	r7, #0
 8006066:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800606a:	f1b9 0901 	subs.w	r9, r9, #1
 800606e:	d505      	bpl.n	800607c <_fwalk_reent+0x24>
 8006070:	6824      	ldr	r4, [r4, #0]
 8006072:	2c00      	cmp	r4, #0
 8006074:	d1f7      	bne.n	8006066 <_fwalk_reent+0xe>
 8006076:	4638      	mov	r0, r7
 8006078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800607c:	89ab      	ldrh	r3, [r5, #12]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d907      	bls.n	8006092 <_fwalk_reent+0x3a>
 8006082:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006086:	3301      	adds	r3, #1
 8006088:	d003      	beq.n	8006092 <_fwalk_reent+0x3a>
 800608a:	4629      	mov	r1, r5
 800608c:	4630      	mov	r0, r6
 800608e:	47c0      	blx	r8
 8006090:	4307      	orrs	r7, r0
 8006092:	3568      	adds	r5, #104	; 0x68
 8006094:	e7e9      	b.n	800606a <_fwalk_reent+0x12>

08006096 <__swhatbuf_r>:
 8006096:	b570      	push	{r4, r5, r6, lr}
 8006098:	460e      	mov	r6, r1
 800609a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800609e:	2900      	cmp	r1, #0
 80060a0:	b096      	sub	sp, #88	; 0x58
 80060a2:	4614      	mov	r4, r2
 80060a4:	461d      	mov	r5, r3
 80060a6:	da08      	bge.n	80060ba <__swhatbuf_r+0x24>
 80060a8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	602a      	str	r2, [r5, #0]
 80060b0:	061a      	lsls	r2, r3, #24
 80060b2:	d410      	bmi.n	80060d6 <__swhatbuf_r+0x40>
 80060b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060b8:	e00e      	b.n	80060d8 <__swhatbuf_r+0x42>
 80060ba:	466a      	mov	r2, sp
 80060bc:	f000 f902 	bl	80062c4 <_fstat_r>
 80060c0:	2800      	cmp	r0, #0
 80060c2:	dbf1      	blt.n	80060a8 <__swhatbuf_r+0x12>
 80060c4:	9a01      	ldr	r2, [sp, #4]
 80060c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80060ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80060ce:	425a      	negs	r2, r3
 80060d0:	415a      	adcs	r2, r3
 80060d2:	602a      	str	r2, [r5, #0]
 80060d4:	e7ee      	b.n	80060b4 <__swhatbuf_r+0x1e>
 80060d6:	2340      	movs	r3, #64	; 0x40
 80060d8:	2000      	movs	r0, #0
 80060da:	6023      	str	r3, [r4, #0]
 80060dc:	b016      	add	sp, #88	; 0x58
 80060de:	bd70      	pop	{r4, r5, r6, pc}

080060e0 <__smakebuf_r>:
 80060e0:	898b      	ldrh	r3, [r1, #12]
 80060e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80060e4:	079d      	lsls	r5, r3, #30
 80060e6:	4606      	mov	r6, r0
 80060e8:	460c      	mov	r4, r1
 80060ea:	d507      	bpl.n	80060fc <__smakebuf_r+0x1c>
 80060ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80060f0:	6023      	str	r3, [r4, #0]
 80060f2:	6123      	str	r3, [r4, #16]
 80060f4:	2301      	movs	r3, #1
 80060f6:	6163      	str	r3, [r4, #20]
 80060f8:	b002      	add	sp, #8
 80060fa:	bd70      	pop	{r4, r5, r6, pc}
 80060fc:	ab01      	add	r3, sp, #4
 80060fe:	466a      	mov	r2, sp
 8006100:	f7ff ffc9 	bl	8006096 <__swhatbuf_r>
 8006104:	9900      	ldr	r1, [sp, #0]
 8006106:	4605      	mov	r5, r0
 8006108:	4630      	mov	r0, r6
 800610a:	f7fd fab1 	bl	8003670 <_malloc_r>
 800610e:	b948      	cbnz	r0, 8006124 <__smakebuf_r+0x44>
 8006110:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006114:	059a      	lsls	r2, r3, #22
 8006116:	d4ef      	bmi.n	80060f8 <__smakebuf_r+0x18>
 8006118:	f023 0303 	bic.w	r3, r3, #3
 800611c:	f043 0302 	orr.w	r3, r3, #2
 8006120:	81a3      	strh	r3, [r4, #12]
 8006122:	e7e3      	b.n	80060ec <__smakebuf_r+0xc>
 8006124:	4b0d      	ldr	r3, [pc, #52]	; (800615c <__smakebuf_r+0x7c>)
 8006126:	62b3      	str	r3, [r6, #40]	; 0x28
 8006128:	89a3      	ldrh	r3, [r4, #12]
 800612a:	6020      	str	r0, [r4, #0]
 800612c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006130:	81a3      	strh	r3, [r4, #12]
 8006132:	9b00      	ldr	r3, [sp, #0]
 8006134:	6163      	str	r3, [r4, #20]
 8006136:	9b01      	ldr	r3, [sp, #4]
 8006138:	6120      	str	r0, [r4, #16]
 800613a:	b15b      	cbz	r3, 8006154 <__smakebuf_r+0x74>
 800613c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006140:	4630      	mov	r0, r6
 8006142:	f000 f8d1 	bl	80062e8 <_isatty_r>
 8006146:	b128      	cbz	r0, 8006154 <__smakebuf_r+0x74>
 8006148:	89a3      	ldrh	r3, [r4, #12]
 800614a:	f023 0303 	bic.w	r3, r3, #3
 800614e:	f043 0301 	orr.w	r3, r3, #1
 8006152:	81a3      	strh	r3, [r4, #12]
 8006154:	89a0      	ldrh	r0, [r4, #12]
 8006156:	4305      	orrs	r5, r0
 8006158:	81a5      	strh	r5, [r4, #12]
 800615a:	e7cd      	b.n	80060f8 <__smakebuf_r+0x18>
 800615c:	08005ef5 	.word	0x08005ef5

08006160 <_malloc_usable_size_r>:
 8006160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006164:	1f18      	subs	r0, r3, #4
 8006166:	2b00      	cmp	r3, #0
 8006168:	bfbc      	itt	lt
 800616a:	580b      	ldrlt	r3, [r1, r0]
 800616c:	18c0      	addlt	r0, r0, r3
 800616e:	4770      	bx	lr

08006170 <_raise_r>:
 8006170:	291f      	cmp	r1, #31
 8006172:	b538      	push	{r3, r4, r5, lr}
 8006174:	4604      	mov	r4, r0
 8006176:	460d      	mov	r5, r1
 8006178:	d904      	bls.n	8006184 <_raise_r+0x14>
 800617a:	2316      	movs	r3, #22
 800617c:	6003      	str	r3, [r0, #0]
 800617e:	f04f 30ff 	mov.w	r0, #4294967295
 8006182:	bd38      	pop	{r3, r4, r5, pc}
 8006184:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006186:	b112      	cbz	r2, 800618e <_raise_r+0x1e>
 8006188:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800618c:	b94b      	cbnz	r3, 80061a2 <_raise_r+0x32>
 800618e:	4620      	mov	r0, r4
 8006190:	f000 f830 	bl	80061f4 <_getpid_r>
 8006194:	462a      	mov	r2, r5
 8006196:	4601      	mov	r1, r0
 8006198:	4620      	mov	r0, r4
 800619a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800619e:	f000 b817 	b.w	80061d0 <_kill_r>
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d00a      	beq.n	80061bc <_raise_r+0x4c>
 80061a6:	1c59      	adds	r1, r3, #1
 80061a8:	d103      	bne.n	80061b2 <_raise_r+0x42>
 80061aa:	2316      	movs	r3, #22
 80061ac:	6003      	str	r3, [r0, #0]
 80061ae:	2001      	movs	r0, #1
 80061b0:	e7e7      	b.n	8006182 <_raise_r+0x12>
 80061b2:	2400      	movs	r4, #0
 80061b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80061b8:	4628      	mov	r0, r5
 80061ba:	4798      	blx	r3
 80061bc:	2000      	movs	r0, #0
 80061be:	e7e0      	b.n	8006182 <_raise_r+0x12>

080061c0 <raise>:
 80061c0:	4b02      	ldr	r3, [pc, #8]	; (80061cc <raise+0xc>)
 80061c2:	4601      	mov	r1, r0
 80061c4:	6818      	ldr	r0, [r3, #0]
 80061c6:	f7ff bfd3 	b.w	8006170 <_raise_r>
 80061ca:	bf00      	nop
 80061cc:	2000000c 	.word	0x2000000c

080061d0 <_kill_r>:
 80061d0:	b538      	push	{r3, r4, r5, lr}
 80061d2:	4d07      	ldr	r5, [pc, #28]	; (80061f0 <_kill_r+0x20>)
 80061d4:	2300      	movs	r3, #0
 80061d6:	4604      	mov	r4, r0
 80061d8:	4608      	mov	r0, r1
 80061da:	4611      	mov	r1, r2
 80061dc:	602b      	str	r3, [r5, #0]
 80061de:	f7fb f969 	bl	80014b4 <_kill>
 80061e2:	1c43      	adds	r3, r0, #1
 80061e4:	d102      	bne.n	80061ec <_kill_r+0x1c>
 80061e6:	682b      	ldr	r3, [r5, #0]
 80061e8:	b103      	cbz	r3, 80061ec <_kill_r+0x1c>
 80061ea:	6023      	str	r3, [r4, #0]
 80061ec:	bd38      	pop	{r3, r4, r5, pc}
 80061ee:	bf00      	nop
 80061f0:	200002cc 	.word	0x200002cc

080061f4 <_getpid_r>:
 80061f4:	f7fb b956 	b.w	80014a4 <_getpid>

080061f8 <__sread>:
 80061f8:	b510      	push	{r4, lr}
 80061fa:	460c      	mov	r4, r1
 80061fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006200:	f000 f894 	bl	800632c <_read_r>
 8006204:	2800      	cmp	r0, #0
 8006206:	bfab      	itete	ge
 8006208:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800620a:	89a3      	ldrhlt	r3, [r4, #12]
 800620c:	181b      	addge	r3, r3, r0
 800620e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006212:	bfac      	ite	ge
 8006214:	6563      	strge	r3, [r4, #84]	; 0x54
 8006216:	81a3      	strhlt	r3, [r4, #12]
 8006218:	bd10      	pop	{r4, pc}

0800621a <__swrite>:
 800621a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800621e:	461f      	mov	r7, r3
 8006220:	898b      	ldrh	r3, [r1, #12]
 8006222:	05db      	lsls	r3, r3, #23
 8006224:	4605      	mov	r5, r0
 8006226:	460c      	mov	r4, r1
 8006228:	4616      	mov	r6, r2
 800622a:	d505      	bpl.n	8006238 <__swrite+0x1e>
 800622c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006230:	2302      	movs	r3, #2
 8006232:	2200      	movs	r2, #0
 8006234:	f000 f868 	bl	8006308 <_lseek_r>
 8006238:	89a3      	ldrh	r3, [r4, #12]
 800623a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800623e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006242:	81a3      	strh	r3, [r4, #12]
 8006244:	4632      	mov	r2, r6
 8006246:	463b      	mov	r3, r7
 8006248:	4628      	mov	r0, r5
 800624a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800624e:	f000 b817 	b.w	8006280 <_write_r>

08006252 <__sseek>:
 8006252:	b510      	push	{r4, lr}
 8006254:	460c      	mov	r4, r1
 8006256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800625a:	f000 f855 	bl	8006308 <_lseek_r>
 800625e:	1c43      	adds	r3, r0, #1
 8006260:	89a3      	ldrh	r3, [r4, #12]
 8006262:	bf15      	itete	ne
 8006264:	6560      	strne	r0, [r4, #84]	; 0x54
 8006266:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800626a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800626e:	81a3      	strheq	r3, [r4, #12]
 8006270:	bf18      	it	ne
 8006272:	81a3      	strhne	r3, [r4, #12]
 8006274:	bd10      	pop	{r4, pc}

08006276 <__sclose>:
 8006276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800627a:	f000 b813 	b.w	80062a4 <_close_r>
	...

08006280 <_write_r>:
 8006280:	b538      	push	{r3, r4, r5, lr}
 8006282:	4d07      	ldr	r5, [pc, #28]	; (80062a0 <_write_r+0x20>)
 8006284:	4604      	mov	r4, r0
 8006286:	4608      	mov	r0, r1
 8006288:	4611      	mov	r1, r2
 800628a:	2200      	movs	r2, #0
 800628c:	602a      	str	r2, [r5, #0]
 800628e:	461a      	mov	r2, r3
 8006290:	f7fb f947 	bl	8001522 <_write>
 8006294:	1c43      	adds	r3, r0, #1
 8006296:	d102      	bne.n	800629e <_write_r+0x1e>
 8006298:	682b      	ldr	r3, [r5, #0]
 800629a:	b103      	cbz	r3, 800629e <_write_r+0x1e>
 800629c:	6023      	str	r3, [r4, #0]
 800629e:	bd38      	pop	{r3, r4, r5, pc}
 80062a0:	200002cc 	.word	0x200002cc

080062a4 <_close_r>:
 80062a4:	b538      	push	{r3, r4, r5, lr}
 80062a6:	4d06      	ldr	r5, [pc, #24]	; (80062c0 <_close_r+0x1c>)
 80062a8:	2300      	movs	r3, #0
 80062aa:	4604      	mov	r4, r0
 80062ac:	4608      	mov	r0, r1
 80062ae:	602b      	str	r3, [r5, #0]
 80062b0:	f7fb f953 	bl	800155a <_close>
 80062b4:	1c43      	adds	r3, r0, #1
 80062b6:	d102      	bne.n	80062be <_close_r+0x1a>
 80062b8:	682b      	ldr	r3, [r5, #0]
 80062ba:	b103      	cbz	r3, 80062be <_close_r+0x1a>
 80062bc:	6023      	str	r3, [r4, #0]
 80062be:	bd38      	pop	{r3, r4, r5, pc}
 80062c0:	200002cc 	.word	0x200002cc

080062c4 <_fstat_r>:
 80062c4:	b538      	push	{r3, r4, r5, lr}
 80062c6:	4d07      	ldr	r5, [pc, #28]	; (80062e4 <_fstat_r+0x20>)
 80062c8:	2300      	movs	r3, #0
 80062ca:	4604      	mov	r4, r0
 80062cc:	4608      	mov	r0, r1
 80062ce:	4611      	mov	r1, r2
 80062d0:	602b      	str	r3, [r5, #0]
 80062d2:	f7fb f94e 	bl	8001572 <_fstat>
 80062d6:	1c43      	adds	r3, r0, #1
 80062d8:	d102      	bne.n	80062e0 <_fstat_r+0x1c>
 80062da:	682b      	ldr	r3, [r5, #0]
 80062dc:	b103      	cbz	r3, 80062e0 <_fstat_r+0x1c>
 80062de:	6023      	str	r3, [r4, #0]
 80062e0:	bd38      	pop	{r3, r4, r5, pc}
 80062e2:	bf00      	nop
 80062e4:	200002cc 	.word	0x200002cc

080062e8 <_isatty_r>:
 80062e8:	b538      	push	{r3, r4, r5, lr}
 80062ea:	4d06      	ldr	r5, [pc, #24]	; (8006304 <_isatty_r+0x1c>)
 80062ec:	2300      	movs	r3, #0
 80062ee:	4604      	mov	r4, r0
 80062f0:	4608      	mov	r0, r1
 80062f2:	602b      	str	r3, [r5, #0]
 80062f4:	f7fb f94d 	bl	8001592 <_isatty>
 80062f8:	1c43      	adds	r3, r0, #1
 80062fa:	d102      	bne.n	8006302 <_isatty_r+0x1a>
 80062fc:	682b      	ldr	r3, [r5, #0]
 80062fe:	b103      	cbz	r3, 8006302 <_isatty_r+0x1a>
 8006300:	6023      	str	r3, [r4, #0]
 8006302:	bd38      	pop	{r3, r4, r5, pc}
 8006304:	200002cc 	.word	0x200002cc

08006308 <_lseek_r>:
 8006308:	b538      	push	{r3, r4, r5, lr}
 800630a:	4d07      	ldr	r5, [pc, #28]	; (8006328 <_lseek_r+0x20>)
 800630c:	4604      	mov	r4, r0
 800630e:	4608      	mov	r0, r1
 8006310:	4611      	mov	r1, r2
 8006312:	2200      	movs	r2, #0
 8006314:	602a      	str	r2, [r5, #0]
 8006316:	461a      	mov	r2, r3
 8006318:	f7fb f946 	bl	80015a8 <_lseek>
 800631c:	1c43      	adds	r3, r0, #1
 800631e:	d102      	bne.n	8006326 <_lseek_r+0x1e>
 8006320:	682b      	ldr	r3, [r5, #0]
 8006322:	b103      	cbz	r3, 8006326 <_lseek_r+0x1e>
 8006324:	6023      	str	r3, [r4, #0]
 8006326:	bd38      	pop	{r3, r4, r5, pc}
 8006328:	200002cc 	.word	0x200002cc

0800632c <_read_r>:
 800632c:	b538      	push	{r3, r4, r5, lr}
 800632e:	4d07      	ldr	r5, [pc, #28]	; (800634c <_read_r+0x20>)
 8006330:	4604      	mov	r4, r0
 8006332:	4608      	mov	r0, r1
 8006334:	4611      	mov	r1, r2
 8006336:	2200      	movs	r2, #0
 8006338:	602a      	str	r2, [r5, #0]
 800633a:	461a      	mov	r2, r3
 800633c:	f7fb f8d4 	bl	80014e8 <_read>
 8006340:	1c43      	adds	r3, r0, #1
 8006342:	d102      	bne.n	800634a <_read_r+0x1e>
 8006344:	682b      	ldr	r3, [r5, #0]
 8006346:	b103      	cbz	r3, 800634a <_read_r+0x1e>
 8006348:	6023      	str	r3, [r4, #0]
 800634a:	bd38      	pop	{r3, r4, r5, pc}
 800634c:	200002cc 	.word	0x200002cc

08006350 <_init>:
 8006350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006352:	bf00      	nop
 8006354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006356:	bc08      	pop	{r3}
 8006358:	469e      	mov	lr, r3
 800635a:	4770      	bx	lr

0800635c <_fini>:
 800635c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800635e:	bf00      	nop
 8006360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006362:	bc08      	pop	{r3}
 8006364:	469e      	mov	lr, r3
 8006366:	4770      	bx	lr
